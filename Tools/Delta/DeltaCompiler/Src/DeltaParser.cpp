
/*  A Bison parser, made from parsercpy.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENT	258
#define	ATTRIBUTE_IDENT	259
#define	NUMBER_CONST	260
#define	STRING_CONST	261
#define	FUNCTION	262
#define	RETURN	263
#define	ONEVENT	264
#define	IF	265
#define	ELSE	266
#define	WHILE	267
#define	FOR	268
#define	FOREACH	269
#define	NIL	270
#define	LOCAL	271
#define	AND	272
#define	NOT	273
#define	OR	274
#define	LAMBDA	275
#define	TRY	276
#define	TRAP	277
#define	THROW	278
#define	USING	279
#define	ASSERT	280
#define	TRUE	281
#define	FALSE	282
#define	BREAK	283
#define	CONTINUE	284
#define	STATIC	285
#define	CONST	286
#define	METHOD	287
#define	SELF	288
#define	ARGUMENTS	289
#define	ASSIGN	290
#define	ADD_A	291
#define	SUB_A	292
#define	MUL_A	293
#define	DIV_A	294
#define	MOD_A	295
#define	DOUBLE_LB	296
#define	DOUBLE_RB	297
#define	SEMI	298
#define	UMINUS	299
#define	MINUSMINUS	300
#define	LT	301
#define	GT	302
#define	LE	303
#define	GE	304
#define	EQ	305
#define	NE	306
#define	DOT	307
#define	DOUBLE_DOT	308
#define	TRIPLE_DOT	309
#define	DOT_ASSIGN	310
#define	GLOBAL_SCOPE	311
#define	ADD	312
#define	SUB	313
#define	MUL	314
#define	DIV	315
#define	MOD	316
#define	ATTRIBUTE	317
#define	STRINGIFY	318
#define	PLUSPLUS	319
#define	PARENTHESIS	320
#define	SQUARE_BRACKETS	321
#define	CALL	322
#define	CAST	323
#define	DOT_EQUAL	324
#define	DOT_CAST	325
#define	DOT_EQUAL_RHS	326
#define	ADD_POSTFIX	327
#define	SUB_POSTFIX	328
#define	MUL_POSTFIX	329
#define	DIV_POSTFIX	330
#define	MOD_POSTFIX	331
#define	GT_POSTFIX	332
#define	LT_POSTFIX	333
#define	NE_POSTFIX	334
#define	EQ_POSTFIX	335
#define	GE_POSTFIX	336
#define	LE_POSTFIX	337
#define	OPERATOR	338
#define	NEWSELF	339
#define	SET	340
#define	GET	341
#define	LAMBDA_REF	342

#line 1 "parsercpy.y"


// Delta parser, syntax directed parsing file, using Bison parser generator.
// Technical notice: I use a static char* buffer for IDENT, so
// if IDENT is to be taken its char* value when being on the left or
// intermediate part of a rule that has at right another non-terminal
// that includes IDENT too, the last use of IDENT would have overwritten
// all previous, so those have to be saved with a dynamic copy at the
// time the IDENT rule is engaged (see ConstId for an example). To avoid
// memory leaks in case of syntax errors for such temp string copies, 
// late string destruction is adopted.
// ScriptFighter Project.
// A. Savidis, Start October 1999 (original full version).
// Revised January 2005, changing self, putting agruments and
// generalizing table content for any expression type.
// Revised May 2006 for better source line calculation of quads.
// Extended July 2007, adding support for precise syntax error messages.
// Extended September 2008, added support for unparsed forms and 
// selective step-in in case of multiple calls in a single stmt.
// Extended January 2009, added support for object attributes (properties).
// Extended July 2009, added foreach stmt.
// Extended December 2009, added lambda functions.
//

#include <string.h>
#include <stdio.h>
#include <assert.h>

#include "DDebug.h"
#include "Symbol.h"
#include "Expr.h"
#include "ParseActions.h"
#include "Unparsable.h"
#include "ParseParms.h"
#include "DescriptiveParseErrorHandler.h"
#include "LibraryNamespace.h"
#include "CompilerAPI.h"

// Bison assumes alloca is the memory allocation
// function.
//
#ifndef	alloca
#define alloca malloc
#endif

// We want the yylval to be passed as a parameter to yylex,
// not being a global variable. This is why we define YYPURE
// or else define YYLEX_PARAM.
//
#ifdef	YYPURE
#define	YYLEX_PARAM		&yylval
#else
#define	YYPURE
#endif

#define	yyparse		DeltaCompiler_yyparse
#define yylex		DeltaCompiler_yylex
#define	yydebug		DeltaCompiler_yydebug
#define	yyerror		DeltaCompiler_yyerror

extern int			DeltaCompiler_yylex (void* yylval);

static void DeltaCompiler_yyerror (const char* s) 
	{ DescriptiveParseErrorHandler::HandleSyntaxError(); }


#line 68 "parsercpy.y"
typedef union {
	const char*				id;
	DeltaNumberValueType	numberConst;
	char*					strConst;
	int						intVal;
	DeltaExpr*				expr;
	DeltaSymbol*			sym;
	TableElements*			table;
	DeltaQuadAddress		quadNo;
	Stmt*					stmt;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		575
#define	YYFLAG		-32768
#define	YYNTBASE	98

#define YYTRANSLATE(x) ((unsigned)(x) <= 342 ? yytranslate[x] : 313)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    65,
    66,     2,     2,    73,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    72,     2,     2,
     2,     2,    71,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    67,     2,    68,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    69,    97,    70,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     6,     9,    11,    13,    14,    17,    19,
    20,    26,    28,    30,    32,    34,    35,    36,    41,    43,
    46,    48,    49,    51,    53,    55,    56,    61,    63,    64,
    66,    67,    71,    73,    74,    79,    80,    81,    82,    88,
    89,    93,    94,   100,   102,   103,   110,   112,   113,   114,
   115,   118,   119,   123,   127,   131,   133,   135,   137,   139,
   141,   143,   145,   147,   149,   151,   153,   155,   157,   159,
   160,   164,   165,   169,   172,   173,   178,   181,   184,   186,
   188,   192,   195,   200,   202,   204,   206,   208,   210,   212,
   214,   216,   217,   218,   219,   227,   228,   233,   234,   239,
   240,   245,   246,   251,   252,   257,   258,   263,   264,   269,
   270,   275,   276,   281,   282,   287,   288,   293,   294,   299,
   300,   306,   307,   313,   314,   319,   320,   325,   326,   331,
   332,   337,   338,   343,   353,   356,   358,   359,   362,   365,
   366,   370,   373,   374,   378,   379,   383,   384,   388,   390,
   392,   394,   396,   398,   400,   402,   404,   406,   408,   410,
   412,   414,   416,   418,   420,   422,   424,   426,   428,   430,
   432,   434,   436,   438,   440,   442,   444,   446,   448,   450,
   452,   454,   456,   458,   460,   462,   464,   466,   468,   470,
   472,   474,   476,   478,   480,   482,   484,   486,   488,   490,
   492,   494,   496,   498,   500,   502,   504,   506,   508,   510,
   513,   515,   517,   519,   521,   524,   525,   530,   534,   536,
   538,   540,   542,   544,   546,   548,   550,   552,   554,   555,
   560,   562,   563,   568,   569,   571,   572,   577,   579,   580,
   581,   587,   589,   590,   593,   594,   595,   601,   603,   605,
   608,   614,   618,   620,   623,   627,   629,   632,   634,   635,
   639,   640,   644,   646,   648,   650,   653,   656,   659,   662,
   664,   666,   668,   670,   672,   674,   676,   678,   680,   683,
   686,   689,   690,   695,   696,   701,   702,   707,   708,   713,
   715,   716,   719,   723,   726,   727,   732,   734,   736,   739,
   742,   744,   747,   750,   753,   756,   757,   761,   763,   765,
   767,   769,   770,   773,   774,   781,   785,   786,   787,   788,
   789,   799,   801,   802,   806,   807,   814,   820,   824,   826,
   828,   830,   832,   834,   835,   839,   843,   844,   845,   853,
   854,   855,   863,   864,   868,   869,   873,   874,   875,   882,
   883,   885,   892,   894,   896,   898,   903,   912,   921,   922,
   926,   931,   934,   936,   937,   943,   944,   948,   950,   951,
   955,   959,   960,   961,   967,   969,   970,   971,   972,   973,
   986,   987,   992,   993,   998,  1000,  1002,  1004,  1005,  1006,
  1007
};

static const short yyrhs[] = {    -1,
   101,     0,    99,   100,     0,    99,   142,     0,   142,     0,
   101,     0,     0,   101,   132,     0,   132,     0,     0,   127,
   106,   114,   103,   116,     0,     7,     0,     9,     0,    32,
     0,    16,     0,     0,     0,   104,   107,   105,   108,     0,
     3,     0,    92,   109,     0,    62,     0,     0,   187,     0,
    52,     0,    55,     0,     0,   110,    73,   111,     3,     0,
     3,     0,     0,    66,     0,     0,    54,   113,    66,     0,
    76,     0,     0,    65,   110,   115,   112,     0,     0,     0,
     0,    69,   117,   101,   118,    70,     0,     0,    69,   119,
    70,     0,     0,   127,   122,   114,   121,   123,     0,    20,
     0,     0,    69,   124,   126,   127,   125,    70,     0,   146,
     0,     0,     0,     0,   129,    43,     0,     0,   131,   210,
   128,     0,   126,   127,   133,     0,   126,   127,   134,     0,
   116,     0,   102,     0,    43,     0,   130,     0,   137,     0,
   140,     0,   277,     0,   282,     0,   302,     0,   281,     0,
   268,     0,   270,     0,   310,     0,   304,     0,     0,    25,
   136,   146,     0,     0,   138,   135,   128,     0,     8,   126,
     0,     0,   139,   141,   146,   128,     0,   139,   128,     0,
    24,   143,     0,   144,     0,   145,     0,   211,     3,    43,
     0,     3,    43,     0,    63,     3,    43,   126,     0,   152,
     0,   148,     0,   159,     0,   166,     0,   169,     0,   175,
     0,   180,     0,     3,     0,     0,     0,     0,    31,   149,
   147,   150,    35,   151,   146,     0,     0,   212,    35,   153,
   146,     0,     0,   212,    36,   154,   146,     0,     0,   212,
    38,   155,   146,     0,     0,   212,    37,   156,   146,     0,
     0,   212,    39,   157,   146,     0,     0,   212,    40,   158,
   146,     0,     0,   146,    47,   160,   146,     0,     0,   146,
    46,   161,   146,     0,     0,   146,    49,   162,   146,     0,
     0,   146,    48,   163,   146,     0,     0,   146,    50,   164,
   146,     0,     0,   146,    51,   165,   146,     0,     0,   146,
    17,   167,   127,   146,     0,     0,   146,    19,   168,   127,
   146,     0,     0,   146,    57,   170,   146,     0,     0,   146,
    58,   171,   146,     0,     0,   146,    60,   172,   146,     0,
     0,   146,    59,   173,   146,     0,     0,   146,    61,   174,
   146,     0,    65,   176,   127,   177,    72,   275,   127,   178,
    66,     0,   146,    71,     0,   146,     0,     0,   179,   146,
     0,   212,    64,     0,     0,    64,   181,   212,     0,   212,
    45,     0,     0,    45,   182,   212,     0,     0,    58,   183,
   146,     0,     0,    18,   184,   146,     0,   185,     0,   196,
     0,   186,     0,   120,     0,     5,     0,    15,     0,    26,
     0,    27,     0,    57,     0,    58,     0,    59,     0,    60,
     0,    61,     0,    47,     0,    46,     0,    51,     0,    50,
     0,    49,     0,    48,     0,    35,     0,    81,     0,    82,
     0,    83,     0,    84,     0,    85,     0,    86,     0,    87,
     0,    88,     0,    89,     0,    90,     0,    91,     0,    76,
     0,    77,     0,    10,     0,    11,     0,     7,     0,     8,
     0,     9,     0,    12,     0,    13,     0,    14,     0,    15,
     0,    16,     0,    17,     0,    18,     0,    19,     0,    20,
     0,    21,     0,    22,     0,    23,     0,    24,     0,    25,
     0,    26,     0,    27,     0,    28,     0,    29,     0,    30,
     0,    31,     0,    32,     0,    33,     0,    34,     0,   189,
     6,     0,     6,     0,    63,     0,     3,     0,   188,     0,
   190,   191,     0,     0,   192,    52,   193,   191,     0,   190,
   211,     3,     0,   189,     0,   192,     0,   194,     0,    33,
     0,    96,     0,    93,     0,   195,     0,    34,     0,   212,
     0,   232,     0,     0,    65,   146,   197,    66,     0,   209,
     0,     0,    65,   102,   198,    66,     0,     0,   200,     0,
     0,   200,    73,   201,   205,     0,   205,     0,     0,     0,
    65,   203,   199,   204,    66,     0,    76,     0,     0,   206,
   146,     0,     0,     0,    97,   207,   146,   208,    97,     0,
    54,     0,   102,     0,   216,   202,     0,   210,    73,   126,
   127,   146,     0,   126,   127,   146,     0,    56,     0,     3,
    56,     0,   211,     3,    56,     0,     3,     0,   211,     3,
     0,   259,     0,     0,    30,   213,     3,     0,     0,    16,
   214,     3,     0,   224,     0,   196,     0,   196,     0,   215,
    52,     0,   215,    67,     0,   215,    53,     0,   215,    41,
     0,    55,     0,    78,     0,    79,     0,    80,     0,     3,
     0,   188,     0,   187,     0,   195,     0,   221,     0,   217,
   222,     0,   215,   223,     0,   219,   222,     0,     0,   218,
   146,   225,    68,     0,     0,   218,   109,   226,    68,     0,
     0,   220,   146,   227,    42,     0,     0,   220,   109,   228,
    42,     0,    67,     0,     0,   231,    68,     0,   229,   233,
   230,     0,   229,   230,     0,     0,   233,    73,   234,   238,
     0,   238,     0,   102,     0,   146,   126,     0,   235,   126,
     0,   127,     0,   237,   236,     0,   237,   247,     0,   237,
   261,     0,   237,   254,     0,     0,    52,   240,   191,     0,
   187,     0,   146,     0,   239,     0,   241,     0,     0,   244,
   242,     0,     0,   245,   246,    73,   127,   243,   126,     0,
   127,   243,   126,     0,     0,     0,     0,     0,    69,   248,
   245,   249,    72,   250,   256,   251,    70,     0,   259,     0,
     0,    52,   253,   258,     0,     0,   252,    72,   255,   127,
   257,   126,     0,   256,    73,   126,   127,   257,     0,   126,
   127,   257,     0,   146,     0,   102,     0,     3,     0,   188,
     0,     4,     0,     0,    62,   260,   258,     0,   259,   262,
   265,     0,     0,     0,    69,   263,    94,   264,   127,   257,
   126,     0,     0,     0,    95,   266,   127,   257,   126,   267,
    70,     0,     0,   269,    28,   128,     0,     0,   271,    29,
   128,     0,     0,     0,    65,   273,   126,   146,   274,    66,
     0,     0,    12,     0,   276,   127,   272,   126,   127,   132,
     0,    10,     0,    11,     0,   127,     0,   278,   272,   280,
   132,     0,   278,   272,   280,   132,   279,   275,   127,   132,
     0,   285,   127,   287,   127,   293,   275,   127,   132,     0,
     0,    13,   284,    65,     0,   283,   127,   126,   286,     0,
   210,   128,     0,   128,     0,     0,   288,   127,   146,   126,
   128,     0,     0,   290,   210,   291,     0,   291,     0,     0,
   292,   126,    66,     0,   126,   127,   289,     0,     0,     0,
    72,   295,   212,   296,    73,     0,    73,     0,     0,     0,
     0,     0,    14,   298,    65,   299,   212,   300,   294,   301,
   126,   127,   146,    66,     0,     0,   297,   127,   303,   132,
     0,     0,    23,   305,   146,   128,     0,    21,     0,    22,
     0,     3,     0,     0,     0,     0,   306,   132,   311,   307,
   309,   308,   312,   132,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   134,   135,   136,   139,   140,   143,   144,   147,   152,   159,
   163,   170,   172,   174,   178,   179,   182,   184,   188,   190,
   192,   194,   198,   199,   200,   203,   206,   207,   209,   212,
   215,   218,   221,   223,   226,   226,   229,   232,   234,   236,
   239,   242,   247,   254,   259,   261,   265,   272,   273,   274,
   274,   276,   277,   281,   282,   283,   284,   285,   288,   289,
   290,   293,   294,   295,   296,   297,   298,   299,   300,   305,
   309,   315,   316,   322,   324,   326,   330,   338,   341,   342,
   345,   347,   351,   358,   359,   360,   361,   362,   363,   364,
   367,   371,   372,   373,   375,   378,   381,   385,   388,   392,
   395,   399,   402,   406,   409,   413,   416,   421,   424,   427,
   430,   433,   436,   439,   442,   445,   448,   451,   454,   458,
   460,   464,   466,   471,   474,   477,   480,   483,   486,   489,
   492,   495,   498,   502,   507,   512,   516,   518,   521,   525,
   528,   532,   536,   539,   543,   545,   548,   551,   553,   557,
   558,   559,   562,   563,   564,   565,   568,   569,   570,   571,
   572,   573,   574,   575,   576,   577,   578,   579,   580,   581,
   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
   592,   595,   596,   597,   598,   599,   600,   601,   602,   603,
   604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
   614,   615,   616,   617,   618,   619,   620,   621,   622,   625,
   627,   631,   635,   636,   639,   641,   644,   647,   651,   653,
   655,   662,   665,   667,   669,   671,   673,   675,   678,   681,
   683,   686,   689,   695,   697,   701,   705,   706,   710,   713,
   714,   716,   720,   722,   723,   726,   728,   731,   733,   739,
   745,   748,   757,   760,   763,   768,   772,   776,   779,   782,
   784,   787,   789,   793,   797,   801,   805,   809,   813,   817,
   818,   819,   820,   823,   825,   827,   829,   833,   839,   844,
   849,   854,   856,   860,   862,   866,   868,   872,   874,   882,
   887,   889,   892,   898,   905,   906,   909,   913,   923,   925,
   929,   932,   934,   936,   938,   942,   945,   948,   954,   955,
   956,   959,   961,   964,   966,   969,   974,   977,   979,   981,
   983,   986,   988,   991,   994,   996,  1000,  1003,  1008,  1009,
  1015,  1016,  1019,  1022,  1025,  1028,  1032,  1035,  1036,  1042,
  1044,  1047,  1054,  1054,  1055,  1055,  1057,  1058,  1059,  1062,
  1067,  1071,  1080,  1081,  1082,  1084,  1088,  1099,  1106,  1109,
  1112,  1116,  1118,  1122,  1123,  1129,  1130,  1135,  1139,  1140,
  1143,  1149,  1150,  1151,  1152,  1155,  1156,  1157,  1158,  1159,
  1168,  1169,  1178,  1180,  1186,  1187,  1188,  1189,  1191,  1193,
  1196
};

static const char * const yytname[] = {   "$","error","$undefined.","IDENT",
"ATTRIBUTE_IDENT","NUMBER_CONST","STRING_CONST","FUNCTION","RETURN","ONEVENT",
"IF","ELSE","WHILE","FOR","FOREACH","NIL","LOCAL","AND","NOT","OR","LAMBDA",
"TRY","TRAP","THROW","USING","ASSERT","TRUE","FALSE","BREAK","CONTINUE","STATIC",
"CONST","METHOD","SELF","ARGUMENTS","ASSIGN","ADD_A","SUB_A","MUL_A","DIV_A",
"MOD_A","DOUBLE_LB","DOUBLE_RB","SEMI","UMINUS","MINUSMINUS","LT","GT","LE",
"GE","EQ","NE","DOT","DOUBLE_DOT","TRIPLE_DOT","DOT_ASSIGN","GLOBAL_SCOPE","ADD",
"SUB","MUL","DIV","MOD","ATTRIBUTE","STRINGIFY","PLUSPLUS","'('","')'","'['",
"']'","'{'","'}'","'?'","':'","','","PARENTHESIS","SQUARE_BRACKETS","CALL","CAST",
"DOT_EQUAL","DOT_CAST","DOT_EQUAL_RHS","ADD_POSTFIX","SUB_POSTFIX","MUL_POSTFIX",
"DIV_POSTFIX","MOD_POSTFIX","GT_POSTFIX","LT_POSTFIX","NE_POSTFIX","EQ_POSTFIX",
"GE_POSTFIX","LE_POSTFIX","OPERATOR","NEWSELF","SET","GET","LAMBDA_REF","'|'",
"DeltaCode","UsingDirectives","OptionalStmts","Stmts","Function","@1","FuncClass",
"FuncLinkage","FunctionPrefix","@2","FunctionName","OperatorMethod","IdentList",
"@3","FormalArgsSuffix","@4","FormalArgs","@5","Compound","@6","@7","@8","LambdaFunction",
"@9","LambdaPrefix","LambdaCode","@10","LambdaStmt","LN","M","Semi","@11","ExpressionStmt",
"@12","Stmt","BasicExprStmt","BasicNonExprStmt","Assertion","@13","AssertStmt",
"@14","ReturnPrefix","ReturnStmt","@15","UsingDirective","UsingSpecifications",
"UsingNamespace","UsingByteCodeLibrary","Expression","ConstId","ConstAssignExpression",
"@16","@17","@18","AssignExpression","@19","@20","@21","@22","@23","@24","RelationalExpression",
"@25","@26","@27","@28","@29","@30","BooleanExpression","@31","@32","ArithmeticExpression",
"@33","@34","@35","@36","@37","TernaryExpression","TernaryCondition","TernarySelection1",
"TernarySelection2","@38","Term","@39","@40","@41","@42","Primary","ConstValue",
"OpString","KwdIdent","StringConst","Stringify","StringIdent","StringifyDottedIdents",
"@43","StringifyNamespaceIdent","StringConstUsed","FunctionAndTableObject","@44",
"@45","ActualArgumentsList","NonEmptyActualArgumentsList","@46","ActualArguments",
"@47","@48","ActualArgument","@49","@50","@51","FunctionCall","ExpressionList",
"NamespacePath","Lvalue","@52","@53","TableObject","FunctionCallObject","TableContentDot",
"TableContentBracket","TableContentBoundedDot","TableContentBoundedBracket",
"DottedOpString","DotIndex","SpecialDotIndex","TableContent","@54","@55","@56",
"@57","TablePrefix","TableSuffix","@58","TableConstructor","TableElements","@59",
"FunctionElement","UnindexedValue","M_elem","TableElement","DottedIdent","@60",
"OperatorIndex","IndexContent","IndexExpression","@61","IndexedList","@62","IndexedValues",
"@63","@64","@65","@66","IdentIndex","@67","IdentIndexElement","@68","ContentList",
"ContentExpression","AttributeIdent","AttributeId","@69","NewAttribute","AttributeSet",
"@70","@71","AttributeGet","@72","@73","BreakStmt","@74","ContinueStmt","@75",
"Condition","@76","@77","N","WhilePrefix","WhileStmt","IfPrefix","ElsePrefix",
"M_If","IfStmt","ForStmt","ForOpening","@78","ForPrefix","ForInitList","ForCondition",
"@79","ForRepeatList","@80","ForEnd","@81","ForSuffix","ForeachValue","@82",
"@83","ForeachPrefix","@84","@85","@86","@87","ForeachStmt","@88","ThrowStmt",
"@89","TryHeader","TrapHeader","ExceptionVar","TrapJumpOver","ExceptionStmt",
"@90","@91",""
};
#endif

static const short yyr1[] = {     0,
    98,    98,    98,    99,    99,   100,   100,   101,   101,   103,
   102,   104,   104,   104,   105,   105,   107,   106,   108,   108,
   108,   108,   109,   109,   109,   111,   110,   110,   110,   112,
   113,   112,   114,   115,   114,   114,   117,   118,   116,   119,
   116,   121,   120,   122,   124,   123,   125,   126,   127,   129,
   128,   131,   130,   132,   132,   132,   132,   132,   133,   133,
   133,   134,   134,   134,   134,   134,   134,   134,   134,   136,
   135,   138,   137,   139,   141,   140,   140,   142,   143,   143,
   144,   144,   145,   146,   146,   146,   146,   146,   146,   146,
   147,   149,   150,   151,   148,   153,   152,   154,   152,   155,
   152,   156,   152,   157,   152,   158,   152,   160,   159,   161,
   159,   162,   159,   163,   159,   164,   159,   165,   159,   167,
   166,   168,   166,   170,   169,   171,   169,   172,   169,   173,
   169,   174,   169,   175,   176,   177,   179,   178,   180,   181,
   180,   180,   182,   180,   183,   180,   184,   180,   180,   185,
   185,   185,   186,   186,   186,   186,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   189,
   189,   190,   191,   191,   192,   193,   192,   194,   195,   195,
   195,   196,   196,   196,   196,   196,   196,   196,   197,   196,
   196,   198,   196,   199,   199,   201,   200,   200,   203,   204,
   202,   202,   206,   205,   207,   208,   205,   205,   205,   209,
   210,   210,   211,   211,   211,   212,   212,   212,   213,   212,
   214,   212,   212,   215,   216,   217,   218,   219,   220,   221,
   221,   221,   221,   222,   222,   222,   222,   223,   224,   224,
   224,   225,   224,   226,   224,   227,   224,   228,   224,   229,
   231,   230,   232,   232,   234,   233,   233,   235,   236,   236,
   237,   238,   238,   238,   238,   240,   239,   241,   242,   242,
   242,   244,   243,   246,   245,   245,   248,   249,   250,   251,
   247,   252,   253,   252,   255,   254,   256,   256,   257,   257,
   258,   258,   259,   260,   259,   261,   263,   264,   262,   266,
   267,   265,   269,   268,   271,   270,   273,   274,   272,   275,
   276,   277,   278,   279,   280,   281,   281,   282,   284,   283,
   285,   286,   286,   288,   287,   290,   289,   289,   292,   291,
   293,   295,   296,   294,   294,   298,   299,   300,   301,   297,
   303,   302,   305,   304,   306,   307,   308,   309,   311,   312,
   310
};

static const short yyr2[] = {     0,
     0,     1,     2,     2,     1,     1,     0,     2,     1,     0,
     5,     1,     1,     1,     1,     0,     0,     4,     1,     2,
     1,     0,     1,     1,     1,     0,     4,     1,     0,     1,
     0,     3,     1,     0,     4,     0,     0,     0,     5,     0,
     3,     0,     5,     1,     0,     6,     1,     0,     0,     0,
     2,     0,     3,     3,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     3,     0,     3,     2,     0,     4,     2,     2,     1,     1,
     3,     2,     4,     1,     1,     1,     1,     1,     1,     1,
     1,     0,     0,     0,     7,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
     5,     0,     5,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     9,     2,     1,     0,     2,     2,     0,
     3,     2,     0,     3,     0,     3,     0,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     1,     1,     1,     1,     2,     0,     4,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     4,
     1,     0,     4,     0,     1,     0,     4,     1,     0,     0,
     5,     1,     0,     2,     0,     0,     5,     1,     1,     2,
     5,     3,     1,     2,     3,     1,     2,     1,     0,     3,
     0,     3,     1,     1,     1,     2,     2,     2,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
     2,     0,     4,     0,     4,     0,     4,     0,     4,     1,
     0,     2,     3,     2,     0,     4,     1,     1,     2,     2,
     1,     2,     2,     2,     2,     0,     3,     1,     1,     1,
     1,     0,     2,     0,     6,     3,     0,     0,     0,     0,
     9,     1,     0,     3,     0,     6,     5,     3,     1,     1,
     1,     1,     1,     0,     3,     3,     0,     0,     7,     0,
     0,     7,     0,     3,     0,     3,     0,     0,     6,     0,
     1,     6,     1,     1,     1,     4,     8,     8,     0,     3,
     4,     2,     1,     0,     5,     0,     3,     1,     0,     3,
     3,     0,     0,     5,     1,     0,     0,     0,     0,    12,
     0,     4,     0,     4,     1,     1,     1,     0,     0,     0,
     8
};

static const short yydefact[] = {    48,
     0,    58,    37,    48,    48,    57,    56,    49,     0,     9,
     5,     0,   253,     0,    78,    79,    80,     0,    48,     0,
     3,    48,     4,     8,    52,    12,    13,    14,    17,    36,
    82,   254,     0,     0,    48,    41,    48,   353,   351,   359,
   376,   385,   383,    59,    48,    54,    55,    60,     0,    75,
    61,    66,     0,    67,     0,    49,    62,     0,    65,    63,
    49,    49,    49,    64,    69,    48,    68,    16,    29,    33,
    10,    48,    81,   255,     0,    74,     0,     0,    49,    49,
    50,    70,    50,    77,     0,    49,    50,    50,     0,   347,
    49,    48,   364,   381,   389,    15,    22,    28,    34,     0,
    83,    39,   360,   377,   256,   333,   153,   211,   154,   261,
   147,   155,   156,   259,    92,   222,   226,   143,   145,   334,
   212,   140,    49,   290,   224,   223,   152,     0,    50,    85,
    84,    86,    87,    88,    89,    90,   149,   151,   219,     0,
   220,   221,   225,   150,   231,     0,   227,     0,     0,     0,
    49,     0,    49,   263,    49,   228,   258,    49,    48,    53,
    49,    73,    51,    50,   344,   346,    48,    48,   355,    48,
    48,    49,    49,    48,     0,    19,    21,     0,    18,    26,
     0,    11,     0,     0,    49,     0,     0,     0,    49,     0,
     0,   232,     0,   229,    49,    44,    36,   120,   122,   110,
   108,   114,   112,   116,   118,   124,   126,   130,   128,   132,
   384,   210,   213,   184,   185,   186,   182,   183,   187,   188,
   189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
   199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
   209,   214,   215,     0,   216,   257,    96,    98,   102,   100,
   104,   106,   142,   139,   269,   266,   268,   270,   267,   271,
   272,   273,   278,   280,   239,   242,   250,   274,   168,   163,
   162,   167,   166,   165,   164,   157,   158,   159,   160,   161,
   180,   181,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   276,   275,   277,   279,    24,    25,   145,
   284,   282,    23,   281,   288,   286,   301,   294,     0,   291,
    49,   297,   252,    49,    71,    76,    49,    49,   356,   363,
    50,   361,    48,    49,   382,   386,   388,    20,     0,    31,
    30,    35,    49,   264,   227,   262,   148,   260,    91,    93,
   144,   146,   331,   332,   335,   141,     0,   135,     0,    49,
    42,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,   218,     0,    49,    49,    49,    49,
    49,    49,   243,     0,     0,     0,     0,   292,   295,   293,
   323,   317,   298,    48,    48,   302,   303,     0,   305,   258,
   304,    49,    48,   348,   354,   350,   362,    49,   350,    48,
     0,    27,     0,   229,     0,     0,   233,   230,   136,     0,
     0,    49,    49,   111,   109,   115,   113,   117,   119,   125,
   127,   131,   129,   133,   213,   217,    97,    99,   103,   101,
   105,   107,   248,   245,   249,   240,   235,   238,    49,   285,
   283,   289,   287,    49,     0,    49,   299,   300,   325,   337,
     0,   251,   352,     0,    49,   366,    49,    50,   387,   390,
    32,   372,   375,   379,    94,   350,    45,    43,   121,   123,
    49,     0,   236,   244,   296,   324,   312,   314,    49,     0,
   340,   336,   349,    48,   371,    48,   368,    48,    48,   365,
    48,     0,    48,    49,    49,    48,   246,   241,   243,    48,
    49,     0,     0,    49,   338,    49,   357,   369,     0,   358,
   391,   227,    49,    95,   137,    49,     0,   237,   316,   306,
   309,   308,   310,   311,   313,    49,   319,   330,   329,    48,
    49,    49,   367,   370,     0,    49,     0,    49,    49,   247,
     0,   312,    48,   326,    49,    48,   374,     0,   134,   138,
     0,    47,   307,    48,    49,   320,    48,   341,   380,    46,
   315,    49,    48,     0,   339,     0,   328,    49,   321,   342,
    49,   327,     0,     0,     0
};

static const short yydefgoto[] = {   573,
     4,    21,     5,     6,   100,    29,    97,    30,    68,   179,
   301,    99,   329,   332,   403,    71,   181,     7,    19,    75,
    20,   127,   411,   197,   468,   496,   551,     8,   128,    84,
    85,    44,    45,    10,    46,    47,    83,   161,    48,    49,
    50,    51,    86,    11,    15,    16,    17,   529,   340,   130,
   187,   406,   494,   131,   367,   368,   370,   369,   371,   372,
   132,   355,   354,   357,   356,   358,   359,   133,   352,   353,
   134,   360,   361,   363,   362,   364,   135,   195,   410,   537,
   538,   136,   191,   188,   189,   185,   137,   138,   303,   242,
   139,   140,   243,   141,   366,   142,   143,   144,   349,   347,
   436,   437,   499,   267,   373,   472,   438,   439,   471,   517,
   145,    81,   146,   147,   186,   184,   148,   149,   150,   151,
   152,   153,   263,   297,   264,   154,   375,   374,   377,   376,
   155,   308,   309,   156,   310,   444,   385,   386,   311,   312,
   523,   541,   524,   525,   500,   501,   478,   502,   387,   446,
   503,   543,   564,   388,   445,   389,   479,   556,   530,   345,
   157,   190,   391,   451,   480,   531,   482,   506,   566,    52,
    53,    54,    55,    91,   168,   454,   455,    56,    57,    58,
   396,   170,    59,    60,    61,    77,    62,   322,   172,   173,
   485,   486,   487,   488,   399,   464,   492,   535,    63,    78,
   183,   405,   493,    64,   174,    65,    79,    66,   327,   460,
   401,    67,   175,   491
};

static const short yypact[] = {    89,
    15,-32768,   -10,   119,    32,-32768,-32768,-32768,    86,-32768,
-32768,    -6,-32768,    79,-32768,-32768,-32768,    85,   244,    24,
-32768,   202,-32768,-32768,  1064,-32768,-32768,-32768,-32768,   -22,
-32768,-32768,    57,    27,   275,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    87,    72,
-32768,-32768,    92,-32768,    93,-32768,-32768,    66,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   244,-32768,   108,   132,-32768,
-32768,-32768,-32768,-32768,    71,-32768,    88,    98,   234,-32768,
    77,-32768,-32768,-32768,   101,   234,-32768,-32768,    66,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    17,-32768,    91,    96,
-32768,-32768,-32768,-32768,   124,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   234,-32768,-32768,-32768,-32768,   156,   629,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   177,   926,
   133,-32768,-32768,   302,-32768,   181,   403,   269,    16,   758,
   573,   758,   573,-32768,   118,-32768,-32768,   234,-32768,-32768,
   234,-32768,-32768,   629,-32768,-32768,-32768,-32768,-32768,   244,
    72,-32768,-32768,   244,   165,-32768,-32768,   815,-32768,-32768,
    -9,-32768,    43,   188,   234,   189,   195,    43,   234,  1005,
    43,-32768,   120,   861,-32768,-32768,   -22,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   124,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   196,-32768,   144,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    74,
-32768,   629,-32768,-32768,-32768,   629,-32768,-32768,   135,   128,
   163,-32768,   629,-32768,   629,-32768,-32768,   234,   193,-32768,
    77,-32768,-32768,   234,-32768,-32768,-32768,-32768,   203,-32768,
-32768,-32768,   234,    38,    76,-32768,-32768,-32768,-32768,-32768,
   931,-32768,-32768,-32768,-32768,   931,   139,-32768,   141,   234,
-32768,-32768,-32768,   234,   234,   234,   234,   234,   234,   234,
   234,   234,   234,   234,   144,  1037,   234,   234,   234,   234,
   234,   234,    20,   146,   148,   176,   180,-32768,-32768,-32768,
-32768,-32768,-32768,   629,-32768,-32768,-32768,   151,-32768,    35,
-32768,   234,   244,   629,-32768,-32768,-32768,-32768,-32768,   629,
   221,-32768,   167,   629,    84,   194,-32768,-32768,   629,   159,
   172,   234,   234,   526,   526,   526,   526,   916,   916,   100,
   100,-32768,-32768,-32768,-32768,-32768,   629,   629,   629,   629,
   629,   629,-32768,-32768,-32768,-32768,   169,-32768,   234,-32768,
-32768,-32768,-32768,-32768,  1005,-32768,-32768,-32768,-32768,-32768,
   160,   629,-32768,   170,-32768,   191,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1048,   944,
   234,   192,-32768,   629,-32768,-32768,-32768,   171,-32768,   152,
-32768,-32768,-32768,   244,-32768,-32768,-32768,-32768,   244,-32768,
   244,    43,-32768,   234,-32768,-32768,   629,-32768,    33,-32768,
   667,   190,   182,   234,-32768,-32768,-32768,    77,   200,-32768,
-32768,   197,-32768,   629,-32768,-32768,   175,-32768,-32768,-32768,
   629,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   629,-32768,
-32768,   234,-32768,-32768,   201,   234,   207,   234,   234,-32768,
  1037,-32768,-32768,-32768,   234,-32768,-32768,   491,-32768,   629,
   199,   629,-32768,-32768,-32768,   204,-32768,-32768,-32768,-32768,
-32768,   234,-32768,   208,-32768,   210,-32768,-32768,-32768,-32768,
   234,-32768,   262,   281,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,    29,   -98,-32768,-32768,-32768,-32768,-32768,-32768,
  -109,-32768,-32768,-32768,-32768,    94,-32768,   183,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -34,     0,   -74,
-32768,-32768,-32768,     1,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   282,-32768,-32768,-32768,    59,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -140,  -122,
-32768,-32768,  -364,-32768,-32768,-32768,   -99,  -167,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -214,-32768,-32768,-32768,
-32768,  -170,    14,  -157,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   136,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -17,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -150,
-32768,-32768,-32768,-32768,  -247,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -460,  -145,
    -8,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   213,-32768,-32768,  -382,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -204,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768
};


#define	YYLAST		1109


static const short yytable[] = {     9,
   321,   426,    76,     9,     9,    24,   160,    25,   162,   294,
    80,   294,   165,   166,    18,   334,   457,    12,     9,   176,
   334,     9,    24,   334,   192,   335,   -49,   295,   -49,   295,
   341,    -2,    22,   346,     9,    24,    31,   101,   -49,   -49,
   -49,   -49,    69,   305,   330,   105,   106,    35,   108,    32,
   296,   -49,   296,    70,   211,    89,   331,   171,   110,   -40,
    92,    93,    94,   -49,   -49,     9,    95,   344,   328,    73,
    13,   546,   114,   433,     2,   116,   117,    14,   177,   158,
   265,    33,    74,   495,   557,  -234,   433,    34,    -1,   316,
   169,   266,    26,    36,    27,   -49,   320,   -49,    13,    72,
     3,   567,  -265,   450,   120,   121,  -322,   333,   178,   124,
   572,    82,     1,  -265,   -50,  -158,   434,    28,    -7,    87,
   -49,    88,   193,    96,   314,   -49,    26,   -49,    27,   434,
    90,     2,   317,   318,    98,   125,    80,   129,   126,   196,
   102,  -158,     1,   163,   164,  -158,  -158,  -378,  -378,   159,
   -49,    28,   103,   244,   307,   462,   463,     3,   208,   209,
   210,     2,   104,   180,     3,   105,   106,   107,   108,     9,
   319,   323,   324,     9,   325,   196,   553,   109,   110,    32,
   111,   194,   212,   246,   245,  -291,   326,     3,   112,   113,
   336,   338,   114,   115,   350,   116,   117,   339,   365,    74,
   379,    -6,   378,   395,   407,   402,   408,   118,   -49,   302,
   -49,   306,   383,   440,   381,   441,   313,   442,    13,   315,
   119,   443,   449,   459,   120,   121,   122,   123,   465,   124,
   466,   382,   461,   -49,   192,   483,   105,   106,   107,   108,
   467,   473,  -318,   337,     2,   505,   397,   342,   109,   110,
   -49,   111,   -49,   527,   481,   125,  -369,   498,   126,   112,
   113,   574,   526,   114,   115,   534,   116,   117,   560,  -373,
     3,   540,   549,   547,   435,   -49,   563,   569,   118,   570,
   575,   -49,   182,   -49,   518,    23,     2,   304,   398,    13,
   351,   119,   380,   475,   554,   120,   121,   122,   123,   476,
   124,   167,   390,   533,     0,     0,   -49,     0,     0,   255,
   193,     0,     3,   392,     0,   508,   393,     2,     0,     0,
   256,   257,   344,   258,   334,     0,   125,     0,     0,   126,
     0,     0,   193,     0,   512,   259,     0,     0,     0,     0,
     0,     0,  -264,     3,   -38,     0,   260,   261,   262,   447,
   448,   412,   413,  -264,  -264,     0,  -264,     0,     0,     0,
   522,     0,     0,     0,     0,   458,  -265,     0,  -264,   384,
     0,     0,     9,     0,     0,     0,   394,  -265,     0,  -264,
  -264,  -264,   400,   490,     0,     0,     0,     0,     0,     0,
     0,   404,     9,   453,     0,     0,     0,   456,     0,     0,
   435,     0,     0,     0,     0,   528,     0,     0,   409,     0,
     0,     0,   414,   415,   416,   417,   418,   419,   420,   421,
   422,   423,   424,     0,     0,   427,   428,   429,   430,   431,
   432,     0,     0,   528,     0,     0,     0,   247,   248,   249,
   250,   251,   252,   307,     0,   477,   528,   253,     0,     0,
   452,    80,     0,   509,   484,     0,   489,     0,   513,     0,
     0,   516,     0,   528,     0,   519,   254,     0,     0,     0,
   469,   470,   528,     0,     0,     0,     0,     0,   504,     0,
     0,     0,     0,     9,   507,     0,     0,     0,     9,   510,
     9,   511,     0,     0,   515,   544,     0,   474,     9,     0,
     0,     0,     0,   193,     0,   532,     0,   198,   555,   199,
     0,   558,   536,     0,     0,   539,     0,     0,     0,   561,
     0,     0,   565,     0,     0,   542,     0,     0,   568,   497,
   545,   193,     0,     0,     0,     0,   200,   201,   202,   203,
   204,   205,     0,     0,   193,     0,     0,   206,   207,   208,
   209,   210,   514,     0,   562,     0,   559,     0,     0,   521,
     0,   193,     0,     0,     0,     0,     0,   571,     0,     0,
   193,-32768,-32768,-32768,-32768,   105,   106,   107,   108,     0,
     0,     0,   206,   207,   208,   209,   210,   109,   110,     0,
   111,     0,     0,     0,   548,     0,   550,   552,   112,   113,
     0,     0,   114,   115,     0,   116,   117,   269,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   118,   270,   271,
   272,   273,   274,   275,   298,     0,     0,   299,    13,   276,
   300,   278,   279,   280,   120,   121,   122,   123,     0,   124,
     0,     0,     0,     0,     0,   198,     0,   199,   281,   282,
     0,     0,     0,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,     0,   125,     0,     0,   126,   105,
   106,   107,   108,     0,   200,   201,   202,   203,   204,   205,
     0,   109,   110,     0,   111,   206,   207,   208,   209,   210,
     0,     0,   112,   113,     0,     0,   114,   115,     0,   116,
   117,   269,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   118,   270,   271,   272,   273,   274,   275,   520,     0,
     0,     0,    13,   276,   300,   278,   279,   280,   120,   121,
   122,   123,     0,   124,     0,     0,     0,     0,     0,     0,
     0,     0,   281,   282,     0,     0,     0,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,     0,   125,
   268,     0,   126,   108,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   269,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   270,   271,   272,   273,   274,   275,     0,
     0,     0,     0,     0,   276,   277,   278,   279,   280,     0,
   121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   281,   282,     0,     0,     0,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   269,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   270,   271,   272,   273,   274,   275,   298,     0,     0,   299,
     0,   276,   277,   278,   279,   280,     0,   198,     0,   199,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   281,   282,     0,     0,     0,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   200,   201,   202,   203,
   204,   205,     0,     0,     0,     0,     0,   206,   207,   208,
   209,   210,     0,     0,     0,     0,     0,     0,   213,     0,
     0,   348,   214,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
   198,   200,   201,   202,   203,-32768,-32768,     0,     0,     0,
     0,  -227,   206,   207,   208,   209,   210,     0,     0,     0,
     0,    13,  -227,  -227,     0,  -227,     0,     0,     0,   200,
   201,   202,   203,   204,   205,  -227,     0,  -227,     0,     0,
   206,   207,   208,   209,   210,     0,  -227,   343,  -227,  -227,
  -227,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,   239,   240,   241,   425,
     0,     0,     0,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
   231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
   241,    37,     0,    38,     0,    39,    40,    41,     0,     0,
     0,     0,     0,     0,    42,     0,    43,     0,   -72,     0,
     0,  -343,  -345,   200,   201,   202,   203,   204,   205,     0,
     0,     0,     0,     0,   206,   207,   208,   209,   210
};

static const short yycheck[] = {     0,
   171,   366,    37,     4,     5,     5,    81,     8,    83,   150,
    45,   152,    87,    88,     1,   183,   399,     3,    19,     3,
   188,    22,    22,   191,   123,   183,     7,   150,     9,   152,
   188,     0,     4,   191,    35,    35,    43,    72,     7,     7,
     9,     9,    65,   153,    54,     3,     4,    19,     6,    56,
   150,    32,   152,    76,   129,    56,    66,    92,    16,    70,
    61,    62,    63,    32,    32,    66,    66,   190,   178,    43,
    56,   532,    30,    54,    43,    33,    34,    63,    62,    80,
    65,     3,    56,   466,   545,    66,    54,     3,     0,   164,
    91,    76,     7,    70,     9,     7,   171,     9,    56,    43,
    69,   562,    65,    69,    62,    63,    72,    65,    92,    67,
   571,    25,    24,    76,    43,    42,    97,    32,     0,    28,
    32,    29,   123,    16,   159,     7,     7,     9,     9,    97,
    65,    43,   167,   168,     3,    93,   171,    79,    96,    20,
    70,    68,    24,    43,    86,    72,    73,    72,    73,    73,
    32,    32,    65,   140,   155,    72,    73,    69,    59,    60,
    61,    43,    65,    73,    69,     3,     4,     5,     6,   170,
   170,   172,   173,   174,   174,    20,   541,    15,    16,    56,
    18,   123,     6,     3,    52,    68,    22,    69,    26,    27,
     3,     3,    30,    31,   195,    33,    34,     3,     3,    56,
    73,     0,    68,    11,    66,     3,    66,    45,     7,   151,
     9,   153,   311,    68,    52,    68,   158,    42,    56,   161,
    58,    42,    72,     3,    62,    63,    64,    65,    35,    67,
    72,    69,    66,    32,   333,    66,     3,     4,     5,     6,
    69,    73,    72,   185,    43,    94,   321,   189,    15,    16,
     7,    18,     9,    72,    95,    93,    66,    66,    96,    26,
    27,     0,    73,    30,    31,    66,    33,    34,    70,    73,
    69,    97,    66,    73,   373,    32,    73,    70,    45,    70,
     0,     7,   100,     9,   499,     4,    43,   152,   323,    56,
   197,    58,   310,   444,   542,    62,    63,    64,    65,   445,
    67,    89,   311,   508,    -1,    -1,    32,    -1,    -1,    41,
   311,    -1,    69,   314,    -1,   486,   317,    43,    -1,    -1,
    52,    53,   445,    55,   492,    -1,    93,    -1,    -1,    96,
    -1,    -1,   333,    -1,   492,    67,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    69,    70,    -1,    78,    79,    80,   384,
   385,   352,   353,    52,    53,    -1,    55,    -1,    -1,    -1,
   501,    -1,    -1,    -1,    -1,   400,    65,    -1,    67,   311,
    -1,    -1,   373,    -1,    -1,    -1,   318,    76,    -1,    78,
    79,    80,   324,   458,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   333,   393,   393,    -1,    -1,    -1,   398,    -1,    -1,
   499,    -1,    -1,    -1,    -1,   504,    -1,    -1,   350,    -1,
    -1,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
   362,   363,   364,    -1,    -1,   367,   368,   369,   370,   371,
   372,    -1,    -1,   532,    -1,    -1,    -1,    35,    36,    37,
    38,    39,    40,   444,    -1,   446,   545,    45,    -1,    -1,
   392,   486,    -1,   488,   455,    -1,   457,    -1,   493,    -1,
    -1,   496,    -1,   562,    -1,   500,    64,    -1,    -1,    -1,
   412,   413,   571,    -1,    -1,    -1,    -1,    -1,   479,    -1,
    -1,    -1,    -1,   484,   484,    -1,    -1,    -1,   489,   489,
   491,   491,    -1,    -1,   495,   530,    -1,   439,   499,    -1,
    -1,    -1,    -1,   504,    -1,   506,    -1,    17,   543,    19,
    -1,   546,   513,    -1,    -1,   516,    -1,    -1,    -1,   554,
    -1,    -1,   557,    -1,    -1,   526,    -1,    -1,   563,   471,
   531,   532,    -1,    -1,    -1,    -1,    46,    47,    48,    49,
    50,    51,    -1,    -1,   545,    -1,    -1,    57,    58,    59,
    60,    61,   494,    -1,   555,    -1,    66,    -1,    -1,   501,
    -1,   562,    -1,    -1,    -1,    -1,    -1,   568,    -1,    -1,
   571,    46,    47,    48,    49,     3,     4,     5,     6,    -1,
    -1,    -1,    57,    58,    59,    60,    61,    15,    16,    -1,
    18,    -1,    -1,    -1,   536,    -1,   538,   539,    26,    27,
    -1,    -1,    30,    31,    -1,    33,    34,    35,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    47,
    48,    49,    50,    51,    52,    -1,    -1,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    -1,    67,
    -1,    -1,    -1,    -1,    -1,    17,    -1,    19,    76,    77,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    -1,    93,    -1,    -1,    96,     3,
     4,     5,     6,    -1,    46,    47,    48,    49,    50,    51,
    -1,    15,    16,    -1,    18,    57,    58,    59,    60,    61,
    -1,    -1,    26,    27,    -1,    -1,    30,    31,    -1,    33,
    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
    -1,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    -1,    93,
     3,    -1,    96,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    46,    47,    48,    49,    50,    51,    -1,
    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    35,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    46,    47,    48,    49,    50,    51,    52,    -1,    -1,    55,
    -1,    57,    58,    59,    60,    61,    -1,    17,    -1,    19,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    46,    47,    48,    49,
    50,    51,    -1,    -1,    -1,    -1,    -1,    57,    58,    59,
    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    -1,    71,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    17,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
    -1,    41,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    -1,    56,    52,    53,    -1,    55,    -1,    -1,    -1,    46,
    47,    48,    49,    50,    51,    65,    -1,    67,    -1,    -1,
    57,    58,    59,    60,    61,    -1,    76,     3,    78,    79,
    80,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,     3,
    -1,    -1,    -1,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,     8,    -1,    10,    -1,    12,    13,    14,    -1,    -1,
    -1,    -1,    -1,    -1,    21,    -1,    23,    -1,    25,    -1,
    -1,    28,    29,    46,    47,    48,    49,    50,    51,    -1,
    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 135 "parsercpy.y"
{ /* Intentionally empty actions. */ ;
    break;}
case 8:
#line 148 "parsercpy.y"
{	UNPARSABLE_GET(Unparse_Stmts(yyvsp[-1].stmt, yyvsp[0].stmt));
							DELTASYMBOLS.ResetTemp();
							yyval.stmt = Translate_Stmts(yyvsp[-1].stmt, yyvsp[0].stmt); 
							UNPARSABLE_SET(yyval.stmt);	;
    break;}
case 9:
#line 153 "parsercpy.y"
{ yyval.stmt = Translate_Stmts(yyvsp[0].stmt); ;
    break;}
case 10:
#line 160 "parsercpy.y"
{	Translate_FunctionHeader(yyvsp[-1].sym); 
						DELTASYMBOLS.PushAndResetTempCounter(); SG(S_BLOCK); ;
    break;}
case 11:
#line 163 "parsercpy.y"
{	EG(S_BLOCK); EM(S_FUNC_(yyvsp[-3].sym)); 
						UNPARSABLE_GET(Unparse_Function(yyvsp[-3].sym, yyvsp[0].stmt));
						if (yyval.sym = Translate_Function(yyvsp[-3].sym, yyvsp[0].stmt, yyvsp[-4].quadNo))
							DPTR(yyval.sym)->SetSourceCode(unparsed);
					;
    break;}
case 12:
#line 171 "parsercpy.y"
{ yyval.intVal = DELTA_FUNCCLASS_PROGRAMFUNCTION; ;
    break;}
case 13:
#line 173 "parsercpy.y"
{ yyval.intVal = DELTA_FUNCCLASS_ONEVENT; ;
    break;}
case 14:
#line 175 "parsercpy.y"
{ yyval.intVal = DELTA_FUNCCLASS_METHOD; ;
    break;}
case 15:
#line 178 "parsercpy.y"
{ yyval.intVal = DELTA_FUNCTION_NO_EXPORT; ;
    break;}
case 16:
#line 179 "parsercpy.y"
{ yyval.intVal = DELTA_FUNCTION_DEFAULT_EXPORT; ;
    break;}
case 17:
#line 183 "parsercpy.y"
{ SM(S_FUNC_(yyvsp[0].intVal)); PE2(T_FUNC_(yyvsp[0].intVal), T_LOCAL_OR_FUNCNAME); ;
    break;}
case 18:
#line 185 "parsercpy.y"
{ PE(T_LPAR); SG(S_FARGS); yyval.sym = Translate_Function(yyvsp[0].id, yyvsp[-3].intVal, yyvsp[-1].intVal); ;
    break;}
case 19:
#line 189 "parsercpy.y"
{ yyval.id = yyvsp[0].id; ;
    break;}
case 20:
#line 191 "parsercpy.y"
{ yyval.id = yyvsp[0].id; ;
    break;}
case 21:
#line 193 "parsercpy.y"
{ yyval.id = DELTA_TOSTRING_SYMBOLIC_NAME; ;
    break;}
case 22:
#line 195 "parsercpy.y"
{ unullify(yyval.id); ;
    break;}
case 23:
#line 198 "parsercpy.y"
{ yyval.id = yyvsp[0].id;		;
    break;}
case 24:
#line 199 "parsercpy.y"
{ yyval.id = DELTA_OPERATOR_OBJECT_GET;	;
    break;}
case 25:
#line 200 "parsercpy.y"
{ yyval.id = DELTA_OPERATOR_OBJECT_SET;	;
    break;}
case 26:
#line 204 "parsercpy.y"
{ PE2(T_COMMA, T_IDENT); ;
    break;}
case 27:
#line 206 "parsercpy.y"
{ Translate_IdentList(yyvsp[0].id); ;
    break;}
case 28:
#line 208 "parsercpy.y"
{ PE(T_IDENT); Translate_IdentList(yyvsp[0].id); ;
    break;}
case 30:
#line 214 "parsercpy.y"
{ EG(S_FARGS); PE(T_RPAR);  ;
    break;}
case 31:
#line 216 "parsercpy.y"
{ EG(S_FARGS); PE2(T_TDOT, T_RPAR); ;
    break;}
case 32:
#line 218 "parsercpy.y"
{  Translate_VarArgs(); ;
    break;}
case 33:
#line 222 "parsercpy.y"
{ EG(S_FARGS); PE(T_RPAR); ;
    break;}
case 34:
#line 224 "parsercpy.y"
{ OE(T_LPAR_OR_TDOT); ;
    break;}
case 36:
#line 226 "parsercpy.y"
{ EG(S_FARGS); PE(T_RPAR); ;
    break;}
case 37:
#line 230 "parsercpy.y"
{ Translate_CompoundBegin(); PE(T_LBC); ;
    break;}
case 38:
#line 232 "parsercpy.y"
{ PE(T_RBC); ;
    break;}
case 39:
#line 234 "parsercpy.y"
{  Unparse_Compound(yyval.stmt = yyvsp[-2].stmt); Translate_CompoundEnd(); ;
    break;}
case 40:
#line 237 "parsercpy.y"
{ PE(T_LBC); ;
    break;}
case 41:
#line 239 "parsercpy.y"
{  PE(T_RBC); Unparse_Compound(yyval.stmt = NEW_STMT); Translate_EmptyCompound(); ;
    break;}
case 42:
#line 243 "parsercpy.y"
{	Translate_FunctionHeader(yyvsp[-1].sym); 
							DELTASYMBOLS.PushAndResetTempCounter(); 
							PE(T_LBC); ;
    break;}
case 43:
#line 247 "parsercpy.y"
{	EM(S_FUNC_(yyvsp[-3].sym)); 
							UNPARSABLE_GET(Unparse_LambdaFunction(yyvsp[-3].sym, yyvsp[0].stmt));
							if (yyval.sym = Translate_Function(yyvsp[-3].sym, yyvsp[0].stmt, yyvsp[-4].quadNo))
								DPTR(yyval.sym)->SetSourceCode(unparsed);
							DELTASYMBOLS.PopAndRestoreTempCounter(); ;
    break;}
case 44:
#line 255 "parsercpy.y"
{	SM(S_FUNC_(DELTA_FUNCCLASS_PROGRAMFUNCTION)); PE2(T_LAMBDA, T_LPAR); SG(S_FARGS); 
							yyval.sym = Translate_Function((char*) 0, DELTA_FUNCCLASS_PROGRAMFUNCTION); ;
    break;}
case 45:
#line 260 "parsercpy.y"
{ Translate_CompoundBegin(); PE(S_EXPR); ;
    break;}
case 46:
#line 262 "parsercpy.y"
{ yyval.stmt = yyvsp[-1].stmt; Translate_CompoundEnd(); QUADS.SetQuadLine(yyvsp[-2].quadNo, yyvsp[-3].intVal, true); ;
    break;}
case 47:
#line 266 "parsercpy.y"
{ yyval.stmt = Translate_RETURN(yyvsp[0].expr); Unparse_LambdaStmt(yyval.stmt, yyvsp[0].expr); PE(T_RBC); ;
    break;}
case 48:
#line 272 "parsercpy.y"
{ yyval.intVal = DeltaCompiler::GetLine(); ;
    break;}
case 49:
#line 273 "parsercpy.y"
{ yyval.quadNo = QUADS.NextQuadNo(); ;
    break;}
case 50:
#line 274 "parsercpy.y"
{ PE(T_SEMI); ;
    break;}
case 52:
#line 276 "parsercpy.y"
{ SM(S_STMT); ;
    break;}
case 53:
#line 278 "parsercpy.y"
{ yyval.stmt =	Translate_ExprListStmt(yyvsp[-1].expr); Unparse_ExprListStmt(yyval.stmt, yyvsp[-1].expr); ;
    break;}
case 54:
#line 281 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt; QUADS.SetQuadLine(yyvsp[-1].quadNo, yyvsp[-2].intVal, true);  Translate_BasicStmt(yyvsp[-2].intVal); ;
    break;}
case 55:
#line 282 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt; QUADS.SetQuadLine(yyvsp[-1].quadNo, yyvsp[-2].intVal);  Translate_BasicStmt(yyvsp[-2].intVal); ;
    break;}
case 56:
#line 283 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 57:
#line 284 "parsercpy.y"
{ yyval.stmt = NEW_STMT; Unparse_FunctionDef(yyval.stmt, yyvsp[0].sym); ;
    break;}
case 58:
#line 285 "parsercpy.y"
{ yyval.stmt = NEW_STMT; yyval.stmt->SetUnparsed(";"); ;
    break;}
case 59:
#line 288 "parsercpy.y"
{ EM(S_STMT); yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 60:
#line 289 "parsercpy.y"
{ EM(S_STMT); yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 61:
#line 290 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt;;
    break;}
case 62:
#line 293 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt;;
    break;}
case 63:
#line 294 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt;;
    break;}
case 64:
#line 295 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 65:
#line 296 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt;;
    break;}
case 66:
#line 297 "parsercpy.y"
{ EM(S_STMT); yyval.stmt = Translate_BREAK(); Unparse_BuiltInStmt(yyval.stmt, BREAK); ;
    break;}
case 67:
#line 298 "parsercpy.y"
{ EM(S_STMT); yyval.stmt = Translate_CONTINUE(); Unparse_BuiltInStmt(yyval.stmt, CONTINUE); ;
    break;}
case 68:
#line 299 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 69:
#line 300 "parsercpy.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 70:
#line 306 "parsercpy.y"
{	SM(S_ASSRT); SG(S_EXPR); 
						ParseParms::InAssertStmt().enter(); ;
    break;}
case 71:
#line 309 "parsercpy.y"
{	EG(S_EXPR); PE(S_EXPR); EM(S_ASSRT); 
						Translate_ASSERT(yyvsp[0].expr); 
						ParseParms::InAssertStmt().exit(); 
						Unparse_ExprStmt(yyval.stmt = NEW_STMT, ASSERT, yyvsp[0].expr); ;
    break;}
case 72:
#line 315 "parsercpy.y"
{ SM(S_STMT); PE(S_ASSRT);	;
    break;}
case 73:
#line 317 "parsercpy.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 74:
#line 322 "parsercpy.y"
{ SM(S_RET); ;
    break;}
case 75:
#line 325 "parsercpy.y"
{ PE2(T_RET, S_EXPR); ;
    break;}
case 76:
#line 327 "parsercpy.y"
{	EM(S_RET); 
						yyval.stmt = Translate_RETURN(yyvsp[-1].expr); 
						Unparse_ExprStmt(yyval.stmt, RETURN, yyvsp[-1].expr); ;
    break;}
case 77:
#line 331 "parsercpy.y"
{	EM(S_RET); 
						yyval.stmt = Translate_RETURN(); 
						Unparse_BuiltInStmt(yyval.stmt, RETURN); ;
    break;}
case 81:
#line 346 "parsercpy.y"
{ Translate_UsingNamespace(yyvsp[-1].id, true); ;
    break;}
case 82:
#line 348 "parsercpy.y"
{ Translate_UsingNamespace(yyvsp[-1].id, false); ;
    break;}
case 83:
#line 352 "parsercpy.y"
{ Translate_UsingByteCodeLibrary(yyvsp[-2].id, yyvsp[0].intVal); ;
    break;}
case 84:
#line 358 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 85:
#line 359 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 86:
#line 360 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 87:
#line 361 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 88:
#line 362 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 89:
#line 363 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 90:
#line 364 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 91:
#line 368 "parsercpy.y"
{ yyval.strConst = Translate_StringWithLateDestruction(ucopystr(yyvsp[0].id)); ;
    break;}
case 92:
#line 371 "parsercpy.y"
{ SM(S_CONST); PE(T_IDENT); ;
    break;}
case 93:
#line 372 "parsercpy.y"
{ PE(T_ASSIGN); ;
    break;}
case 94:
#line 373 "parsercpy.y"
{ PE(S_EXPR); ;
    break;}
case 95:
#line 375 "parsercpy.y"
{ EM(S_CONST); yyval.expr = Translate_ConstAssignExpression(yyvsp[-4].strConst, yyvsp[0].expr); ;
    break;}
case 96:
#line 379 "parsercpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_ASSIGN, S_EXPR); ;
    break;}
case 97:
#line 381 "parsercpy.y"
{	EM(S_ASSIGNEXPR); 
								yyval.expr = Translate_AssignExpr(yyvsp[-3].expr, yyvsp[0].expr); yyvsp[-3].expr->SetInitialised(); 
								Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, ASSIGN, yyvsp[0].expr);	;
    break;}
case 98:
#line 386 "parsercpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_ADDA, S_EXPR); ;
    break;}
case 99:
#line 388 "parsercpy.y"
{	EM(S_ASSIGNEXPR); 
								yyval.expr = Translate_AssignArithExpr(yyvsp[-3].expr, yyvsp[0].expr, DeltaIC_ADD, "+="); 
								Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, ADD_A, yyvsp[0].expr);	;
    break;}
case 100:
#line 393 "parsercpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_MULA, S_EXPR); ;
    break;}
case 101:
#line 395 "parsercpy.y"
{	EM(S_ASSIGNEXPR); 
								yyval.expr = Translate_AssignArithExpr(yyvsp[-3].expr, yyvsp[0].expr, DeltaIC_MUL, "*="); 
								Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, MUL_A, yyvsp[0].expr);	;
    break;}
case 102:
#line 400 "parsercpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_SUBA, S_EXPR); ;
    break;}
case 103:
#line 402 "parsercpy.y"
{	EM(S_ASSIGNEXPR); 
								yyval.expr = Translate_AssignArithExpr(yyvsp[-3].expr, yyvsp[0].expr, DeltaIC_SUB, "-="); 
								Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, SUB_A, yyvsp[0].expr);	;
    break;}
case 104:
#line 407 "parsercpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_DIVA, S_EXPR); ;
    break;}
case 105:
#line 409 "parsercpy.y"
{	EM(S_ASSIGNEXPR); 
								yyval.expr = Translate_AssignArithExpr(yyvsp[-3].expr, yyvsp[0].expr, DeltaIC_DIV, "/="); 
								Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, DIV_A, yyvsp[0].expr);	;
    break;}
case 106:
#line 414 "parsercpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_MODA, S_EXPR); ;
    break;}
case 107:
#line 416 "parsercpy.y"
{	EM(S_ASSIGNEXPR); 
								yyval.expr = Translate_AssignArithExpr(yyvsp[-3].expr, yyvsp[0].expr, DeltaIC_MOD, "%="); 
								Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, MOD_A, yyvsp[0].expr);	;
    break;}
case 108:
#line 422 "parsercpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_GT, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 109:
#line 424 "parsercpy.y"
{	EM(S_RELAT); yyval.expr = Translate_RelationalExpr(yyvsp[-3].expr, yyvsp[0].expr->AdaptIfBool(), DeltaIC_JGT, ">"); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, GT, yyvsp[0].expr);	;
    break;}
case 110:
#line 428 "parsercpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_LT, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 111:
#line 430 "parsercpy.y"
{	EM(S_RELAT); yyval.expr = Translate_RelationalExpr(yyvsp[-3].expr, yyvsp[0].expr->AdaptIfBool(), DeltaIC_JLT, "<"); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, LT, yyvsp[0].expr);	;
    break;}
case 112:
#line 434 "parsercpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_GE, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 113:
#line 436 "parsercpy.y"
{	EM(S_RELAT); yyval.expr = Translate_RelationalExpr(yyvsp[-3].expr, yyvsp[0].expr->AdaptIfBool(), DeltaIC_JGE, ">="); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, GE, yyvsp[0].expr);	;
    break;}
case 114:
#line 440 "parsercpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_LE, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 115:
#line 442 "parsercpy.y"
{	EM(S_RELAT); yyval.expr = Translate_RelationalExpr(yyvsp[-3].expr, yyvsp[0].expr->AdaptIfBool(), DeltaIC_JLE, "<="); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, LE, yyvsp[0].expr);	;
    break;}
case 116:
#line 446 "parsercpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_EQ, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 117:
#line 448 "parsercpy.y"
{	EM(S_RELAT); yyval.expr = Translate_RelationalExpr(yyvsp[-3].expr, yyvsp[0].expr->AdaptIfBool(), DeltaIC_JEQ, "=="); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, EQ, yyvsp[0].expr);	;
    break;}
case 118:
#line 452 "parsercpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_NE, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 119:
#line 454 "parsercpy.y"
{	EM(S_RELAT); yyval.expr = Translate_RelationalExpr(yyvsp[-3].expr, yyvsp[0].expr->AdaptIfBool(), DeltaIC_JNE, "!="); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, NE, yyvsp[0].expr);	;
    break;}
case 120:
#line 459 "parsercpy.y"
{ SM(S_LOGICAL); PE3(S_EXPR, T_AND, S_EXPR); DNPTR(yyvsp[-1].expr)->AdaptToBool(); ;
    break;}
case 121:
#line 461 "parsercpy.y"
{	EM(S_LOGICAL); yyval.expr = Translate_ExprANDExpr(yyvsp[-4].expr, yyvsp[-1].quadNo, yyvsp[0].expr); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-4].expr, AND, yyvsp[0].expr);	;
    break;}
case 122:
#line 465 "parsercpy.y"
{ SM(S_LOGICAL); PE3(S_EXPR, T_OR, S_EXPR); DNPTR(yyvsp[-1].expr)->AdaptToBool(); ;
    break;}
case 123:
#line 467 "parsercpy.y"
{	EM(S_LOGICAL); yyval.expr = Translate_ExprORExpr(yyvsp[-4].expr, yyvsp[-1].quadNo, yyvsp[0].expr); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-4].expr, OR, yyvsp[0].expr);	;
    break;}
case 124:
#line 472 "parsercpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_ADD, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 125:
#line 474 "parsercpy.y"
{	EM(S_ARITH); yyval.expr = Translate_ArithmeticExpression(yyvsp[-3].expr, DeltaIC_ADD, yyvsp[0].expr->AdaptIfBool(), "+"); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, ADD, yyvsp[0].expr);	;
    break;}
case 126:
#line 478 "parsercpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_SUB, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 127:
#line 480 "parsercpy.y"
{	EM(S_ARITH); yyval.expr = Translate_ArithmeticExpression(yyvsp[-3].expr, DeltaIC_SUB, yyvsp[0].expr->AdaptIfBool(), "-"); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, SUB, yyvsp[0].expr);	;
    break;}
case 128:
#line 484 "parsercpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_DIV, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 129:
#line 486 "parsercpy.y"
{	EM(S_ARITH); yyval.expr = Translate_ArithmeticExpression(yyvsp[-3].expr, DeltaIC_DIV, yyvsp[0].expr->AdaptIfBool(), "/"); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, DIV, yyvsp[0].expr);	;
    break;}
case 130:
#line 490 "parsercpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_MUL, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 131:
#line 492 "parsercpy.y"
{	EM(S_ARITH); yyval.expr = Translate_ArithmeticExpression(yyvsp[-3].expr, DeltaIC_MUL, yyvsp[0].expr->AdaptIfBool(), "*"); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, MUL, yyvsp[0].expr);	;
    break;}
case 132:
#line 496 "parsercpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_MOD, S_EXPR); yyvsp[-1].expr->SelfAdaptIfBool(); ;
    break;}
case 133:
#line 498 "parsercpy.y"
{	EM(S_ARITH); yyval.expr = Translate_ArithmeticExpression(yyvsp[-3].expr, DeltaIC_MOD, yyvsp[0].expr->AdaptIfBool(), "%"); 
									Unparse_BinaryOp(yyval.expr, yyvsp[-3].expr, MOD, yyvsp[0].expr);	;
    break;}
case 134:
#line 503 "parsercpy.y"
{	EM(S_TERNARY); yyval.expr = Translate_Ternary(yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-1].expr, yyvsp[-6].quadNo, yyvsp[-2].quadNo, yyvsp[-3].quadNo); 
							Unparse_TernaryOp(yyval.expr, yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-1].expr);	;
    break;}
case 135:
#line 508 "parsercpy.y"
{	SM(S_TERNARY); PE3(S_EXPR, T_QMARK, S_EXPR); 
							yyval.expr = Translate_Condition(yyvsp[-1].expr); ;
    break;}
case 136:
#line 513 "parsercpy.y"
{ PE(T_COLON); yyval.expr = DNPTR(yyvsp[0].expr)->AdaptIfBool(); ;
    break;}
case 137:
#line 516 "parsercpy.y"
{ PE(S_EXPR); ;
    break;}
case 138:
#line 518 "parsercpy.y"
{ PE(T_RPAR); yyval.expr = DNPTR(yyvsp[0].expr)->AdaptIfBool(); ;
    break;}
case 139:
#line 522 "parsercpy.y"
{	yyval.expr = Translate_TermLvalue(yyvsp[-1].expr, true, DeltaIC_ADD); 
					Unparse_UnaryIncDec(yyval.expr, PLUSPLUS, yyvsp[-1].expr, true);	;
    break;}
case 140:
#line 526 "parsercpy.y"
{ SM(S_EXPR); PE2(T_PLUSPLUS, S_LVAL); ;
    break;}
case 141:
#line 528 "parsercpy.y"
{	EM(S_EXPR); 
					yyval.expr = Translate_TermLvalue(yyvsp[0].expr, false, DeltaIC_ADD); 
					Unparse_UnaryIncDec(yyval.expr, PLUSPLUS, yyvsp[0].expr, false);	;
    break;}
case 142:
#line 533 "parsercpy.y"
{	yyval.expr = Translate_TermLvalue(yyvsp[-1].expr, true, DeltaIC_SUB); 
					Unparse_UnaryIncDec(yyval.expr, MINUSMINUS, yyvsp[-1].expr, true);	;
    break;}
case 143:
#line 537 "parsercpy.y"
{ SM(S_EXPR); PE2(T_MINUSMINUS, S_LVAL); ;
    break;}
case 144:
#line 539 "parsercpy.y"
{	EM(S_EXPR); 
					yyval.expr = Translate_TermLvalue(yyvsp[0].expr, false, DeltaIC_SUB); 
					Unparse_UnaryIncDec(yyval.expr, MINUSMINUS, yyvsp[0].expr, false); ;
    break;}
case 145:
#line 544 "parsercpy.y"
{ SM(S_EXPR); PE2(T_SUB, S_EXPR); ;
    break;}
case 146:
#line 546 "parsercpy.y"
{ EM(S_EXPR); yyval.expr = Translate_UMINUSExpression(yyvsp[0].expr); Unparse_UnaryOp(yyval.expr, SUB, yyvsp[0].expr); ;
    break;}
case 147:
#line 549 "parsercpy.y"
{ SM(S_EXPR); PE2(T_NOT, S_EXPR); ;
    break;}
case 148:
#line 551 "parsercpy.y"
{ EM(S_EXPR); yyval.expr = Translate_NOTExpression(yyvsp[0].expr); Unparse_UnaryOp(yyval.expr, NOT, yyvsp[0].expr); ;
    break;}
case 149:
#line 554 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 150:
#line 557 "parsercpy.y"
{ yyval.expr = DNPTR(yyvsp[0].expr)->AdaptIfTableContent(); ;
    break;}
case 151:
#line 558 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; Unparse_ConstValue(yyval.expr); ;
    break;}
case 152:
#line 559 "parsercpy.y"
{ yyval.expr = Translate_FunctionExpresssion(yyvsp[0].sym); ;
    break;}
case 153:
#line 562 "parsercpy.y"
{ yyval.expr = Translate_ConstValue(yyvsp[0].numberConst);	;
    break;}
case 154:
#line 563 "parsercpy.y"
{ yyval.expr = Translate_ConstValue();		;
    break;}
case 155:
#line 564 "parsercpy.y"
{ yyval.expr = Translate_ConstValue(true);	;
    break;}
case 156:
#line 565 "parsercpy.y"
{ yyval.expr = Translate_ConstValue(false);;
    break;}
case 157:
#line 568 "parsercpy.y"
{ yyval.id = "+";		;
    break;}
case 158:
#line 569 "parsercpy.y"
{ yyval.id = "-";		;
    break;}
case 159:
#line 570 "parsercpy.y"
{ yyval.id = "*";		;
    break;}
case 160:
#line 571 "parsercpy.y"
{ yyval.id = "/";		;
    break;}
case 161:
#line 572 "parsercpy.y"
{ yyval.id = "%";		;
    break;}
case 162:
#line 573 "parsercpy.y"
{ yyval.id = ">";		;
    break;}
case 163:
#line 574 "parsercpy.y"
{ yyval.id = "<";		;
    break;}
case 164:
#line 575 "parsercpy.y"
{ yyval.id = "!=";	;
    break;}
case 165:
#line 576 "parsercpy.y"
{ yyval.id = "==";	;
    break;}
case 166:
#line 577 "parsercpy.y"
{ yyval.id = ">=";	;
    break;}
case 167:
#line 578 "parsercpy.y"
{ yyval.id = "<=";	;
    break;}
case 168:
#line 579 "parsercpy.y"
{ yyval.id = "=";		;
    break;}
case 169:
#line 580 "parsercpy.y"
{ yyval.id = "+_";	;
    break;}
case 170:
#line 581 "parsercpy.y"
{ yyval.id = "-_";	;
    break;}
case 171:
#line 582 "parsercpy.y"
{ yyval.id = "*_";	;
    break;}
case 172:
#line 583 "parsercpy.y"
{ yyval.id = "/_";	;
    break;}
case 173:
#line 584 "parsercpy.y"
{ yyval.id = "%_";	;
    break;}
case 174:
#line 585 "parsercpy.y"
{ yyval.id = ">_";	;
    break;}
case 175:
#line 586 "parsercpy.y"
{ yyval.id = "<_";	;
    break;}
case 176:
#line 587 "parsercpy.y"
{ yyval.id = "!=_";	;
    break;}
case 177:
#line 588 "parsercpy.y"
{ yyval.id = "==_";	;
    break;}
case 178:
#line 589 "parsercpy.y"
{ yyval.id = ">=_";	;
    break;}
case 179:
#line 590 "parsercpy.y"
{ yyval.id = "<=_";	;
    break;}
case 180:
#line 591 "parsercpy.y"
{ yyval.id = "()";	;
    break;}
case 181:
#line 592 "parsercpy.y"
{ yyval.id = "=()";	;
    break;}
case 182:
#line 595 "parsercpy.y"
{ yyval.id = "if"; ;
    break;}
case 183:
#line 596 "parsercpy.y"
{ yyval.id = "else"; ;
    break;}
case 184:
#line 597 "parsercpy.y"
{ yyval.id = "function"; ;
    break;}
case 185:
#line 598 "parsercpy.y"
{ yyval.id = "return"; ;
    break;}
case 186:
#line 599 "parsercpy.y"
{ yyval.id = "onevent"; ;
    break;}
case 187:
#line 600 "parsercpy.y"
{ yyval.id = "while"; ;
    break;}
case 188:
#line 601 "parsercpy.y"
{ yyval.id = "for"; ;
    break;}
case 189:
#line 602 "parsercpy.y"
{ yyval.id = "foreach"; ;
    break;}
case 190:
#line 603 "parsercpy.y"
{ yyval.id = "nil"; ;
    break;}
case 191:
#line 604 "parsercpy.y"
{ yyval.id = "local"; ;
    break;}
case 192:
#line 605 "parsercpy.y"
{ yyval.id = "and"; ;
    break;}
case 193:
#line 606 "parsercpy.y"
{ yyval.id = "not"; ;
    break;}
case 194:
#line 607 "parsercpy.y"
{ yyval.id = "or"; ;
    break;}
case 195:
#line 608 "parsercpy.y"
{ yyval.id = "lambda"; ;
    break;}
case 196:
#line 609 "parsercpy.y"
{ yyval.id = "try"; ;
    break;}
case 197:
#line 610 "parsercpy.y"
{ yyval.id = "trap"; ;
    break;}
case 198:
#line 611 "parsercpy.y"
{ yyval.id = "throw"; ;
    break;}
case 199:
#line 612 "parsercpy.y"
{ yyval.id = "using"; ;
    break;}
case 200:
#line 613 "parsercpy.y"
{ yyval.id = "assert"; ;
    break;}
case 201:
#line 614 "parsercpy.y"
{ yyval.id = "true"; ;
    break;}
case 202:
#line 615 "parsercpy.y"
{ yyval.id = "false"; ;
    break;}
case 203:
#line 616 "parsercpy.y"
{ yyval.id = "break"; ;
    break;}
case 204:
#line 617 "parsercpy.y"
{ yyval.id = "continue"; ;
    break;}
case 205:
#line 618 "parsercpy.y"
{ yyval.id = "static"; ;
    break;}
case 206:
#line 619 "parsercpy.y"
{ yyval.id = "const"; ;
    break;}
case 207:
#line 620 "parsercpy.y"
{ yyval.id = "method"; ;
    break;}
case 208:
#line 621 "parsercpy.y"
{ yyval.id = "self"; ;
    break;}
case 209:
#line 622 "parsercpy.y"
{ yyval.id = "arguments"; ;
    break;}
case 210:
#line 626 "parsercpy.y"
{ yyval.expr = Translate_StringConst(yyvsp[0].strConst, yyvsp[-1].expr); ;
    break;}
case 211:
#line 628 "parsercpy.y"
{ yyval.expr = Translate_StringConst(yyvsp[0].strConst); ;
    break;}
case 212:
#line 632 "parsercpy.y"
{ EI(S_EXPR); PE(T_STRINGIFY); ;
    break;}
case 213:
#line 635 "parsercpy.y"
{ yyval.id = yyvsp[0].id; ;
    break;}
case 214:
#line 636 "parsercpy.y"
{ yyval.id = yyvsp[0].id; ;
    break;}
case 215:
#line 640 "parsercpy.y"
{ PE(T_IDENT); yyval.expr = Translate_StringifyDottedIdents(yyvsp[0].id); ;
    break;}
case 216:
#line 642 "parsercpy.y"
{ PE2(T_DOT, T_IDENT); ;
    break;}
case 217:
#line 644 "parsercpy.y"
{ yyval.expr = Translate_StringifyDottedIdents(yyvsp[0].id, yyvsp[-3].expr); ;
    break;}
case 218:
#line 648 "parsercpy.y"
{ EG(S_NAMESPACE); PE(T_IDENT); yyval.expr = Translate_StringifyNamespaceIdent(yyvsp[0].id); ;
    break;}
case 219:
#line 652 "parsercpy.y"
{  PE(T_STRINGCONST); Unparse_ConstValue(yyval.expr = yyvsp[0].expr); ;
    break;}
case 220:
#line 654 "parsercpy.y"
{ Unparse_Stringify(yyval.expr = yyvsp[0].expr); ;
    break;}
case 221:
#line 656 "parsercpy.y"
{ Unparse_Stringify(yyval.expr = yyvsp[0].expr); ;
    break;}
case 222:
#line 664 "parsercpy.y"
{ EI(S_EXPR); PE(T_SELF); Unparse_BuiltIn(yyval.expr = Translate_SELF(), SELF); ;
    break;}
case 223:
#line 666 "parsercpy.y"
{ EI(S_EXPR); PE(T_LAMBDA_REF); Unparse_BuiltIn(yyval.expr = Translate_LAMBDA_REF(), LAMBDA_REF); ;
    break;}
case 224:
#line 668 "parsercpy.y"
{ EI(S_EXPR); PE(T_NEWSELF); Unparse_BuiltIn(yyval.expr = Translate_NEWSELF(), NEWSELF); ;
    break;}
case 225:
#line 670 "parsercpy.y"
{ EI(S_EXPR); yyval.expr = yyvsp[0].expr; ;
    break;}
case 226:
#line 672 "parsercpy.y"
{ EI(S_EXPR); PE(T_ARGUMENTS); yyval.expr = Translate_ARGUMENTS(); Unparse_BuiltIn(yyval.expr, ARGUMENTS); ;
    break;}
case 227:
#line 674 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 228:
#line 676 "parsercpy.y"
{ PE(S_TABLE); yyval.expr = yyvsp[0].expr; ;
    break;}
case 229:
#line 679 "parsercpy.y"
{ PE3(T_LPAR, S_EXPR, T_RPAR); ;
    break;}
case 230:
#line 681 "parsercpy.y"
{ yyval.expr = DNPTR(yyvsp[-2].expr)->CheckUninitialised(); Unparse_ParenthesisedExpr(yyval.expr); ;
    break;}
case 231:
#line 684 "parsercpy.y"
{ PE(S_CALL); yyval.expr = yyvsp[0].expr; ;
    break;}
case 232:
#line 687 "parsercpy.y"
{ SM(S_EXPR); PE3(T_LPAR, S_FUNC_(yyvsp[0].sym), T_RPAR); ;
    break;}
case 233:
#line 689 "parsercpy.y"
{	EM(S_EXPR); yyval.expr = Translate_FunctionParenthesisForm(yyvsp[-2].sym); 
					Unparse_FunctionParenthesisForm(yyval.expr, yyvsp[-2].sym);	;
    break;}
case 234:
#line 696 "parsercpy.y"
{ unullify(yyval.expr); ;
    break;}
case 235:
#line 698 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 236:
#line 703 "parsercpy.y"
{ PE(T_COMMA); ;
    break;}
case 237:
#line 705 "parsercpy.y"
{ yyval.expr = Translate_ExpressionList(yyvsp[-3].expr, Translate_ExpressionListItem(yyvsp[0].expr)); ;
    break;}
case 238:
#line 707 "parsercpy.y"
{ yyval.expr = Translate_ExpressionList(NIL_EXPR, Translate_ExpressionListItem(yyvsp[0].expr)); ;
    break;}
case 239:
#line 711 "parsercpy.y"
{ SM(S_CALL); PE2(S_EXPR, T_LPAR); SG(S_AARGS); ;
    break;}
case 240:
#line 713 "parsercpy.y"
{ PE(T_RPAR); ;
    break;}
case 241:
#line 715 "parsercpy.y"
{ EG(S_AARGS); EM(S_CALL); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 242:
#line 717 "parsercpy.y"
{ PE2(T_LPAR, T_RPAR); unullify(yyval.expr); ;
    break;}
case 243:
#line 720 "parsercpy.y"
{ PE(S_EXPR); ;
    break;}
case 244:
#line 722 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr->AdaptAsArgumentVariable(); ;
    break;}
case 245:
#line 724 "parsercpy.y"
{ PE2(T_BAR, S_EXPR); ;
    break;}
case 246:
#line 726 "parsercpy.y"
{ PE(T_BAR); ;
    break;}
case 247:
#line 728 "parsercpy.y"
{	yyval.expr = yyvsp[-2].expr->AdaptAsArgumentVariable(); 
								DNPTR(yyval.expr)->SetLateBound(); 
								Unparse_LateBound(yyval.expr, yyvsp[-2].expr);	;
    break;}
case 248:
#line 732 "parsercpy.y"
{ PE(T_TDOT); Unparse_BuiltIn(yyval.expr = Translate_TRIPLE_DOT(), TRIPLE_DOT); ;
    break;}
case 249:
#line 734 "parsercpy.y"
{ yyval.expr = Translate_FunctionExpresssion(yyvsp[0].sym); ;
    break;}
case 250:
#line 740 "parsercpy.y"
{	UNPARSABLE_GET(Unparse_FunctionCall(yyvsp[-1].expr, yyvsp[0].expr));
							yyval.expr = Translate_FunctionCall(yyvsp[-1].expr->CheckUninitialised(), yyvsp[0].expr); 
							UNPARSABLE_SET(yyval.expr);		;
    break;}
case 251:
#line 746 "parsercpy.y"
{	yyval.expr = Translate_ExpressionList(yyvsp[-4].expr, Translate_ExpressionListItem(yyvsp[0].expr)); 
								QUADS.SetQuadLine(yyvsp[-1].quadNo, yyvsp[-2].intVal);	;
    break;}
case 252:
#line 749 "parsercpy.y"
{	yyval.expr = Translate_ExpressionList(NIL_EXPR, Translate_ExpressionListItem(yyvsp[0].expr)); 
								QUADS.SetQuadLine(yyvsp[-1].quadNo, yyvsp[-2].intVal);	;
    break;}
case 253:
#line 758 "parsercpy.y"
{ EI(S_EXPR); SG(S_NAMESPACE); PE2(T_GLOBAL, T_IDENT); 
						  ParseParms::AppendToNamespacePath(DELTA_LIBRARYNAMESPACE_SEPARATOR); ;
    break;}
case 254:
#line 761 "parsercpy.y"
{ EI(S_EXPR); SG(S_NAMESPACE); PE3(T_IDENT, T_GLOBAL, T_IDENT); 
						  ParseParms::AppendToNamespacePath(yyvsp[-1].id); ;
    break;}
case 255:
#line 764 "parsercpy.y"
{ PE2(T_GLOBAL, T_IDENT); 
						  ParseParms::AppendToNamespacePath(yyvsp[-1].id); ;
    break;}
case 256:
#line 769 "parsercpy.y"
{ EI(S_EXPR); PE(T_IDENT); 
						  yyval.expr = Translate_Lvalue(yyvsp[0].id); Unparse_Var(yyval.expr, yyvsp[0].id); ;
    break;}
case 257:
#line 773 "parsercpy.y"
{ EG(S_NAMESPACE); std::string ns;
						  yyval.expr = Translate_NamespaceLvalue(yyvsp[0].id, &ns); Unparse_Var(yyval.expr, ns); ;
    break;}
case 258:
#line 777 "parsercpy.y"
{ yyval.expr = Translate_AttrLvalue(yyvsp[0].strConst); Unparse_Var(yyval.expr, yyvsp[0].strConst, ATTRIBUTE); ;
    break;}
case 259:
#line 780 "parsercpy.y"
{ EI(S_EXPR); PE2(T_STATIC, T_IDENT); ;
    break;}
case 260:
#line 782 "parsercpy.y"
{ yyval.expr = Translate_StaticLvalue(yyvsp[0].id); Unparse_Var(yyval.expr, yyvsp[0].id, STATIC); ;
    break;}
case 261:
#line 785 "parsercpy.y"
{ EI(S_EXPR); PE2(T_LOCAL, T_IDENT); ;
    break;}
case 262:
#line 787 "parsercpy.y"
{ yyval.expr = Translate_Lvalue(yyvsp[0].id, 0); Unparse_Var(yyval.expr, yyvsp[0].id, LOCAL); ;
    break;}
case 263:
#line 790 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 264:
#line 794 "parsercpy.y"
{ yyval.expr = DNPTR(yyvsp[0].expr)->AdaptIfTableContent(); ;
    break;}
case 265:
#line 798 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 266:
#line 802 "parsercpy.y"
{ PE(T_DOT); SG(S_DOTINDEX); yyval.expr = yyvsp[-1].expr; ;
    break;}
case 267:
#line 806 "parsercpy.y"
{ PE2(T_LB, S_EXPR); yyval.expr = yyvsp[-1].expr; ;
    break;}
case 268:
#line 810 "parsercpy.y"
{ PE(T_DDOT); SG(S_DOTINDEX); yyval.expr = yyvsp[-1].expr; ;
    break;}
case 269:
#line 814 "parsercpy.y"
{ PE2(T_DLB, S_EXPR); yyval.expr = yyvsp[-1].expr; ;
    break;}
case 270:
#line 817 "parsercpy.y"
{ yyval.id = ".=";	;
    break;}
case 271:
#line 818 "parsercpy.y"
{ yyval.id = ".==";	;
    break;}
case 272:
#line 819 "parsercpy.y"
{ yyval.id = ".=()";	;
    break;}
case 273:
#line 820 "parsercpy.y"
{ yyval.id = ".==_";	;
    break;}
case 274:
#line 824 "parsercpy.y"
{ yyval.expr = Translate_StringConst(Translate_StringWithLateDestruction(ucopystr(yyvsp[0].id))); ;
    break;}
case 275:
#line 826 "parsercpy.y"
{ yyval.expr = Translate_StringConst(yyvsp[0].id); ;
    break;}
case 276:
#line 828 "parsercpy.y"
{ yyval.expr = Translate_StringConst(yyvsp[0].id); ;
    break;}
case 277:
#line 830 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 278:
#line 834 "parsercpy.y"
{ yyval.expr = Translate_StringConst(yyvsp[0].id); ;
    break;}
case 279:
#line 840 "parsercpy.y"
{	EG(S_DOTINDEX); PE(S_DOTINDEX); 
							yyval.expr = Translate_TableContent(yyvsp[-1].expr->CheckUninitialised(), yyvsp[0].expr); 
							Unparse_TableContentDot(yyval.expr, yyvsp[-1].expr, yyvsp[0].expr->strConst.c_str()); ;
    break;}
case 280:
#line 845 "parsercpy.y"
{	EG(S_DOTINDEX); PE(S_DOTINDEX); 
							yyval.expr = Translate_TableContent(yyvsp[-1].expr->CheckUninitialised(), yyvsp[0].expr); 
							Unparse_TableContentDot(yyval.expr, yyvsp[-1].expr, yyvsp[0].expr->strConst.c_str()); ;
    break;}
case 281:
#line 850 "parsercpy.y"
{	EG(S_DOTINDEX); PE(S_DOTINDEX);
							yyval.expr = Translate_BoundedTableContent(yyvsp[-1].expr->CheckUninitialised(), yyvsp[0].expr); 
							Unparse_TableContentDoubleDot(yyval.expr, yyvsp[-1].expr, yyvsp[0].expr->strConst.c_str()); ;
    break;}
case 282:
#line 855 "parsercpy.y"
{ PE(T_RB); ;
    break;}
case 283:
#line 857 "parsercpy.y"
{	yyval.expr = Translate_TableContent(yyvsp[-3].expr->CheckUninitialised(), yyvsp[-2].expr->CheckUninitialised()); 
							Unparse_TableContentBracket(yyval.expr, yyvsp[-3].expr, yyvsp[-2].expr);	;
    break;}
case 284:
#line 861 "parsercpy.y"
{ PE(T_RB); ;
    break;}
case 285:
#line 863 "parsercpy.y"
{	yyval.expr = Translate_TableContent(yyvsp[-3].expr->CheckUninitialised(), yyvsp[-2].id); 
							Unparse_TableContentBracket(yyval.expr, yyvsp[-3].expr, yyvsp[-2].id);	;
    break;}
case 286:
#line 867 "parsercpy.y"
{ PE(T_DRB); ;
    break;}
case 287:
#line 869 "parsercpy.y"
{	yyval.expr = Translate_BoundedTableContent(yyvsp[-3].expr->CheckUninitialised(), yyvsp[-2].expr->CheckUninitialised()); 
							Unparse_TableContentDoubleBracket(yyval.expr, yyvsp[-3].expr, yyvsp[-2].expr);	;
    break;}
case 288:
#line 873 "parsercpy.y"
{ PE(T_DRB); ;
    break;}
case 289:
#line 875 "parsercpy.y"
{	yyval.expr = Translate_BoundedTableContent(yyvsp[-3].expr->CheckUninitialised(), yyvsp[-2].id); 
							Unparse_TableContentDoubleBracket(yyval.expr, yyvsp[-3].expr, yyvsp[-2].id);	;
    break;}
case 290:
#line 883 "parsercpy.y"
{	SM(S_TABLE); PE2(T_LB, S_TABLIST); 
							ParseParms::InTableExpr().enter(); yyval.expr = Translate_TablePrefix(); ;
    break;}
case 291:
#line 887 "parsercpy.y"
{ PE(T_RB); ;
    break;}
case 292:
#line 889 "parsercpy.y"
{ EM(S_TABLE); ;
    break;}
case 293:
#line 893 "parsercpy.y"
{	ParseParms::InTableExpr().exit();
								UNPARSABLE_GET(Unparse_TableConstructor(yyvsp[-1].table)); 
								yyval.expr = Translate_TableConstructor(yyvsp[-2].expr, yyvsp[-1].table); 
								UNPARSABLE_SET(yyval.expr); ;
    break;}
case 294:
#line 899 "parsercpy.y"
{	ParseParms::InTableExpr().exit();
								UNPARSABLE_GET(Unparse_TableConstructor()); 
								yyval.expr = Translate_TableConstructor(yyvsp[-1].expr); 
								UNPARSABLE_SET(yyval.expr); ;
    break;}
case 295:
#line 905 "parsercpy.y"
{ PE(T_COMMA); ;
    break;}
case 296:
#line 906 "parsercpy.y"
{	UNPARSABLE_GET(Unparse_TableElements(yyvsp[-3].table, yyvsp[0].table));
								yyval.table = Translate_TableElements(yyvsp[-3].table, yyvsp[0].table); 
								UNPARSABLE_SET(yyval.table); ;
    break;}
case 297:
#line 910 "parsercpy.y"
{ yyval.table = yyvsp[0].table; ;
    break;}
case 298:
#line 914 "parsercpy.y"
{ PE(S_FUNC_(yyvsp[0].sym)); yyval.expr = Translate_FunctionExpresssion(yyvsp[0].sym); ;
    break;}
case 299:
#line 924 "parsercpy.y"
{ yyval.table = Translate_UnindexedValue(yyvsp[-1].expr, yyvsp[-3].quadNo, yyvsp[0].intVal); ;
    break;}
case 300:
#line 926 "parsercpy.y"
{ yyval.table = Translate_UnindexedValue(yyvsp[-1].expr, yyvsp[-3].quadNo, yyvsp[0].intVal); ;
    break;}
case 301:
#line 929 "parsercpy.y"
{ OE(T_TABLE_ELEM); yyval.quadNo = yyvsp[0].quadNo; ;
    break;}
case 302:
#line 933 "parsercpy.y"
{ yyval.table = yyvsp[0].table; ;
    break;}
case 303:
#line 935 "parsercpy.y"
{ Unparse_IndexedValues(yyval.table = yyvsp[0].table); ;
    break;}
case 304:
#line 937 "parsercpy.y"
{ Unparse_UnindexedValue(yyval.table = Translate_TableElement(yyvsp[0].expr), yyvsp[0].expr); ;
    break;}
case 305:
#line 939 "parsercpy.y"
{ yyval.table = yyvsp[0].table; ;
    break;}
case 306:
#line 943 "parsercpy.y"
{ PE2(T_DOT, T_IDENT); ;
    break;}
case 307:
#line 945 "parsercpy.y"
{ Unparse_DottedIdent(yyval.expr = Translate_ConstValue(yyvsp[0].id), yyvsp[0].id); ;
    break;}
case 308:
#line 949 "parsercpy.y"
{	PE(T_OPINDEX); 
							yyval.expr = Translate_ConstValue(yyvsp[0].id); 
							Unparse_OperatorIndex(yyval.expr, yyvsp[0].id);	;
    break;}
case 309:
#line 954 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 310:
#line 955 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 311:
#line 956 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 312:
#line 959 "parsercpy.y"
{ PE(S_INDEXEXPR); ;
    break;}
case 313:
#line 961 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 314:
#line 965 "parsercpy.y"
{ PE(T_COMMA); ;
    break;}
case 315:
#line 967 "parsercpy.y"
{	yyval.expr = Translate_ExpressionList(yyvsp[-5].expr, Translate_ExpressionListItem(yyvsp[-1].expr->AdaptAsArgumentVariable())); 
								QUADS.SetQuadLine(yyvsp[-2].quadNo, yyvsp[0].intVal);	;
    break;}
case 316:
#line 970 "parsercpy.y"
{	yyval.expr = Translate_ExpressionList(NIL_EXPR, Translate_ExpressionListItem(yyvsp[-1].expr->AdaptAsArgumentVariable())); 
								QUADS.SetQuadLine(yyvsp[-2].quadNo, yyvsp[0].intVal);	;
    break;}
case 317:
#line 975 "parsercpy.y"
{ PE(T_LBC); SG(N_EMPTY); ;
    break;}
case 318:
#line 977 "parsercpy.y"
{ EG(N_EMPTY); PE2(S_INDICES, T_COLON); ;
    break;}
case 319:
#line 979 "parsercpy.y"
{ SG(S_ELIST); ;
    break;}
case 320:
#line 981 "parsercpy.y"
{ EG(S_ELIST); PE2(S_ELIST, T_RBC); ;
    break;}
case 321:
#line 983 "parsercpy.y"
{ yyval.table = Translate_IndexedValues(yyvsp[-6].expr, yyvsp[-2].expr); ;
    break;}
case 322:
#line 987 "parsercpy.y"
{ yyval.strConst = yyvsp[0].strConst; ;
    break;}
case 323:
#line 989 "parsercpy.y"
{ PE(T_DOT); OE(T_IDENT_OR_KWDIDENT); ;
    break;}
case 324:
#line 991 "parsercpy.y"
{ yyval.strConst = Translate_StringWithLateDestruction(ucopystr(yyvsp[0].id)); ;
    break;}
case 325:
#line 995 "parsercpy.y"
{ PE(T_COLON); SG(S_EXPR); ;
    break;}
case 326:
#line 997 "parsercpy.y"
{ EG(S_EXPR); PE(S_EXPR); yyval.table = Translate_IdentIndexElement(yyvsp[-5].strConst, yyvsp[-1].expr, yyvsp[-2].quadNo, yyvsp[0].intVal); ;
    break;}
case 327:
#line 1001 "parsercpy.y"
{	yyval.expr = Translate_ExpressionList(yyvsp[-4].expr, Translate_ExpressionListItem(yyvsp[0].expr)); 
								QUADS.SetQuadLine(yyvsp[-1].quadNo, yyvsp[-2].intVal);	;
    break;}
case 328:
#line 1004 "parsercpy.y"
{	yyval.expr = Translate_ExpressionList(NIL_EXPR, Translate_ExpressionListItem(yyvsp[0].expr)); 
								QUADS.SetQuadLine(yyvsp[-1].quadNo, yyvsp[-2].intVal);	;
    break;}
case 329:
#line 1008 "parsercpy.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 330:
#line 1009 "parsercpy.y"
{ PE(S_FUNC_(yyvsp[0].sym)); yyval.expr = Translate_FunctionExpresssion(yyvsp[0].sym); ;
    break;}
case 331:
#line 1015 "parsercpy.y"
{ PE(T_IDENT); yyval.id = yyvsp[0].id; ;
    break;}
case 332:
#line 1016 "parsercpy.y"
{ PE(T_KWDIDENT); yyval.id = yyvsp[0].id; ;
    break;}
case 333:
#line 1020 "parsercpy.y"
{	PE(T_ATTRIBUTEID); OE(T_LBC_OR_COLON); 
								yyval.strConst = Translate_StringWithLateDestruction(ucopystr(yyvsp[0].id + 1)); ;
    break;}
case 334:
#line 1023 "parsercpy.y"
{ PE(T_ATTRIBUTE); OE(T_IDENT_OR_KWDIDENT); ;
    break;}
case 335:
#line 1025 "parsercpy.y"
{ yyval.strConst = Translate_StringWithLateDestruction(ucopystr(yyvsp[0].id)); ;
    break;}
case 336:
#line 1029 "parsercpy.y"
{ yyval.expr = Translate_NewAttribute(yyvsp[-2].strConst, yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 337:
#line 1033 "parsercpy.y"
{ PE2(T_LBC, T_SET);  ;
    break;}
case 338:
#line 1035 "parsercpy.y"
{ SG(S_EXPR); ;
    break;}
case 339:
#line 1037 "parsercpy.y"
{	EG(S_EXPR); 
						PE2(S_EXPR, T_GET); 
						yyval.expr = Translate_AttributeMethod(yyvsp[-1].expr, yyvsp[-2].quadNo, yyvsp[0].intVal); ;
    break;}
case 340:
#line 1043 "parsercpy.y"
{ SG(S_EXPR); ;
    break;}
case 341:
#line 1045 "parsercpy.y"
{ EG(S_EXPR); PE2(S_EXPR, T_RBC); ;
    break;}
case 342:
#line 1047 "parsercpy.y"
{	 
						yyval.expr = Translate_AttributeMethod(yyvsp[-3].expr, yyvsp[-4].quadNo, yyvsp[-2].intVal); ;
    break;}
case 343:
#line 1054 "parsercpy.y"
{ SM(S_STMT); PE(T_BREAK);	;
    break;}
case 345:
#line 1055 "parsercpy.y"
{ SM(S_STMT); PE(T_CONT);	;
    break;}
case 347:
#line 1057 "parsercpy.y"
{ SG(S_EXPR); ;
    break;}
case 348:
#line 1058 "parsercpy.y"
{ EG(S_EXPR); PE2(S_EXPR, T_RPAR); ;
    break;}
case 349:
#line 1059 "parsercpy.y"
{  yyval.expr = Translate_Condition(yyvsp[-2].expr); Translate_BasicStmt(yyvsp[-3].intVal);	;
    break;}
case 350:
#line 1062 "parsercpy.y"
{ yyval.quadNo = Translate_N(); ;
    break;}
case 351:
#line 1068 "parsercpy.y"
{ SM(S_WHILE); PE2(T_WHILE, T_LPAR); Translate_WhilePrefix(); ;
    break;}
case 352:
#line 1072 "parsercpy.y"
{	EM(S_WHILE); 
						UNPARSABLE_GET(Unparse_While(yyvsp[-3].expr, yyvsp[0].stmt));
						yyval.stmt = Translate_WhileStmt(yyvsp[-3].expr, yyvsp[-4].quadNo, yyvsp[-1].quadNo, yyvsp[0].stmt, yyvsp[-2].intVal); 
						UNPARSABLE_SET(yyval.stmt); ;
    break;}
case 353:
#line 1080 "parsercpy.y"
{ SM(S_IF); PE2(T_IF, T_LPAR);  ;
    break;}
case 354:
#line 1081 "parsercpy.y"
{ EM(S_IF); SM(S_ELSE); PE(T_ELSE); Translate_ElseStmtPrefix(); ;
    break;}
case 355:
#line 1082 "parsercpy.y"
{ Translate_IfStmtPrefix(); yyval.quadNo = yyvsp[0].quadNo; ;
    break;}
case 356:
#line 1085 "parsercpy.y"
{	EM(S_IF);
							Translate_IfStmt(yyvsp[-2].expr, yyvsp[-1].quadNo);
							Unparse_If(yyval.stmt = yyvsp[0].stmt, yyvsp[-2].expr, yyvsp[0].stmt); ;
    break;}
case 357:
#line 1089 "parsercpy.y"
{	EM(S_ELSE);
							Translate_IfElseStmt(yyvsp[-6].expr, yyvsp[-5].quadNo, yyvsp[-2].quadNo, yyvsp[-1].quadNo);
							UNPARSABLE_GET(Unparse_IfElse(yyvsp[-6].expr, yyvsp[-4].stmt, yyvsp[0].stmt));
							DELTASYMBOLS.ResetTemp();
							yyval.stmt = Translate_Stmts(yyvsp[-4].stmt, yyvsp[0].stmt); 
							UNPARSABLE_SET(yyval.stmt);	;
    break;}
case 358:
#line 1100 "parsercpy.y"
{	EM(S_FOR); 
						UNPARSABLE_GET(Unparse_For(yyvsp[-7].stmt, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt));
						yyval.stmt = Translate_ForStmt(yyvsp[-5].expr, yyvsp[-6].quadNo, yyvsp[-4].quadNo, yyvsp[-1].quadNo, yyvsp[-2].quadNo, yyvsp[0].stmt); 
						UNPARSABLE_SET(yyval.stmt); ;
    break;}
case 359:
#line 1107 "parsercpy.y"
{ SM(S_FOR); PE2(T_FOR, T_LPAR); ;
    break;}
case 360:
#line 1109 "parsercpy.y"
{ PE(S_ELIST); Translate_ForOpening(); ;
    break;}
case 361:
#line 1113 "parsercpy.y"
{ Translate_ForPrefix(yyvsp[-2].quadNo, yyvsp[-1].intVal);  yyval.stmt = yyvsp[0].stmt; Translate_BasicStmt(yyvsp[-1].intVal); ;
    break;}
case 362:
#line 1117 "parsercpy.y"
{ yyval.stmt = NEW_STMT; Unparse_ForInitList(yyval.stmt, yyvsp[-1].expr); ;
    break;}
case 363:
#line 1119 "parsercpy.y"
{ EI(S_ELIST); yyval.stmt = NEW_STMT; Unparse_ForInitList(yyval.stmt); ;
    break;}
case 364:
#line 1122 "parsercpy.y"
{ PE(S_EXPR); ;
    break;}
case 365:
#line 1124 "parsercpy.y"
{	yyval.expr = Translate_Condition(yyvsp[-2].expr); 
						QUADS.SetQuadLine(yyvsp[-3].quadNo, yyvsp[-1].intVal, true); 
						Translate_BasicStmt(yyvsp[-1].intVal); ;
    break;}
case 366:
#line 1129 "parsercpy.y"
{ PE(S_ELIST); ;
    break;}
case 367:
#line 1131 "parsercpy.y"
{	yyval.stmt = NEW_STMT; 
							UNPARSABLE_GET(Unparse_ExprList(yyvsp[-1].expr));
							UNPARSABLE_SET(yyval.stmt); 
							Translate_BasicStmt(yyvsp[0].intVal); ;
    break;}
case 368:
#line 1136 "parsercpy.y"
{ yyval.stmt = NEW_STMT; ;
    break;}
case 369:
#line 1139 "parsercpy.y"
{ PE(T_RPAR); ;
    break;}
case 370:
#line 1140 "parsercpy.y"
{ yyval.intVal = yyvsp[-1].intVal; ;
    break;}
case 371:
#line 1144 "parsercpy.y"
{  QUADS.SetQuadLine(yyvsp[-1].quadNo, yyvsp[-2].intVal, true);  yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 372:
#line 1149 "parsercpy.y"
{	PE(S_LVAL);		;
    break;}
case 373:
#line 1150 "parsercpy.y"
{	PE(T_COMMA);	;
    break;}
case 374:
#line 1151 "parsercpy.y"
{	yyval.expr = yyvsp[-2].expr;		;
    break;}
case 375:
#line 1152 "parsercpy.y"
{	unullify(yyval.expr);	;
    break;}
case 376:
#line 1155 "parsercpy.y"
{	SM(S_FOREACH); PE2(T_FOREACH, T_LPAR);	;
    break;}
case 377:
#line 1156 "parsercpy.y"
{	PE(S_LVAL);				;
    break;}
case 378:
#line 1157 "parsercpy.y"
{	PE(T_SEMI_OR_COMMA);	;
    break;}
case 379:
#line 1158 "parsercpy.y"
{	PE(S_EXPR);				;
    break;}
case 380:
#line 1159 "parsercpy.y"
{	UNPARSABLE_GET(Unparse_ForeachPrefix(yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-1].expr)); 
											if (yyvsp[-5].expr)
												yyval.stmt = Translate_ForeachPrefix(yyvsp[-5].expr, yyvsp[-7].expr, yyvsp[-1].expr); 
											else
												yyval.stmt = Translate_ForeachPrefix(yyvsp[-7].expr, NIL_EXPR, yyvsp[-1].expr); 
											QUADS.SetQuadLine(yyvsp[-2].quadNo, yyvsp[-3].intVal);
											UNPARSABLE_SET(yyval.stmt);		;
    break;}
case 381:
#line 1168 "parsercpy.y"
{	PE(S_STMT);		;
    break;}
case 382:
#line 1169 "parsercpy.y"
{	UNPARSABLE_GET(Unparse_ForeachStmt(yyvsp[-3].stmt, yyvsp[0].stmt));
											yyval.stmt = Translate_ForeachStmt(yyvsp[-3].stmt, yyvsp[0].stmt, yyvsp[-2].quadNo);
											UNPARSABLE_SET(yyval.stmt);	
											EM(S_FOREACH);	;
    break;}
case 383:
#line 1179 "parsercpy.y"
{ SM(S_THROW); PE2(T_THROW, S_EXPR); ;
    break;}
case 384:
#line 1181 "parsercpy.y"
{	EM(S_THROW); 
						yyval.stmt = Translate_THROW(yyvsp[-1].expr); 
						Unparse_ExprStmt(yyval.stmt, THROW, yyvsp[-1].expr); ;
    break;}
case 385:
#line 1186 "parsercpy.y"
{ SM(S_TRY); PE2(T_TRY, S_STMT); yyval.quadNo = Translate_TRY(); ;
    break;}
case 386:
#line 1187 "parsercpy.y"
{ PE(T_IDENT); yyval.quadNo = Translate_TRAP(); ;
    break;}
case 387:
#line 1188 "parsercpy.y"
{ yyval.expr = Translate_Lvalue(yyvsp[0].id); if (yyval.expr) DPTR(yyval.expr)->SetInitialised(); ;
    break;}
case 388:
#line 1189 "parsercpy.y"
{ yyval.quadNo = Translate_TrapJumpOver(); ;
    break;}
case 389:
#line 1192 "parsercpy.y"
{ PE(T_TRAP); ;
    break;}
case 390:
#line 1194 "parsercpy.y"
{ Translate_TrapStart(yyvsp[-5].quadNo, yyvsp[-2].quadNo, yyvsp[0].expr); ;
    break;}
case 391:
#line 1196 "parsercpy.y"
{	EM(S_TRY); Translate_TrapEnd(yyvsp[-3].quadNo); ; 
						UNPARSABLE_GET(Unparse_TryTrap(yyvsp[-6].stmt, yyvsp[0].stmt, yyvsp[-2].expr));
						DELTASYMBOLS.ResetTemp();
						yyval.stmt = Translate_Stmts(yyvsp[-6].stmt, yyvsp[0].stmt); 
						UNPARSABLE_SET(yyval.stmt);		;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1205 "parsercpy.y"
