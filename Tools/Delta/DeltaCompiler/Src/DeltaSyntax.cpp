
/*  A Bison parser, made from syntaxcpy.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENT	258
#define	ATTRIBUTE_IDENT	259
#define	NUMBER_CONST	260
#define	STRING_CONST	261
#define	FUNCTION	262
#define	RETURN	263
#define	ONEVENT	264
#define	IF	265
#define	ELSE	266
#define	WHILE	267
#define	FOR	268
#define	FOREACH	269
#define	NIL	270
#define	LOCAL	271
#define	USING	272
#define	AND	273
#define	NOT	274
#define	OR	275
#define	PLUSPLUS	276
#define	MINUSMINUS	277
#define	LAMBDA	278
#define	TRY	279
#define	TRAP	280
#define	THROW	281
#define	ASSERT	282
#define	TRUE	283
#define	FALSE	284
#define	BREAK	285
#define	CONTINUE	286
#define	STATIC	287
#define	CONST	288
#define	METHOD	289
#define	SELF	290
#define	ARGUMENTS	291
#define	LAMBDA_REF	292
#define	OPERATOR	293
#define	NEWSELF	294
#define	SET	295
#define	GET	296
#define	LT	297
#define	GT	298
#define	LE	299
#define	GE	300
#define	EQ	301
#define	NE	302
#define	DOT	303
#define	DOUBLE_DOT	304
#define	TRIPLE_DOT	305
#define	DOT_ASSIGN	306
#define	DOT_EQUAL	307
#define	DOT_CAST	308
#define	DOT_EQUAL_RHS	309
#define	UMINUS	310
#define	ADD	311
#define	SUB	312
#define	MUL	313
#define	DIV	314
#define	MOD	315
#define	ATTRIBUTE	316
#define	STRINGIFY	317
#define	GLOBAL_SCOPE	318
#define	ASSIGN	319
#define	ADD_A	320
#define	SUB_A	321
#define	MUL_A	322
#define	DIV_A	323
#define	MOD_A	324
#define	DOUBLE_LB	325
#define	DOUBLE_RB	326
#define	CALL	327
#define	CAST	328
#define	SEMI	329
#define	ADD_POSTFIX	330
#define	SUB_POSTFIX	331
#define	MUL_POSTFIX	332
#define	DIV_POSTFIX	333
#define	MOD_POSTFIX	334
#define	GT_POSTFIX	335
#define	LT_POSTFIX	336
#define	NE_POSTFIX	337
#define	EQ_POSTFIX	338
#define	GE_POSTFIX	339
#define	LE_POSTFIX	340
#define	PARENTHESIS	341
#define	SQUARE_BRACKETS	342

#line 1 "syntaxcpy.y"

// Delta syntax directed parsing for AST generation.
// Extended December 2009, added lambda functions.
// ScriptFigher Project.
// A. Savidis, September 2009.
//

#include <string.h>
#include <stdio.h>
#include <assert.h>

#include "DDebug.h"
#include "DeltaStdDefs.h"
#include "ASTNode.h"
#include "ASTTags.h"
#include "ASTCreationActions.h"
#include "CompilerAPI.h"
#include "DescriptiveParseErrorHandler.h"
#include "LibraryNamespace.h"

using namespace AST;

#ifndef	alloca
#define alloca malloc
#endif

#ifdef	YYPURE
#define	YYLEX_PARAM		&yylval
#else
#define	YYPURE
#endif

#define	yyparse		DeltaSyntax_yyparse
#define yylex		DeltaSyntax_yylex
#define	yydebug		DeltaSyntax_yydebug
#define	yyerror		DeltaSyntax_yyerror

extern int			DeltaSyntax_yylex (void* yylval);

static void DeltaSyntax_yyerror (const char* unused) 
	{ DescriptiveParseErrorHandler::HandleSyntaxError(); }

#define	DYNAMIC_STRING(s) \
	MakeNode_StringWithLateDestruction(ucopystr(s))

#define	MAKE_FUNCTION_EXPR(_p, _pp)				\
	if (true) {									\
		PE(S_FUNC_(GetFuncClass(_p)));			\
		_pp = MakeNode_FunctionExpression(_p);	\
	} else

#line 53 "syntaxcpy.y"
typedef union {
	double				numberConst;
	util_ui32			line;
	char*				dynamicStr;
	const char*			constStr;
	AST::IdList*		idList;
	AST::NodeList*		nodeList;
	AST::Node*			node;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		542
#define	YYFLAG		-32768
#define	YYNTBASE	98

#define YYTRANSLATE(x) ((unsigned)(x) <= 342 ? yytranslate[x] : 307)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    72,
    73,     2,     2,    80,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    79,     2,     2,
     2,     2,    78,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    74,     2,    75,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    76,    97,    77,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     8,    10,    11,    14,    16,    19,
    21,    22,    23,    24,    32,    34,    35,    37,    39,    41,
    43,    46,    50,    53,    55,    57,    59,    61,    62,    67,
    69,    70,    72,    73,    77,    79,    80,    85,    86,    88,
    89,    94,    97,    98,   103,   105,   106,   111,   114,   115,
   118,   119,   123,   126,   129,   131,   133,   135,   137,   139,
   141,   143,   145,   147,   149,   151,   153,   155,   157,   158,
   162,   163,   167,   169,   172,   174,   175,   179,   182,   185,
   187,   189,   193,   196,   201,   203,   205,   207,   209,   211,
   213,   215,   217,   218,   219,   220,   228,   229,   234,   235,
   240,   241,   246,   247,   252,   253,   258,   259,   264,   265,
   270,   271,   276,   277,   282,   283,   288,   289,   294,   295,
   300,   301,   306,   307,   312,   313,   318,   319,   324,   325,
   330,   331,   336,   337,   342,   349,   352,   354,   355,   358,
   361,   362,   366,   369,   370,   374,   375,   379,   380,   384,
   386,   388,   390,   392,   394,   396,   398,   400,   402,   404,
   406,   408,   410,   412,   414,   416,   418,   420,   422,   424,
   426,   428,   430,   432,   434,   436,   438,   440,   442,   444,
   446,   448,   450,   452,   454,   456,   458,   460,   462,   464,
   466,   468,   470,   472,   474,   476,   478,   480,   482,   484,
   486,   488,   490,   492,   494,   496,   498,   500,   502,   504,
   506,   509,   511,   513,   515,   517,   520,   521,   526,   530,
   532,   534,   536,   538,   540,   542,   544,   546,   548,   550,
   551,   556,   558,   559,   564,   565,   567,   568,   573,   575,
   576,   577,   583,   585,   586,   589,   590,   591,   597,   599,
   601,   604,   609,   612,   614,   617,   621,   623,   626,   628,
   629,   633,   634,   638,   640,   642,   644,   647,   650,   653,
   656,   658,   660,   662,   664,   666,   668,   670,   672,   674,
   676,   678,   681,   684,   687,   688,   693,   694,   699,   701,
   702,   705,   709,   712,   713,   718,   720,   722,   724,   726,
   727,   731,   734,   737,   740,   741,   745,   747,   749,   751,
   753,   754,   757,   758,   764,   767,   768,   769,   770,   771,
   781,   784,   785,   790,   791,   796,   801,   804,   806,   808,
   810,   812,   814,   815,   819,   823,   824,   825,   832,   833,
   834,   841,   842,   846,   847,   851,   852,   853,   860,   862,
   864,   868,   874,   876,   881,   887,   888,   892,   896,   899,
   900,   905,   906,   911,   914,   915,   918,   921,   922,   923,
   929,   931,   932,   933,   934,   935,   936,   937,   952,   953,
   958,   960,   961,   962,   963
};

static const short yyrhs[] = {    99,
     0,     0,   102,     0,   101,   100,     0,   102,     0,     0,
   101,   142,     0,   142,     0,   102,   131,     0,   131,     0,
     0,     0,     0,   108,   105,   107,   110,   116,   106,   119,
     0,    16,     0,     0,     7,     0,     9,     0,    34,     0,
   103,     0,     3,   109,     0,    38,   111,   109,     0,    61,
   109,     0,   109,     0,   187,     0,    48,     0,    51,     0,
     0,   112,    80,   113,     3,     0,     3,     0,     0,    73,
     0,     0,    50,   115,    73,     0,    81,     0,     0,    72,
   112,   117,   114,     0,     0,    76,     0,     0,   118,   102,
   120,    77,     0,   118,    77,     0,     0,   123,   116,   122,
   124,     0,    23,     0,     0,    76,   125,   126,    77,     0,
   103,   146,     0,     0,   128,    83,     0,     0,   130,   210,
   127,     0,   103,   132,     0,   103,   133,     0,   119,     0,
   104,     0,    83,     0,   129,     0,   136,     0,   140,     0,
   278,     0,   279,     0,   293,     0,   276,     0,   267,     0,
   269,     0,   303,     0,   300,     0,     0,    27,   135,   146,
     0,     0,   137,   134,   127,     0,     8,     0,   146,   127,
     0,   104,     0,     0,   138,   141,   139,     0,   138,   127,
     0,    17,   143,     0,   144,     0,   145,     0,   211,     3,
    83,     0,     3,    83,     0,    62,     3,    83,   103,     0,
   152,     0,   148,     0,   159,     0,   166,     0,   169,     0,
   175,     0,   180,     0,     3,     0,     0,     0,     0,    33,
   149,   147,   150,    64,   151,   146,     0,     0,   212,    64,
   153,   146,     0,     0,   212,    65,   154,   146,     0,     0,
   212,    67,   155,   146,     0,     0,   212,    66,   156,   146,
     0,     0,   212,    68,   157,   146,     0,     0,   212,    69,
   158,   146,     0,     0,   146,    43,   160,   146,     0,     0,
   146,    42,   161,   146,     0,     0,   146,    45,   162,   146,
     0,     0,   146,    44,   163,   146,     0,     0,   146,    46,
   164,   146,     0,     0,   146,    47,   165,   146,     0,     0,
   146,    18,   167,   146,     0,     0,   146,    20,   168,   146,
     0,     0,   146,    56,   170,   146,     0,     0,   146,    57,
   171,   146,     0,     0,   146,    59,   172,   146,     0,     0,
   146,    58,   173,   146,     0,     0,   146,    60,   174,   146,
     0,    72,   176,   177,    79,   178,    73,     0,   146,    78,
     0,   146,     0,     0,   179,   146,     0,   212,    21,     0,
     0,    21,   181,   212,     0,   212,    22,     0,     0,    22,
   182,   212,     0,     0,    57,   183,   146,     0,     0,    19,
   184,   146,     0,   185,     0,   196,     0,   186,     0,   121,
     0,     5,     0,    15,     0,    28,     0,    29,     0,    56,
     0,    57,     0,    58,     0,    59,     0,    60,     0,    43,
     0,    42,     0,    47,     0,    46,     0,    45,     0,    44,
     0,    64,     0,    84,     0,    85,     0,    86,     0,    87,
     0,    88,     0,    89,     0,    90,     0,    91,     0,    92,
     0,    93,     0,    94,     0,    81,     0,    82,     0,    10,
     0,    11,     0,     7,     0,     8,     0,     9,     0,    12,
     0,    13,     0,    14,     0,    15,     0,    16,     0,    18,
     0,    19,     0,    20,     0,    23,     0,    24,     0,    25,
     0,    26,     0,    17,     0,    27,     0,    28,     0,    29,
     0,    30,     0,    31,     0,    32,     0,    33,     0,    34,
     0,    35,     0,    36,     0,   189,     6,     0,     6,     0,
    62,     0,     3,     0,   188,     0,   190,   191,     0,     0,
   192,    48,   193,   191,     0,   190,   211,     3,     0,   189,
     0,   192,     0,   194,     0,    35,     0,    37,     0,    39,
     0,   195,     0,    36,     0,   212,     0,   231,     0,     0,
    72,   146,   197,    73,     0,   209,     0,     0,    72,   104,
   198,    73,     0,     0,   200,     0,     0,   200,    80,   201,
   205,     0,   205,     0,     0,     0,    72,   203,   199,   204,
    73,     0,    81,     0,     0,   206,   146,     0,     0,     0,
    97,   207,   146,   208,    97,     0,    50,     0,   104,     0,
   216,   202,     0,   210,    80,   103,   146,     0,   103,   146,
     0,    63,     0,     3,    63,     0,   211,     3,    63,     0,
     3,     0,   211,     3,     0,   258,     0,     0,    32,   213,
     3,     0,     0,    16,   214,     3,     0,   225,     0,   196,
     0,   196,     0,   215,    48,     0,   215,    49,     0,   215,
    74,     0,   215,    70,     0,    51,     0,    52,     0,    53,
     0,    54,     0,     3,     0,   188,     0,   187,     0,   195,
     0,   221,     0,   146,     0,   111,     0,   217,   222,     0,
   215,   223,     0,   218,   222,     0,     0,   219,   224,   226,
    75,     0,     0,   220,   224,   227,    71,     0,    74,     0,
     0,   230,    75,     0,   228,   232,   229,     0,   228,   229,
     0,     0,   232,    80,   233,   237,     0,   237,     0,   146,
     0,   235,     0,   104,     0,     0,   236,   234,   103,     0,
   236,   246,     0,   236,   260,     0,   236,   253,     0,     0,
    48,   239,   191,     0,   187,     0,   146,     0,   238,     0,
   240,     0,     0,   243,   241,     0,     0,   244,   245,    80,
   242,   103,     0,   242,   103,     0,     0,     0,     0,     0,
    76,   247,   244,   248,    79,   249,   255,   250,    77,     0,
   258,    79,     0,     0,    48,   252,   257,    79,     0,     0,
   251,   254,   256,   103,     0,   210,    80,   103,   256,     0,
   103,   256,     0,   146,     0,   104,     0,     3,     0,   188,
     0,     4,     0,     0,    61,   259,   257,     0,   258,   261,
   264,     0,     0,     0,    76,   262,    40,   263,   256,   103,
     0,     0,     0,    41,   265,   256,   103,   266,    77,     0,
     0,   268,    30,   127,     0,     0,   270,    31,   127,     0,
     0,     0,    72,   272,   103,   146,   273,    73,     0,    10,
     0,    11,     0,   274,   271,   131,     0,   274,   271,   131,
   275,   131,     0,    12,     0,   277,   271,   103,   131,     0,
   280,   282,   283,   285,   131,     0,     0,    13,   281,    72,
     0,   103,   210,   127,     0,   103,   127,     0,     0,   284,
   146,   103,   127,     0,     0,   286,   103,   210,   287,     0,
   103,   287,     0,     0,   288,    73,     0,   103,   146,     0,
     0,     0,    79,   291,   212,   292,    80,     0,    80,     0,
     0,     0,     0,     0,     0,     0,    14,   294,    72,   295,
   212,   296,   290,   297,   289,   298,    73,   299,   103,   131,
     0,     0,    26,   301,   146,   127,     0,     3,     0,     0,
     0,     0,    24,   304,   131,   305,    25,   306,   302,   131,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   121,   124,   125,   126,   129,   130,   133,   134,   137,   138,
   141,   147,   149,   152,   155,   156,   159,   161,   163,   167,
   171,   173,   175,   177,   182,   183,   184,   187,   190,   191,
   193,   197,   199,   202,   205,   207,   210,   211,   215,   218,
   221,   223,   227,   230,   233,   239,   241,   245,   252,   254,
   256,   257,   261,   262,   263,   264,   265,   268,   269,   270,
   273,   274,   275,   276,   277,   278,   279,   280,   285,   288,
   290,   291,   297,   300,   302,   306,   309,   310,   316,   320,
   321,   324,   326,   330,   338,   339,   340,   341,   342,   343,
   344,   347,   351,   352,   353,   354,   357,   360,   362,   365,
   367,   370,   372,   375,   377,   380,   382,   385,   388,   391,
   393,   396,   398,   401,   403,   406,   408,   411,   413,   416,
   419,   422,   424,   427,   430,   433,   435,   438,   440,   443,
   445,   448,   450,   453,   456,   460,   464,   468,   470,   473,
   476,   479,   481,   484,   487,   489,   491,   494,   497,   499,
   503,   504,   505,   508,   509,   510,   511,   514,   515,   516,
   517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
   527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
   537,   538,   540,   541,   542,   543,   544,   545,   546,   547,
   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
   558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
   570,   572,   576,   580,   581,   584,   586,   589,   592,   596,
   598,   600,   607,   609,   611,   613,   615,   617,   619,   621,
   624,   625,   627,   630,   635,   637,   641,   645,   646,   650,
   653,   654,   656,   660,   662,   663,   666,   668,   669,   671,
   677,   681,   683,   691,   694,   697,   701,   704,   707,   710,
   713,   715,   718,   720,   724,   728,   732,   737,   741,   745,
   750,   751,   752,   753,   756,   758,   760,   762,   766,   770,
   772,   778,   781,   786,   790,   792,   795,   797,   804,   808,
   810,   813,   816,   820,   823,   824,   828,   830,   834,   838,
   841,   843,   845,   847,   851,   854,   857,   861,   862,   863,
   866,   868,   871,   873,   875,   879,   882,   884,   886,   888,
   891,   893,   895,   899,   901,   905,   907,   911,   912,   918,
   919,   922,   924,   927,   931,   935,   938,   939,   943,   945,
   948,   954,   955,   959,   960,   964,   965,   966,   971,   972,
   974,   976,   982,   986,   992,   996,   999,  1002,  1004,  1008,
  1009,  1013,  1014,  1016,  1020,  1022,  1026,  1029,  1030,  1031,
  1032,  1035,  1036,  1037,  1038,  1039,  1040,  1041,  1052,  1054,
  1058,  1061,  1062,  1063,  1065
};

static const char * const yytname[] = {   "$","error","$undefined.","IDENT",
"ATTRIBUTE_IDENT","NUMBER_CONST","STRING_CONST","FUNCTION","RETURN","ONEVENT",
"IF","ELSE","WHILE","FOR","FOREACH","NIL","LOCAL","USING","AND","NOT","OR","PLUSPLUS",
"MINUSMINUS","LAMBDA","TRY","TRAP","THROW","ASSERT","TRUE","FALSE","BREAK","CONTINUE",
"STATIC","CONST","METHOD","SELF","ARGUMENTS","LAMBDA_REF","OPERATOR","NEWSELF",
"SET","GET","LT","GT","LE","GE","EQ","NE","DOT","DOUBLE_DOT","TRIPLE_DOT","DOT_ASSIGN",
"DOT_EQUAL","DOT_CAST","DOT_EQUAL_RHS","UMINUS","ADD","SUB","MUL","DIV","MOD",
"ATTRIBUTE","STRINGIFY","GLOBAL_SCOPE","ASSIGN","ADD_A","SUB_A","MUL_A","DIV_A",
"MOD_A","DOUBLE_LB","DOUBLE_RB","'('","')'","'['","']'","'{'","'}'","'?'","':'",
"','","CALL","CAST","SEMI","ADD_POSTFIX","SUB_POSTFIX","MUL_POSTFIX","DIV_POSTFIX",
"MOD_POSTFIX","GT_POSTFIX","LT_POSTFIX","NE_POSTFIX","EQ_POSTFIX","GE_POSTFIX",
"LE_POSTFIX","PARENTHESIS","SQUARE_BRACKETS","'|'","DeltaCode","CodeDefs","OptionalStmts",
"UsingDirectives","Stmts","LN","Function","@1","@2","FuncLinkage","FunctionClass",
"FunctionNameSuffix","FunctionName","OperatorMethod","IdentList","@3","FormalArgsSuffix",
"@4","FormalArgs","@5","CompoundOpening","Compound","@6","LambdaFunction","@7",
"LambdaPrefix","LambdaCode","@8","LambdaStmt","Semi","@9","ExpressionListStmt",
"@10","Stmt","BasicExprStmt","BasicNonExprStmt","Assertion","@11","AssertStmt",
"@12","ReturnPrefix","ReturnValue","ReturnStmt","@13","UsingDirective","UsingSpecifications",
"UsingNamespace","UsingByteCodeLibrary","Expression","ConstId","ConstDefExpression",
"@14","@15","@16","AssignExpression","@17","@18","@19","@20","@21","@22","RelationalExpression",
"@23","@24","@25","@26","@27","@28","BooleanExpression","@29","@30","ArithmeticExpression",
"@31","@32","@33","@34","@35","TernaryExpression","TernaryCondition","TernarySelection1",
"TernarySelection2","@36","Term","@37","@38","@39","@40","Primary","ConstValue",
"OpString","KwdIdent","StringConst","Stringify","StringIdent","StringifyDottedIdents",
"@41","StringifyNamespaceIdent","StringConstUsed","FunctionAndTableObject","@42",
"@43","ActualArgumentsList","NonEmptyActualArgumentsList","@44","ActualArguments",
"@45","@46","ActualArgument","@47","@48","@49","FunctionCall","ExpressionList",
"NamespacePath","Lvalue","@50","@51","TableObject","FunctionCallObject","TableContentDot",
"TableContentBoundedDot","TableContentBracket","TableContentBoundedBracket",
"DottedOpString","DotIndex","SpecialDotIndex","BracketIndex","TableContent",
"@52","@53","TablePrefix","TableSuffix","@54","TableConstructor","TableElements",
"@55","UnindexedValue","FunctionElement","PE_elem","TableElement","DottedIdent",
"@56","OperatorIndex","IndexContent","IndexExpression","@57","IndexedList","@58",
"IndexedValues","@59","@60","@61","@62","IdentIndex","@63","IdentIndexElement",
"@64","ContentList","ContentExpression","AttributeIdent","AttributeId","@65",
"NewAttribute","AttributeSet","@66","@67","AttributeGet","@68","@69","BreakStmt",
"@70","ContinueStmt","@71","Condition","@72","@73","IfPrefix","ElsePrefix","IfStmt",
"WhilePrefix","WhileStmt","ForStmt","ForPrefix","@74","ForInitList","ForCondition",
"@75","ForSuffix","@76","ForEnd","@77","ForeachCont","ForeachValue","@78","@79",
"ForeachStmt","@80","@81","@82","@83","@84","@85","ThrowStmt","@86","ExceptionVar",
"ExceptionStmt","@87","@88","@89",""
};
#endif

static const short yyr1[] = {     0,
    98,    99,    99,    99,   100,   100,   101,   101,   102,   102,
   103,   105,   106,   104,   107,   107,   108,   108,   108,   109,
   110,   110,   110,   110,   111,   111,   111,   113,   112,   112,
   112,   114,   115,   114,   116,   117,   116,   116,   118,   120,
   119,   119,   122,   121,   123,   125,   124,   126,   128,   127,
   130,   129,   131,   131,   131,   131,   131,   132,   132,   132,
   133,   133,   133,   133,   133,   133,   133,   133,   135,   134,
   137,   136,   138,   139,   139,   141,   140,   140,   142,   143,
   143,   144,   144,   145,   146,   146,   146,   146,   146,   146,
   146,   147,   149,   150,   151,   148,   153,   152,   154,   152,
   155,   152,   156,   152,   157,   152,   158,   152,   160,   159,
   161,   159,   162,   159,   163,   159,   164,   159,   165,   159,
   167,   166,   168,   166,   170,   169,   171,   169,   172,   169,
   173,   169,   174,   169,   175,   176,   177,   179,   178,   180,
   181,   180,   180,   182,   180,   183,   180,   184,   180,   180,
   185,   185,   185,   186,   186,   186,   186,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   189,   189,   190,   191,   191,   192,   193,   192,   194,   195,
   195,   195,   196,   196,   196,   196,   196,   196,   196,   197,
   196,   196,   198,   196,   199,   199,   201,   200,   200,   203,
   204,   202,   202,   206,   205,   207,   208,   205,   205,   205,
   209,   210,   210,   211,   211,   211,   212,   212,   212,   213,
   212,   214,   212,   212,   215,   216,   217,   218,   219,   220,
   221,   221,   221,   221,   222,   222,   222,   222,   223,   224,
   224,   225,   225,   225,   226,   225,   227,   225,   228,   230,
   229,   231,   231,   233,   232,   232,   234,   234,   235,   236,
   237,   237,   237,   237,   239,   238,   240,   241,   241,   241,
   243,   242,   245,   244,   244,   247,   248,   249,   250,   246,
   251,   252,   251,   254,   253,   255,   255,   256,   256,   257,
   257,   258,   259,   258,   260,   262,   263,   261,   265,   266,
   264,   268,   267,   270,   269,   272,   273,   271,   274,   275,
   276,   276,   277,   278,   279,   281,   280,   282,   282,   284,
   283,   286,   285,   285,   288,   287,   289,   291,   292,   290,
   290,   294,   295,   296,   297,   298,   299,   293,   301,   300,
   302,   304,   305,   306,   303
};

static const short yyr2[] = {     0,
     1,     0,     1,     2,     1,     0,     2,     1,     2,     1,
     0,     0,     0,     7,     1,     0,     1,     1,     1,     1,
     2,     3,     2,     1,     1,     1,     1,     0,     4,     1,
     0,     1,     0,     3,     1,     0,     4,     0,     1,     0,
     4,     2,     0,     4,     1,     0,     4,     2,     0,     2,
     0,     3,     2,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
     0,     3,     1,     2,     1,     0,     3,     2,     2,     1,
     1,     3,     2,     4,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     0,     0,     7,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     6,     2,     1,     0,     2,     2,
     0,     3,     2,     0,     3,     0,     3,     0,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     1,     1,     1,     1,     2,     0,     4,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     4,     1,     0,     4,     0,     1,     0,     4,     1,     0,
     0,     5,     1,     0,     2,     0,     0,     5,     1,     1,
     2,     4,     2,     1,     2,     3,     1,     2,     1,     0,
     3,     0,     3,     1,     1,     1,     2,     2,     2,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     2,     2,     0,     4,     0,     4,     1,     0,
     2,     3,     2,     0,     4,     1,     1,     1,     1,     0,
     3,     2,     2,     2,     0,     3,     1,     1,     1,     1,
     0,     2,     0,     5,     2,     0,     0,     0,     0,     9,
     2,     0,     4,     0,     4,     4,     2,     1,     1,     1,
     1,     1,     0,     3,     3,     0,     0,     6,     0,     0,
     6,     0,     3,     0,     3,     0,     0,     6,     1,     1,
     3,     5,     1,     4,     5,     0,     3,     3,     2,     0,
     4,     0,     4,     2,     0,     2,     2,     0,     0,     5,
     1,     0,     0,     0,     0,     0,     0,    14,     0,     4,
     1,     0,     0,     0,     8
};

static const short yydefact[] = {    11,
    17,    18,     0,    19,    39,    57,     1,    11,    11,    51,
    56,    12,    11,    55,    10,     8,     0,     0,   254,    79,
    80,    81,     0,     4,    11,     7,     9,    73,   349,   353,
   356,   372,   382,   379,    58,    11,    53,    54,    59,     0,
    76,    60,    65,     0,    66,     0,     0,    64,     0,    61,
    62,    11,    63,    68,    67,    16,    42,    11,   255,    83,
     0,     0,     0,     0,    11,     0,     0,    49,    69,    49,
    78,     0,     0,    49,    49,   346,    11,    11,    11,   360,
    15,    11,     0,    11,   256,    82,   357,   373,   383,   257,
   332,   154,   212,   155,   262,   148,   141,   144,    45,   156,
   157,   260,    93,   223,   227,   224,   225,   146,   333,   213,
     0,   289,   153,    38,    49,    86,    85,    87,    88,    89,
    90,    91,   150,   152,   220,     0,   221,   222,   226,   151,
   232,     0,   228,     0,     0,     0,     0,     0,     0,   264,
   300,   229,   259,   253,    11,    52,     0,    72,    50,    75,
    77,    49,   343,   345,    11,   351,    11,   359,    49,   362,
     0,    11,     0,    11,    20,    24,    38,    41,    84,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
   230,     0,    31,    35,    43,   121,   123,   111,   109,   115,
   113,   117,   119,   125,   127,   131,   129,   133,   380,   211,
   214,   185,   186,   187,   183,   184,   188,   189,   190,   191,
   192,   200,   193,   194,   195,   196,   197,   198,   199,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   215,
   216,     0,   217,   258,   140,   143,    97,    99,   103,   101,
   105,   107,   267,   268,   271,   272,   273,   274,   270,   269,
   279,   283,   240,   243,   251,   275,   164,   163,   168,   167,
   166,   165,   158,   159,   160,   161,   162,   169,   181,   182,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   277,   276,   278,   282,   284,    26,    27,   146,   281,
   280,    25,   285,   287,   293,     0,   290,     0,   296,     0,
    70,    74,     0,   350,    11,   354,   358,   365,    11,    11,
    11,    21,    11,    23,    13,     0,   265,   228,   384,   263,
   149,   142,   145,   261,    92,    94,   147,   330,   331,   334,
     0,   136,     0,   137,     0,    30,    36,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   219,     0,     0,     0,     0,     0,     0,     0,   244,
     0,     0,   291,   294,   292,   322,   316,   299,   297,    11,
   298,   302,   324,   304,   259,   303,   252,   347,   352,   364,
     0,   355,    11,    49,    22,     0,   230,     0,     0,     0,
   234,   231,   138,    28,     0,    46,    44,   122,   124,   112,
   110,   116,   114,   118,   120,   126,   128,   132,   130,   134,
   214,   218,    98,   100,   104,   102,   106,   108,   249,   246,
   250,   241,   236,   239,     0,   286,   288,   300,     0,   311,
   301,     0,   336,   321,     0,     0,   366,   365,   361,    14,
   368,   371,   375,   381,    11,    95,     0,     0,     0,    33,
    32,    37,    11,     0,     0,   237,   245,   295,     0,    11,
     0,   313,   329,   328,    11,     0,   339,   335,   348,   363,
     0,    11,   385,     0,   135,   139,    29,     0,     0,     0,
   247,   242,   244,   323,   315,   305,   308,   307,   309,   310,
   312,     0,     0,   325,   337,     0,   228,     0,   376,    96,
    34,    48,    47,     0,   238,     0,   311,   318,     0,    11,
     0,   367,     0,   248,   306,    11,    11,    11,   340,   370,
   377,   314,     0,     0,   319,   338,     0,    11,   253,   327,
    11,     0,   341,    11,     0,   320,   378,   252,   326,     0,
     0,     0
};

static const short yydefgoto[] = {   540,
     7,    24,     8,     9,    10,    11,    56,   386,    82,    12,
   166,   167,   290,   337,   449,   452,   478,   185,   395,    13,
    14,    83,   113,   338,   114,   397,   453,   480,    71,    72,
    35,    36,    15,    37,    38,    70,   147,    39,    40,    41,
   151,    42,    73,    16,    20,    21,    22,   464,   326,   116,
   177,   390,   474,   117,   354,   355,   357,   356,   358,   359,
   118,   342,   341,   344,   343,   345,   346,   119,   339,   340,
   120,   347,   348,   350,   349,   351,   121,   182,   335,   447,
   448,   122,   174,   175,   178,   173,   123,   124,   292,   230,
   125,   126,   231,   127,   353,   128,   129,   130,   333,   331,
   422,   423,   483,   255,   360,   455,   424,   425,   454,   504,
   131,    68,   132,   133,   176,   172,   134,   135,   136,   137,
   138,   139,   251,   285,   252,   293,   140,   361,   362,   141,
   295,   296,   142,   297,   428,   370,   371,   298,   299,   489,
   506,   490,   491,   460,   461,   462,   492,   372,   430,   493,
   517,   532,   373,   429,   374,   432,   525,   465,   330,   143,
   179,   376,   435,   466,   509,   468,   496,   527,    43,    44,
    45,    46,    77,   155,   436,    47,   305,    48,    49,    50,
    51,    52,    63,    80,   160,   161,   309,   310,   380,   381,
   499,   443,   471,   511,    53,    64,   170,   388,   472,   513,
   528,    54,    66,   445,    55,    65,   171,   389
};

static const short yypact[] = {    66,
-32768,-32768,    40,-32768,-32768,-32768,-32768,    71,    84,  1036,
-32768,-32768,    18,-32768,-32768,-32768,   -41,    11,-32768,-32768,
-32768,-32768,    26,-32768,   286,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     4,
   -50,-32768,-32768,    10,-32768,    16,    -8,-32768,    -8,-32768,
-32768,-32768,-32768,-32768,-32768,    54,-32768,    56,-32768,-32768,
    -6,   -25,     2,    13,    80,   335,   335,    32,-32768,-32768,
-32768,    37,   741,-32768,-32768,-32768,    80,-32768,   -50,-32768,
-32768,    58,    50,-32768,-32768,-32768,-32768,-32768,-32768,    73,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   741,-32768,-32768,    -5,   906,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   134,   809,    95,-32768,-32768,   811,
-32768,   141,   321,   351,     0,   171,   171,   495,   495,-32768,
    76,-32768,-32768,   906,-32768,-32768,   335,-32768,-32768,-32768,
-32768,   906,-32768,-32768,-32768,   144,    80,-32768,    32,    79,
   335,-32768,   853,-32768,-32768,-32768,    -5,-32768,-32768,   378,
   133,   161,   335,   378,   378,   162,   163,   335,   964,-32768,
   414,   335,   165,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    73,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   166,-32768,   107,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    82,-32768,
   906,-32768,-32768,-32768,-32768,    96,    93,   679,-32768,   335,
   906,-32768,   335,-32768,    80,-32768,-32768,-32768,    80,-32768,
   906,-32768,-32768,-32768,-32768,   741,    36,    30,-32768,-32768,
-32768,   987,   987,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   102,-32768,   103,   906,   113,-32768,   128,   117,   335,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   107,   998,   335,   335,   335,   335,   335,   335,    19,
   135,   138,-32768,-32768,-32768,-32768,-32768,-32768,   906,-32768,
-32768,-32768,-32768,-32768,   -17,-32768,   906,   906,-32768,-32768,
   139,-32768,-32768,-32768,-32768,   143,   906,    55,   208,   156,
-32768,-32768,-32768,-32768,   -43,-32768,-32768,   810,   749,   180,
   180,   180,   180,  1027,  1027,    64,    64,-32768,-32768,-32768,
-32768,-32768,   906,   906,   906,   906,   906,   906,-32768,-32768,
-32768,-32768,   152,-32768,   335,-32768,-32768,-32768,   964,-32768,
-32768,   741,-32768,-32768,   193,   148,-32768,    32,-32768,-32768,
-32768,-32768,-32768,-32768,    80,-32768,   168,   335,   239,-32768,
-32768,-32768,-32768,   335,   170,-32768,   906,-32768,   167,-32768,
   587,   169,-32768,   906,-32768,   205,-32768,-32768,-32768,-32768,
   378,-32768,-32768,   335,-32768,   906,-32768,   174,   335,   172,
   906,-32768,    48,-32768,-32768,-32768,   906,-32768,-32768,-32768,
-32768,   187,   175,-32768,-32768,   741,   189,   335,-32768,   906,
-32768,   906,-32768,   153,-32768,   998,-32768,-32768,   741,-32768,
   190,   906,   178,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   741,   192,-32768,-32768,   196,-32768,   831,-32768,
-32768,   197,-32768,    80,   741,-32768,-32768,   831,-32768,   275,
   278,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,    38,   -34,   -72,-32768,-32768,-32768,-32768,
  -141,-32768,   118,-32768,-32768,-32768,-32768,   115,-32768,-32768,
  -106,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -55,-32768,
-32768,-32768,    -9,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   277,-32768,-32768,-32768,   -32,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -133,  -125,
-32768,-32768,  -347,-32768,-32768,-32768,     1,  -165,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -200,-32768,-32768,-32768,
-32768,   -62,     5,  -138,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   150,-32768,   151,-32768,-32768,-32768,-32768,
    -3,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -139,-32768,
-32768,-32768,-32768,  -216,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -410,  -137,    -1,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   249,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -136,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		1087


static const short yytable[] = {    27,
   150,    67,   282,   282,   317,   412,   450,    23,   317,   317,
   283,   283,   146,    61,   148,    27,   159,    79,   153,   154,
   312,    59,   314,   158,     1,     1,     2,     2,    62,   451,
    69,   318,   -49,   115,   144,   322,   323,    85,   180,    74,
   152,    60,    17,   157,    67,    25,    75,   165,    27,   169,
    58,     4,     4,   329,     1,    89,     2,    86,   433,   199,
   162,   434,     1,    76,     2,    -2,   183,   156,   419,    81,
    -6,   253,     1,    87,     2,   184,    84,     1,   181,     2,
   254,     4,     3,    -3,    88,   510,     1,     3,     2,     4,
     1,  -235,     2,     5,    57,   163,   302,   419,   518,     4,
     6,    18,    19,   307,     4,   291,   291,  -266,  -374,  -374,
   300,   145,   530,     4,   301,   420,  -266,     4,   164,   149,
   303,   196,   197,   198,   539,   308,   168,   165,   311,   165,
   232,     5,   -40,   441,   442,    59,   284,   284,     6,   200,
   321,     5,   233,   234,   420,   327,     5,   306,     6,   334,
  -290,   -11,  -159,     6,   304,     5,  -159,   319,   515,     5,
  -159,  -159,     6,   320,   324,   325,     6,   336,   352,    85,
   363,   385,   364,   256,   391,   392,    93,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   393,   396,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   394,   427,   426,
   444,   437,   257,   258,   259,   260,   261,   262,     5,   446,
   469,-32768,-32768,-32768,-32768,   368,   263,   264,   265,   266,
   267,   456,   110,   467,   268,   194,   195,   196,   197,   198,
   475,   477,   482,   180,   495,   484,   501,  -317,   503,   514,
   521,   269,   270,   508,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   369,   507,   377,  -369,   520,
   378,   531,   533,   536,   541,   383,   384,   542,   165,   440,
   313,   315,   505,   387,    26,    -5,   286,   421,   458,   294,
   516,   459,     1,   365,     2,   379,   375,    78,     0,   382,
     0,   470,     0,   329,     0,   317,   398,   399,   400,   401,
   402,   403,   404,   405,   406,   407,   408,   409,   410,     4,
   438,   413,   414,   415,   416,   417,   418,   488,   439,     0,
     0,     0,   497,     0,     0,   431,     0,    90,    91,    92,
    93,   235,   236,     0,     0,     0,     0,     0,    67,    94,
    95,     0,     0,    96,     0,    97,    98,    99,     0,   463,
     0,     5,   100,   101,     0,     0,   102,   103,     6,   104,
   105,   106,     0,   107,     0,     0,     0,     0,     0,     0,
    90,    91,     0,    93,   237,   238,   239,   240,   241,   242,
     0,   108,   457,    95,     0,   109,   110,    19,   243,   244,
     0,   245,   246,   247,   248,     0,   111,     0,   112,   102,
   421,     0,   104,   105,   106,   476,   107,     0,   479,     0,
   249,   481,     0,   463,   250,   485,     0,     0,   487,     0,
   494,   186,     0,   187,     0,   473,   463,   498,   109,   110,
    19,   500,     0,     0,     0,     0,   502,     0,     0,   316,
   463,   112,     0,     0,   524,   188,   189,   190,   191,   192,
   193,     0,   463,     0,     0,   512,     0,     0,     0,   194,
   195,   196,   197,   198,     0,   519,     0,     0,     0,     0,
     0,   522,   523,   526,     0,     0,     0,     0,     0,     0,
   529,   332,     0,   534,     0,     0,   535,    90,    91,    92,
    93,     0,   538,     0,     0,     0,     0,     0,     0,    94,
    95,     0,     0,    96,     0,    97,    98,    99,     0,     0,
     0,     0,   100,   101,   537,     0,   102,   103,     0,   104,
   105,   106,     0,   107,     0,     0,   257,   258,   259,   260,
   261,   262,   287,     0,     0,   288,     0,     0,     0,     0,
   263,   289,   265,   266,   267,   109,   110,    19,   268,     0,
     0,     0,     0,     0,     0,     0,   111,     0,   112,     0,
     0,     0,     0,     0,     0,   269,   270,     0,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,    90,
    91,    92,    93,     0,     0,     0,     0,     0,     0,     0,
     0,    94,    95,     0,     0,    96,     0,    97,    98,    99,
     0,     0,     0,     0,   100,   101,     0,     0,   102,   103,
     0,   104,   105,   106,     0,   107,     0,     0,   257,   258,
   259,   260,   261,   262,   486,     0,     0,     0,     0,     0,
     0,     0,   263,   289,   265,   266,   267,   109,   110,    19,
   268,     0,     0,     0,     0,     0,     0,     0,   111,     0,
   112,     0,     0,     0,     0,     0,     0,   269,   270,     0,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,    90,    91,    92,    93,     1,     0,     2,     0,     0,
     0,     0,     0,    94,    95,     0,     0,    96,     0,    97,
    98,    99,     0,     0,     0,     0,   100,   101,     0,     0,
   102,   103,     4,   104,   105,   106,     0,   107,     0,     0,
     0,     0,     0,     0,     0,     0,   366,     0,     0,     0,
     0,     0,     0,     0,     0,   108,     0,     0,     0,   109,
   110,    19,     0,    90,    91,    92,    93,     1,     0,     2,
   111,     0,   112,     0,   367,    94,    95,     0,     0,    96,
     0,    97,    98,    99,     0,     0,   186,     0,   100,   101,
     0,     0,   102,   103,     4,   104,   105,   106,     0,   107,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   188,   189,   190,   191,   192,   193,     0,   108,     0,     0,
     0,   109,   110,    19,   194,   195,   196,   197,   198,     0,
     0,   201,   111,     0,   112,   202,   203,   204,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,   215,     0,
     0,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,     0,     0,     0,   186,     0,
   187,   188,   189,   190,   191,   192,   193,     0,  -265,  -265,
     0,  -265,  -265,  -265,  -265,   194,   195,   196,   197,   198,
     0,    19,   188,   189,   190,   191,   192,   193,     0,     0,
  -265,     0,  -266,     0,  -265,     0,   194,   195,   196,   197,
   198,  -266,     0,     0,   257,   258,   259,   260,   261,   262,
   287,     0,     0,   288,     0,     0,     0,  -328,   263,   264,
   265,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     0,     0,     0,   186,     0,   187,     0,     0,     0,     0,
     0,     0,     0,   269,   270,     0,   271,   272,   273,   274,
   275,   276,   277,   278,   279,   280,   281,   188,   189,   190,
   191,   192,   193,     0,     0,     0,     0,     0,     0,     0,
     0,   194,   195,   196,   197,   198,   328,     0,     0,     0,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,     0,     0,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   411,     0,     0,     0,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,     0,     0,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,  -228,  -228,     0,  -228,  -228,  -228,
  -228,     0,     0,    28,     0,    29,     0,    30,    31,    32,
     0,     0,     0,     0,     0,     0,  -228,     0,  -228,    33,
  -228,    34,   -71,     0,     0,  -342,  -344,  -228,   188,   189,
   190,   191,-32768,-32768,     0,     0,     0,     0,     0,     0,
     0,     0,   194,   195,   196,   197,   198
};

static const short yycheck[] = {     9,
    73,    36,   136,   137,   170,   353,    50,     3,   174,   175,
   136,   137,    68,     3,    70,    25,    79,    52,    74,    75,
   162,    63,   164,    79,     7,     7,     9,     9,     3,    73,
    27,   170,    83,    66,    67,   174,   175,    63,   111,    30,
    73,    83,     3,    78,    79,     8,    31,    82,    58,    84,
    13,    34,    34,   179,     7,    65,     9,    83,    76,   115,
     3,    79,     7,    72,     9,     0,    72,    77,    50,    16,
     0,    72,     7,    72,     9,    81,    83,     7,   111,     9,
    81,    34,    17,     0,    72,   496,     7,    17,     9,    34,
     7,    73,     9,    76,    77,    38,   152,    50,   509,    34,
    83,    62,    63,   159,    34,   138,   139,    72,    79,    80,
   145,    80,   523,    34,   147,    97,    81,    34,    61,    83,
   155,    58,    59,    60,   535,   160,    77,   162,   161,   164,
   126,    76,    77,    79,    80,    63,   136,   137,    83,     6,
   173,    76,    48,     3,    97,   178,    76,   157,    83,   182,
    75,    73,    71,    83,    11,    76,    75,    25,   506,    76,
    79,    80,    83,     3,     3,     3,    83,     3,     3,    63,
    75,   313,    80,     3,    73,    73,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    79,    76,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    80,    71,    75,
     3,    73,    42,    43,    44,    45,    46,    47,    76,    64,
    73,    42,    43,    44,    45,   298,    56,    57,    58,    59,
    60,    80,    62,    41,    64,    56,    57,    58,    59,    60,
    73,     3,    73,   316,    40,    79,    73,    79,    77,    97,
    73,    81,    82,    79,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,   298,    80,   300,    80,    80,
   303,    80,    77,    77,     0,   310,   311,     0,   313,   386,
   163,   167,   483,   316,     8,     0,   137,   360,   428,   139,
   507,   429,     7,   297,     9,   305,   298,    49,    -1,   309,
    -1,   438,    -1,   429,    -1,   471,   339,   340,   341,   342,
   343,   344,   345,   346,   347,   348,   349,   350,   351,    34,
   383,   354,   355,   356,   357,   358,   359,   461,   384,    -1,
    -1,    -1,   471,    -1,    -1,   370,    -1,     3,     4,     5,
     6,    21,    22,    -1,    -1,    -1,    -1,    -1,   383,    15,
    16,    -1,    -1,    19,    -1,    21,    22,    23,    -1,   432,
    -1,    76,    28,    29,    -1,    -1,    32,    33,    83,    35,
    36,    37,    -1,    39,    -1,    -1,    -1,    -1,    -1,    -1,
     3,     4,    -1,     6,    64,    65,    66,    67,    68,    69,
    -1,    57,   425,    16,    -1,    61,    62,    63,    48,    49,
    -1,    51,    52,    53,    54,    -1,    72,    -1,    74,    32,
   483,    -1,    35,    36,    37,   448,    39,    -1,   453,    -1,
    70,   454,    -1,   496,    74,   460,    -1,    -1,   461,    -1,
   465,    18,    -1,    20,    -1,   445,   509,   472,    61,    62,
    63,   474,    -1,    -1,    -1,    -1,   479,    -1,    -1,    72,
   523,    74,    -1,    -1,   517,    42,    43,    44,    45,    46,
    47,    -1,   535,    -1,    -1,   498,    -1,    -1,    -1,    56,
    57,    58,    59,    60,    -1,   510,    -1,    -1,    -1,    -1,
    -1,   516,   517,   518,    -1,    -1,    -1,    -1,    -1,    -1,
   523,    78,    -1,   528,    -1,    -1,   531,     3,     4,     5,
     6,    -1,   535,    -1,    -1,    -1,    -1,    -1,    -1,    15,
    16,    -1,    -1,    19,    -1,    21,    22,    23,    -1,    -1,
    -1,    -1,    28,    29,   534,    -1,    32,    33,    -1,    35,
    36,    37,    -1,    39,    -1,    -1,    42,    43,    44,    45,
    46,    47,    48,    -1,    -1,    51,    -1,    -1,    -1,    -1,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    81,    82,    -1,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,     3,
     4,     5,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    16,    -1,    -1,    19,    -1,    21,    22,    23,
    -1,    -1,    -1,    -1,    28,    29,    -1,    -1,    32,    33,
    -1,    35,    36,    37,    -1,    39,    -1,    -1,    42,    43,
    44,    45,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    -1,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,     3,     4,     5,     6,     7,    -1,     9,    -1,    -1,
    -1,    -1,    -1,    15,    16,    -1,    -1,    19,    -1,    21,
    22,    23,    -1,    -1,    -1,    -1,    28,    29,    -1,    -1,
    32,    33,    34,    35,    36,    37,    -1,    39,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,    61,
    62,    63,    -1,     3,     4,     5,     6,     7,    -1,     9,
    72,    -1,    74,    -1,    76,    15,    16,    -1,    -1,    19,
    -1,    21,    22,    23,    -1,    -1,    18,    -1,    28,    29,
    -1,    -1,    32,    33,    34,    35,    36,    37,    -1,    39,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    44,    45,    46,    47,    -1,    57,    -1,    -1,
    -1,    61,    62,    63,    56,    57,    58,    59,    60,    -1,
    -1,     3,    72,    -1,    74,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    -1,    -1,    -1,    18,    -1,
    20,    42,    43,    44,    45,    46,    47,    -1,    48,    49,
    -1,    51,    52,    53,    54,    56,    57,    58,    59,    60,
    -1,    63,    42,    43,    44,    45,    46,    47,    -1,    -1,
    70,    -1,    72,    -1,    74,    -1,    56,    57,    58,    59,
    60,    81,    -1,    -1,    42,    43,    44,    45,    46,    47,
    48,    -1,    -1,    51,    -1,    -1,    -1,    77,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    64,    -1,    -1,    -1,
    -1,    -1,    -1,    18,    -1,    20,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    81,    82,    -1,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    42,    43,    44,
    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    56,    57,    58,    59,    60,     3,    -1,    -1,    -1,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
     3,    -1,    -1,    -1,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    48,    49,    -1,    51,    52,    53,
    54,    -1,    -1,     8,    -1,    10,    -1,    12,    13,    14,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,    24,
    74,    26,    27,    -1,    -1,    30,    31,    81,    42,    43,
    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    56,    57,    58,    59,    60
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 121 "syntaxcpy.y"
{ SetSyntaxTree(MakeNode_Program(yyvsp[0].nodeList)); ;
    break;}
case 2:
#line 124 "syntaxcpy.y"
{ yyval.nodeList = NIL_NODELIST; ;
    break;}
case 3:
#line 125 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_CodeDefs(NIL_NODELIST, yyvsp[0].node); ;
    break;}
case 4:
#line 126 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_CodeDefs(yyvsp[-1].nodeList, yyvsp[0].node); ;
    break;}
case 5:
#line 129 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 6:
#line 130 "syntaxcpy.y"
{ yyval.node = NIL_NODE; ;
    break;}
case 7:
#line 133 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_CodeDefs(yyvsp[-1].nodeList, yyvsp[0].node); ;
    break;}
case 8:
#line 134 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_CodeDefs(NIL_NODELIST, yyvsp[0].node); ;
    break;}
case 9:
#line 137 "syntaxcpy.y"
{ yyval.node = MakeNode_Stmts(yyvsp[-1].node, yyvsp[0].node);	;
    break;}
case 10:
#line 138 "syntaxcpy.y"
{ yyval.node = MakeNode_Stmts(NIL_NODE, yyvsp[0].node); ;
    break;}
case 11:
#line 141 "syntaxcpy.y"
{ yyval.line = DeltaCompiler::GetLine(); ;
    break;}
case 12:
#line 148 "syntaxcpy.y"
{ SM(S_FUNC_(yyvsp[0].constStr)); PE2(T_FUNC_(yyvsp[0].constStr), T_LOCAL_OR_FUNCNAME); ;
    break;}
case 13:
#line 150 "syntaxcpy.y"
{ SG(S_BLOCK); ;
    break;}
case 14:
#line 152 "syntaxcpy.y"
{ EG(S_BLOCK); EM(S_FUNC_(yyvsp[-6].constStr)); yyval.node = MakeNode_Function(yyvsp[-6].constStr, yyvsp[-3].node, yyvsp[-4].constStr, yyvsp[-2].idList, yyvsp[0].node); ;
    break;}
case 15:
#line 155 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCLINKAGE_NO_EXPORT;			;
    break;}
case 16:
#line 156 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCLINKAGE_DEFAULT_EXPORT;	;
    break;}
case 17:
#line 160 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCCLASS_PROGRAMFUNCTION;	;
    break;}
case 18:
#line 162 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCCLASS_ONEVENT;			;
    break;}
case 19:
#line 164 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCCLASS_METHOD;			;
    break;}
case 20:
#line 168 "syntaxcpy.y"
{ PE(T_LPAR); SG(S_FARGS); yyval.line = yyvsp[0].line; ;
    break;}
case 21:
#line 172 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionName(yyvsp[-1].constStr); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 22:
#line 174 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionName(yyvsp[-1].constStr); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 23:
#line 176 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionName(AST_VALUE_TOSTRING_SYMBOLIC_NAME); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 24:
#line 179 "syntaxcpy.y"
{ unullify(yyval.node); ;
    break;}
case 25:
#line 182 "syntaxcpy.y"
{ yyval.constStr = yyvsp[0].constStr;							;
    break;}
case 26:
#line 183 "syntaxcpy.y"
{ yyval.constStr = DELTA_OPERATOR_OBJECT_GET;	;
    break;}
case 27:
#line 184 "syntaxcpy.y"
{ yyval.constStr = DELTA_OPERATOR_OBJECT_SET;	;
    break;}
case 28:
#line 188 "syntaxcpy.y"
{ PE2(T_COMMA, T_IDENT); ;
    break;}
case 29:
#line 190 "syntaxcpy.y"
{ yyval.idList = MakeNode_IdentList(yyvsp[-3].idList, yyvsp[0].constStr); ;
    break;}
case 30:
#line 192 "syntaxcpy.y"
{ PE(T_IDENT); yyval.idList = MakeNode_IdentList(NIL_IDLIST, yyvsp[0].constStr); ;
    break;}
case 31:
#line 194 "syntaxcpy.y"
{ unullify(yyval.idList); ;
    break;}
case 32:
#line 198 "syntaxcpy.y"
{ EG(S_FARGS); PE(T_RPAR); unullify(yyval.constStr); ;
    break;}
case 33:
#line 200 "syntaxcpy.y"
{ EG(S_FARGS); PE2(T_TDOT, T_RPAR); ;
    break;}
case 34:
#line 202 "syntaxcpy.y"
{  yyval.constStr = AST_VALUE_VARARGS_FORMAL_NAME; ;
    break;}
case 35:
#line 206 "syntaxcpy.y"
{ EG(S_FARGS); PE(T_RPAR); unullify(yyval.idList); ;
    break;}
case 36:
#line 208 "syntaxcpy.y"
{ OE(T_LPAR_OR_TDOT); ;
    break;}
case 37:
#line 210 "syntaxcpy.y"
{ yyval.idList = MakeNode_IdentList(yyvsp[-2].idList, yyvsp[0].constStr); ;
    break;}
case 38:
#line 212 "syntaxcpy.y"
{ EG(S_FARGS); PE(T_RPAR); unullify(yyval.idList); ;
    break;}
case 39:
#line 215 "syntaxcpy.y"
{ PE(T_LBC); ;
    break;}
case 40:
#line 219 "syntaxcpy.y"
{ PE(T_RBC); ;
    break;}
case 41:
#line 221 "syntaxcpy.y"
{  yyval.node = MakeNode_Compound(yyvsp[-2].node); ;
    break;}
case 42:
#line 224 "syntaxcpy.y"
{ PE(T_RBC); yyval.node = MakeNode_Compound(); ;
    break;}
case 43:
#line 228 "syntaxcpy.y"
{ PE(T_LBC); ;
    break;}
case 44:
#line 230 "syntaxcpy.y"
{ EM(S_FUNC_(AST_VALUE_FUNCCLASS_PROGRAMFUNCTION)); yyval.node = MakeNode_LambdaFunction(yyvsp[-2].idList, yyvsp[0].node); ;
    break;}
case 45:
#line 234 "syntaxcpy.y"
{	SM(S_FUNC_(AST_VALUE_FUNCCLASS_PROGRAMFUNCTION)); 
								PE2(T_LAMBDA, T_LPAR); 
								SG(S_FARGS); ;
    break;}
case 46:
#line 240 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 47:
#line 242 "syntaxcpy.y"
{ yyval.node = yyvsp[-1].node; ;
    break;}
case 48:
#line 246 "syntaxcpy.y"
{ PE(T_RBC); yyval.node = yyvsp[0].node; yyval.node->SetLine(yyvsp[-1].line); ;
    break;}
case 49:
#line 252 "syntaxcpy.y"
{ PE(T_SEMI); ;
    break;}
case 51:
#line 256 "syntaxcpy.y"
{ SM(S_STMT); ;
    break;}
case 52:
#line 258 "syntaxcpy.y"
{ yyval.node =	MakeNode_ExpressionListStmt(yyvsp[-1].nodeList); ;
    break;}
case 53:
#line 261 "syntaxcpy.y"
{ yyval.node = MakeNode_BasicExprStmt(yyvsp[0].node);		yyval.node->SetLine(yyvsp[-1].line); ;
    break;}
case 54:
#line 262 "syntaxcpy.y"
{ yyval.node = MakeNode_BasicNonExprStmt(yyvsp[0].node);	yyval.node->SetLine(yyvsp[-1].line); ;
    break;}
case 55:
#line 263 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 56:
#line 264 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionStmt(yyvsp[0].node); ;
    break;}
case 57:
#line 265 "syntaxcpy.y"
{ yyval.node = MakeNode_EmptyStmt();  ;
    break;}
case 58:
#line 268 "syntaxcpy.y"
{ EM(S_STMT); yyval.node = yyvsp[0].node; ;
    break;}
case 59:
#line 269 "syntaxcpy.y"
{ EM(S_STMT); yyval.node = yyvsp[0].node; ;
    break;}
case 60:
#line 270 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node;;
    break;}
case 61:
#line 273 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node;;
    break;}
case 62:
#line 274 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node;;
    break;}
case 63:
#line 275 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 64:
#line 276 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node;;
    break;}
case 65:
#line 277 "syntaxcpy.y"
{ EM(S_STMT); yyval.node = yyvsp[0].node; ;
    break;}
case 66:
#line 278 "syntaxcpy.y"
{ EM(S_STMT); yyval.node = yyvsp[0].node;;
    break;}
case 67:
#line 279 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 68:
#line 280 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 69:
#line 286 "syntaxcpy.y"
{ SM(S_ASSRT); SG(S_EXPR); ;
    break;}
case 70:
#line 288 "syntaxcpy.y"
{ EG(S_EXPR); PE(S_EXPR); EM(S_ASSRT); yyval.node = MakeNode_AssertStmt(yyvsp[0].node); ;
    break;}
case 71:
#line 290 "syntaxcpy.y"
{ SM(S_STMT); PE(S_ASSRT);	;
    break;}
case 72:
#line 292 "syntaxcpy.y"
{ yyval.node = yyvsp[-1].node; ;
    break;}
case 73:
#line 298 "syntaxcpy.y"
{ SM(S_RET); ;
    break;}
case 74:
#line 301 "syntaxcpy.y"
{ yyval.node = MakeNode_Return(yyvsp[-1].node); ;
    break;}
case 75:
#line 303 "syntaxcpy.y"
{ MAKE_FUNCTION_EXPR(yyvsp[0].node, yyval.node); yyval.node = MakeNode_Return(yyval.node); ;
    break;}
case 76:
#line 307 "syntaxcpy.y"
{ PE2(T_RET, S_EXPR); ;
    break;}
case 77:
#line 309 "syntaxcpy.y"
{ EM(S_RET); yyval.node = yyvsp[0].node; ;
    break;}
case 78:
#line 311 "syntaxcpy.y"
{ EM(S_RET); yyval.node = MakeNode_Return(); ;
    break;}
case 79:
#line 317 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 80:
#line 320 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 81:
#line 321 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 82:
#line 325 "syntaxcpy.y"
{ yyval.node = MakeNode_UsingNamespace(yyvsp[-2].idList, yyvsp[-1].constStr); ;
    break;}
case 83:
#line 327 "syntaxcpy.y"
{ yyval.node = MakeNode_UsingNamespace(yyvsp[-1].constStr); ;
    break;}
case 84:
#line 332 "syntaxcpy.y"
{ yyval.node = MakeNode_UsingByteCodeLibrary(yyvsp[-2].constStr); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 85:
#line 338 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 86:
#line 339 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 87:
#line 340 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 88:
#line 341 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 89:
#line 342 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 90:
#line 343 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 91:
#line 344 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 92:
#line 348 "syntaxcpy.y"
{ yyval.dynamicStr = DYNAMIC_STRING(yyvsp[0].constStr); ;
    break;}
case 93:
#line 351 "syntaxcpy.y"
{ SM(S_CONST); PE(T_IDENT); ;
    break;}
case 94:
#line 352 "syntaxcpy.y"
{ PE(T_ASSIGN); ;
    break;}
case 95:
#line 353 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 96:
#line 354 "syntaxcpy.y"
{ EM(S_CONST); yyval.node = MakeNode_ConstDefExpression(yyvsp[-4].dynamicStr, yyvsp[0].node); ;
    break;}
case 97:
#line 358 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_ASSIGN, S_EXPR); ;
    break;}
case 98:
#line 360 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR);  yyval.node = MakeNode_AssignExpr(yyvsp[-3].node, yyvsp[0].node); ;
    break;}
case 99:
#line 363 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_ADDA, S_EXPR); ;
    break;}
case 100:
#line 365 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_ADD_ASSIGN); ;
    break;}
case 101:
#line 368 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_MULA, S_EXPR); ;
    break;}
case 102:
#line 370 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_MUL_ASSIGN); ;
    break;}
case 103:
#line 373 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_SUBA, S_EXPR); ;
    break;}
case 104:
#line 375 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_SUB_ASSIGN); ;
    break;}
case 105:
#line 378 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_DIVA, S_EXPR); ;
    break;}
case 106:
#line 380 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_DIV_ASSIGN); ;
    break;}
case 107:
#line 383 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_MODA, S_EXPR); ;
    break;}
case 108:
#line 385 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_MOD_ASSIGN); ;
    break;}
case 109:
#line 389 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_GT, S_EXPR); ;
    break;}
case 110:
#line 391 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_GT); ;
    break;}
case 111:
#line 394 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_LT, S_EXPR); ;
    break;}
case 112:
#line 396 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_LT); ;
    break;}
case 113:
#line 399 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_GE, S_EXPR); ;
    break;}
case 114:
#line 401 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node,AST_TAG_OP_GE); ;
    break;}
case 115:
#line 404 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_LE, S_EXPR); ;
    break;}
case 116:
#line 406 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_LE); ;
    break;}
case 117:
#line 409 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_EQ, S_EXPR); ;
    break;}
case 118:
#line 411 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_EQ); ;
    break;}
case 119:
#line 414 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_NE, S_EXPR); ;
    break;}
case 120:
#line 416 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_NE); ;
    break;}
case 121:
#line 420 "syntaxcpy.y"
{ SM(S_LOGICAL); PE3(S_EXPR, T_AND, S_EXPR); ;
    break;}
case 122:
#line 422 "syntaxcpy.y"
{ EM(S_LOGICAL); yyval.node = MakeNode_ExprANDExpr(yyvsp[-3].node, yyvsp[0].node); ;
    break;}
case 123:
#line 425 "syntaxcpy.y"
{ SM(S_LOGICAL); PE3(S_EXPR, T_OR, S_EXPR); ;
    break;}
case 124:
#line 427 "syntaxcpy.y"
{ EM(S_LOGICAL); yyval.node = MakeNode_ExprORExpr(yyvsp[-3].node, yyvsp[0].node); ;
    break;}
case 125:
#line 431 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_ADD, S_EXPR); ;
    break;}
case 126:
#line 433 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_ADD); ;
    break;}
case 127:
#line 436 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_SUB, S_EXPR); ;
    break;}
case 128:
#line 438 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_SUB); ;
    break;}
case 129:
#line 441 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_DIV, S_EXPR); ;
    break;}
case 130:
#line 443 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node, yyvsp[0].node,AST_TAG_OP_DIV); ;
    break;}
case 131:
#line 446 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_MUL, S_EXPR); ;
    break;}
case 132:
#line 448 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node,  yyvsp[0].node, AST_TAG_OP_MUL); ;
    break;}
case 133:
#line 451 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_MOD, S_EXPR); ;
    break;}
case 134:
#line 453 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_MOD); ;
    break;}
case 135:
#line 457 "syntaxcpy.y"
{	EM(S_TERNARY); yyval.node = MakeNode_Ternary(yyvsp[-4].node, yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 136:
#line 461 "syntaxcpy.y"
{ SM(S_TERNARY); PE3(S_EXPR, T_QMARK, S_EXPR); yyval.node = yyvsp[-1].node; ;
    break;}
case 137:
#line 465 "syntaxcpy.y"
{ PE(T_COLON); yyval.node = yyvsp[0].node; ;
    break;}
case 138:
#line 468 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 139:
#line 470 "syntaxcpy.y"
{ PE(T_RPAR); yyval.node = yyvsp[0].node; ;
    break;}
case 140:
#line 474 "syntaxcpy.y"
{ yyval.node = MakeNode_TermLvalueArith(yyvsp[-1].node, AST_LVALUE_PLUSPLUS); ;
    break;}
case 141:
#line 477 "syntaxcpy.y"
{ SM(S_EXPR); PE2(T_PLUSPLUS, S_LVAL); ;
    break;}
case 142:
#line 479 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_TermLvalueArith(yyvsp[0].node, AST_PLUSPLUS_LVALUE); ;
    break;}
case 143:
#line 482 "syntaxcpy.y"
{ yyval.node = MakeNode_TermLvalueArith(yyvsp[-1].node, AST_LVALUE_MINUSMINUS); ;
    break;}
case 144:
#line 485 "syntaxcpy.y"
{ SM(S_EXPR); PE2(T_MINUSMINUS, S_LVAL); ;
    break;}
case 145:
#line 487 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_TermLvalueArith(yyvsp[0].node, AST_MINUSMINUS_LVALUE); ;
    break;}
case 146:
#line 490 "syntaxcpy.y"
{ SM(S_EXPR); PE2(T_SUB, S_EXPR); ;
    break;}
case 147:
#line 492 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_UMINUSExpression(yyvsp[0].node); ;
    break;}
case 148:
#line 495 "syntaxcpy.y"
{ SM(S_EXPR); PE2(T_NOT, S_EXPR); ;
    break;}
case 149:
#line 497 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_NOTExpression(yyvsp[0].node); ;
    break;}
case 150:
#line 500 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 151:
#line 503 "syntaxcpy.y"
{ yyval.node = MakeNode_PrimaryFunctionAndTableObject(yyvsp[0].node);	;
    break;}
case 152:
#line 504 "syntaxcpy.y"
{ yyval.node = MakeNode_PrimaryConstValue(yyvsp[0].node);				;
    break;}
case 153:
#line 505 "syntaxcpy.y"
{ yyval.node = MakeNode_PrimaryLambdaFunction(yyvsp[0].node);			;
    break;}
case 154:
#line 508 "syntaxcpy.y"
{ yyval.node = MakeNode_ConstValue(yyvsp[0].numberConst);		;
    break;}
case 155:
#line 509 "syntaxcpy.y"
{ yyval.node = MakeNode_ConstValue();		;
    break;}
case 156:
#line 510 "syntaxcpy.y"
{ yyval.node = MakeNode_ConstValue(true);	;
    break;}
case 157:
#line 511 "syntaxcpy.y"
{ yyval.node = MakeNode_ConstValue(false);	;
    break;}
case 158:
#line 514 "syntaxcpy.y"
{ yyval.constStr = "+";			;
    break;}
case 159:
#line 515 "syntaxcpy.y"
{ yyval.constStr = "-";			;
    break;}
case 160:
#line 516 "syntaxcpy.y"
{ yyval.constStr = "*";			;
    break;}
case 161:
#line 517 "syntaxcpy.y"
{ yyval.constStr = "/";			;
    break;}
case 162:
#line 518 "syntaxcpy.y"
{ yyval.constStr = "%";			;
    break;}
case 163:
#line 519 "syntaxcpy.y"
{ yyval.constStr = ">";			;
    break;}
case 164:
#line 520 "syntaxcpy.y"
{ yyval.constStr = "<";			;
    break;}
case 165:
#line 521 "syntaxcpy.y"
{ yyval.constStr = "!=";		;
    break;}
case 166:
#line 522 "syntaxcpy.y"
{ yyval.constStr = "==";		;
    break;}
case 167:
#line 523 "syntaxcpy.y"
{ yyval.constStr = ">=";		;
    break;}
case 168:
#line 524 "syntaxcpy.y"
{ yyval.constStr = "<=";		;
    break;}
case 169:
#line 525 "syntaxcpy.y"
{ yyval.constStr = "=";			;
    break;}
case 170:
#line 526 "syntaxcpy.y"
{ yyval.constStr = "+_";		;
    break;}
case 171:
#line 527 "syntaxcpy.y"
{ yyval.constStr = "-_";		;
    break;}
case 172:
#line 528 "syntaxcpy.y"
{ yyval.constStr = "*_";		;
    break;}
case 173:
#line 529 "syntaxcpy.y"
{ yyval.constStr = "/_";		;
    break;}
case 174:
#line 530 "syntaxcpy.y"
{ yyval.constStr = "%_";		;
    break;}
case 175:
#line 531 "syntaxcpy.y"
{ yyval.constStr = ">_";		;
    break;}
case 176:
#line 532 "syntaxcpy.y"
{ yyval.constStr = "<_";		;
    break;}
case 177:
#line 533 "syntaxcpy.y"
{ yyval.constStr = "!=_";		;
    break;}
case 178:
#line 534 "syntaxcpy.y"
{ yyval.constStr = "==_";		;
    break;}
case 179:
#line 535 "syntaxcpy.y"
{ yyval.constStr = ">=_";		;
    break;}
case 180:
#line 536 "syntaxcpy.y"
{ yyval.constStr = "<=_";		;
    break;}
case 181:
#line 537 "syntaxcpy.y"
{ yyval.constStr = "()";		;
    break;}
case 182:
#line 538 "syntaxcpy.y"
{ yyval.constStr = "=()";		;
    break;}
case 183:
#line 540 "syntaxcpy.y"
{ yyval.constStr = "if";		;
    break;}
case 184:
#line 541 "syntaxcpy.y"
{ yyval.constStr = "else";		;
    break;}
case 185:
#line 542 "syntaxcpy.y"
{ yyval.constStr = "function";	;
    break;}
case 186:
#line 543 "syntaxcpy.y"
{ yyval.constStr = "return";	;
    break;}
case 187:
#line 544 "syntaxcpy.y"
{ yyval.constStr = "onevent";	;
    break;}
case 188:
#line 545 "syntaxcpy.y"
{ yyval.constStr = "while";		;
    break;}
case 189:
#line 546 "syntaxcpy.y"
{ yyval.constStr = "for";		;
    break;}
case 190:
#line 547 "syntaxcpy.y"
{ yyval.constStr = "foreach";	;
    break;}
case 191:
#line 548 "syntaxcpy.y"
{ yyval.constStr = "nil";		;
    break;}
case 192:
#line 549 "syntaxcpy.y"
{ yyval.constStr = "local";		;
    break;}
case 193:
#line 550 "syntaxcpy.y"
{ yyval.constStr = "and";		;
    break;}
case 194:
#line 551 "syntaxcpy.y"
{ yyval.constStr = "not";		;
    break;}
case 195:
#line 552 "syntaxcpy.y"
{ yyval.constStr = "or";		;
    break;}
case 196:
#line 553 "syntaxcpy.y"
{ yyval.constStr = "lambda";	;
    break;}
case 197:
#line 554 "syntaxcpy.y"
{ yyval.constStr = "try";		;
    break;}
case 198:
#line 555 "syntaxcpy.y"
{ yyval.constStr = "trap";		;
    break;}
case 199:
#line 556 "syntaxcpy.y"
{ yyval.constStr = "throw";		;
    break;}
case 200:
#line 557 "syntaxcpy.y"
{ yyval.constStr = "using";		;
    break;}
case 201:
#line 558 "syntaxcpy.y"
{ yyval.constStr = "assert";	;
    break;}
case 202:
#line 559 "syntaxcpy.y"
{ yyval.constStr = "true";		;
    break;}
case 203:
#line 560 "syntaxcpy.y"
{ yyval.constStr = "false";		;
    break;}
case 204:
#line 561 "syntaxcpy.y"
{ yyval.constStr = "break";		;
    break;}
case 205:
#line 562 "syntaxcpy.y"
{ yyval.constStr = "continue";	;
    break;}
case 206:
#line 563 "syntaxcpy.y"
{ yyval.constStr = "static";	;
    break;}
case 207:
#line 564 "syntaxcpy.y"
{ yyval.constStr = "const";		;
    break;}
case 208:
#line 565 "syntaxcpy.y"
{ yyval.constStr = "method";	;
    break;}
case 209:
#line 566 "syntaxcpy.y"
{ yyval.constStr = "self";		;
    break;}
case 210:
#line 567 "syntaxcpy.y"
{ yyval.constStr = "arguments"; ;
    break;}
case 211:
#line 571 "syntaxcpy.y"
{ yyval.node = MakeNode_StringConst(yyvsp[-1].node, yyvsp[0].dynamicStr); ;
    break;}
case 212:
#line 573 "syntaxcpy.y"
{ yyval.node = MakeNode_StringConst(yyvsp[0].dynamicStr); ;
    break;}
case 213:
#line 577 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_STRINGIFY); ;
    break;}
case 214:
#line 580 "syntaxcpy.y"
{ yyval.constStr = yyvsp[0].constStr; ;
    break;}
case 215:
#line 581 "syntaxcpy.y"
{ yyval.constStr = yyvsp[0].constStr; ;
    break;}
case 216:
#line 585 "syntaxcpy.y"
{ PE(T_IDENT); yyval.node = MakeNode_StringifyDottedIdents(yyvsp[0].constStr); ;
    break;}
case 217:
#line 587 "syntaxcpy.y"
{ PE2(T_DOT, T_IDENT); ;
    break;}
case 218:
#line 589 "syntaxcpy.y"
{ yyval.node = MakeNode_StringifyDottedIdents(yyvsp[-3].node, yyvsp[0].constStr); ;
    break;}
case 219:
#line 593 "syntaxcpy.y"
{ EG(S_NAMESPACE); PE(T_IDENT); yyval.node = MakeNode_StringifyNamespaceIdent(yyvsp[-1].idList, yyvsp[0].constStr); ;
    break;}
case 220:
#line 597 "syntaxcpy.y"
{ PE(T_STRINGCONST); yyval.node = yyvsp[0].node; ;
    break;}
case 221:
#line 599 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 222:
#line 601 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 223:
#line 608 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_SELF); yyval.node = MakeNode_SELF(); ;
    break;}
case 224:
#line 610 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_LAMBDA_REF); yyval.node = MakeNode_LAMBDA_REF(); ;
    break;}
case 225:
#line 612 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_NEWSELF); yyval.node = MakeNode_NEWSELF(); ;
    break;}
case 226:
#line 614 "syntaxcpy.y"
{ EI(S_EXPR); yyval.node = yyvsp[0].node; ;
    break;}
case 227:
#line 616 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_ARGUMENTS); yyval.node = MakeNode_ARGUMENTS(); ;
    break;}
case 228:
#line 618 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 229:
#line 620 "syntaxcpy.y"
{ PE(S_TABLE); yyval.node = yyvsp[0].node; ;
    break;}
case 230:
#line 622 "syntaxcpy.y"
{ PE3(T_LPAR, S_EXPR, T_RPAR); ;
    break;}
case 231:
#line 624 "syntaxcpy.y"
{ yyval.node = MakeNode_ParenthesisedExpr(yyvsp[-2].node); ;
    break;}
case 232:
#line 626 "syntaxcpy.y"
{ PE(S_CALL); yyval.node = yyvsp[0].node; ;
    break;}
case 233:
#line 628 "syntaxcpy.y"
{ SM(S_EXPR); PE3(T_LPAR, S_FUNC, T_RPAR); ;
    break;}
case 234:
#line 630 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_FunctionParenthesisForm(yyvsp[-2].node); ;
    break;}
case 235:
#line 636 "syntaxcpy.y"
{ unullify(yyval.nodeList); ;
    break;}
case 236:
#line 638 "syntaxcpy.y"
{ yyval.nodeList = yyvsp[0].nodeList; ;
    break;}
case 237:
#line 643 "syntaxcpy.y"
{ PE(T_COMMA); ;
    break;}
case 238:
#line 645 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(yyvsp[-3].nodeList, yyvsp[0].node); ;
    break;}
case 239:
#line 647 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(NIL_NODELIST, yyvsp[0].node); ;
    break;}
case 240:
#line 651 "syntaxcpy.y"
{ SM(S_CALL); PE2(S_EXPR, T_LPAR); SG(S_AARGS); ;
    break;}
case 241:
#line 653 "syntaxcpy.y"
{ PE(T_RPAR); ;
    break;}
case 242:
#line 655 "syntaxcpy.y"
{ EG(S_AARGS); EM(S_CALL); yyval.nodeList = yyvsp[-2].nodeList; ;
    break;}
case 243:
#line 657 "syntaxcpy.y"
{ PE2(T_LPAR, T_RPAR); unullify(yyval.nodeList); ;
    break;}
case 244:
#line 660 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 245:
#line 662 "syntaxcpy.y"
{ yyval.node = MakeNode_Argument(yyvsp[0].node); ;
    break;}
case 246:
#line 664 "syntaxcpy.y"
{ PE2(T_BAR, S_EXPR); ;
    break;}
case 247:
#line 666 "syntaxcpy.y"
{ PE(T_BAR); ;
    break;}
case 248:
#line 668 "syntaxcpy.y"
{ yyval.node = MakeNode_LateBoundArgument(yyvsp[-2].node); ;
    break;}
case 249:
#line 670 "syntaxcpy.y"
{ PE(T_TDOT); yyval.node = MakeNode_TRIPLE_DOT(); ;
    break;}
case 250:
#line 672 "syntaxcpy.y"
{ MAKE_FUNCTION_EXPR(yyvsp[0].node, yyval.node); ;
    break;}
case 251:
#line 678 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionCall(yyvsp[-1].node, yyvsp[0].nodeList); ;
    break;}
case 252:
#line 682 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(yyvsp[-3].nodeList, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 253:
#line 684 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(NIL_NODELIST, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 254:
#line 692 "syntaxcpy.y"
{ EI(S_EXPR); SG(S_NAMESPACE); PE2(T_GLOBAL, T_IDENT); 
								  yyval.idList = MakeNode_NamespacePath(NIL_IDLIST, DELTA_LIBRARYNAMESPACE_SEPARATOR); ;
    break;}
case 255:
#line 695 "syntaxcpy.y"
{ EI(S_EXPR); SG(S_NAMESPACE); PE3(T_IDENT, T_GLOBAL, T_IDENT); 
								  yyval.idList = MakeNode_NamespacePath(NIL_IDLIST, yyvsp[-1].constStr); ;
    break;}
case 256:
#line 698 "syntaxcpy.y"
{ PE2(T_GLOBAL, T_IDENT); yyval.idList = MakeNode_NamespacePath(yyvsp[-2].idList, yyvsp[-1].constStr); ;
    break;}
case 257:
#line 702 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_IDENT); yyval.node = MakeNode_Lvalue(yyvsp[0].constStr); ;
    break;}
case 258:
#line 705 "syntaxcpy.y"
{ EG(S_NAMESPACE); yyval.node = MakeNode_NamespaceLvalue(yyvsp[-1].idList, yyvsp[0].constStr); ;
    break;}
case 259:
#line 708 "syntaxcpy.y"
{ yyval.node = MakeNode_AttrLvalue(yyvsp[0].dynamicStr); ;
    break;}
case 260:
#line 711 "syntaxcpy.y"
{ EI(S_EXPR); PE2(T_STATIC, T_IDENT); ;
    break;}
case 261:
#line 713 "syntaxcpy.y"
{ yyval.node = MakeNode_StaticLvalue(yyvsp[0].constStr); ;
    break;}
case 262:
#line 716 "syntaxcpy.y"
{ EI(S_EXPR); PE2(T_LOCAL, T_IDENT); ;
    break;}
case 263:
#line 718 "syntaxcpy.y"
{ yyval.node = MakeNode_LocalLvalue(yyvsp[0].constStr); ;
    break;}
case 264:
#line 721 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 265:
#line 725 "syntaxcpy.y"
{ yyval.node = MakeNode_TableObject(yyvsp[0].node); ;
    break;}
case 266:
#line 729 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 267:
#line 733 "syntaxcpy.y"
{ PE(T_DOT); OE(S_DOTINDEX); yyval.node = yyvsp[-1].node; ;
    break;}
case 268:
#line 738 "syntaxcpy.y"
{ PE(T_DDOT); OE(S_DOTINDEX); yyval.node = yyvsp[-1].node; ;
    break;}
case 269:
#line 742 "syntaxcpy.y"
{ PE(T_LB); OE(S_BRACKET_INDEX); yyval.node = yyvsp[-1].node; ;
    break;}
case 270:
#line 747 "syntaxcpy.y"
{ PE(T_DLB); OE(S_BRACKET_INDEX); yyval.node = yyvsp[-1].node; ;
    break;}
case 271:
#line 750 "syntaxcpy.y"
{ yyval.constStr = ".=";	;
    break;}
case 272:
#line 751 "syntaxcpy.y"
{ yyval.constStr = ".==";	;
    break;}
case 273:
#line 752 "syntaxcpy.y"
{ yyval.constStr = ".=()";	;
    break;}
case 274:
#line 753 "syntaxcpy.y"
{ yyval.constStr = ".==_";	;
    break;}
case 275:
#line 757 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexIdent(yyvsp[0].constStr); ;
    break;}
case 276:
#line 759 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexIdent(yyvsp[0].constStr); ;
    break;}
case 277:
#line 761 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexOpString(yyvsp[0].constStr); ;
    break;}
case 278:
#line 763 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexStringConst(yyvsp[0].node); ;
    break;}
case 279:
#line 767 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexOpString(yyvsp[0].constStr+1); ;
    break;}
case 280:
#line 771 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 281:
#line 773 "syntaxcpy.y"
{ yyval.node = MakeNode_BracketIndexOperatorMethod(yyvsp[0].constStr); ;
    break;}
case 282:
#line 779 "syntaxcpy.y"
{	PE(S_DOTINDEX_(DPTR(yyvsp[0].node)->GetTag())); 
									yyval.node = MakeNode_TableContentDot(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 283:
#line 783 "syntaxcpy.y"
{	PE(S_DOTINDEX_(DPTR(yyvsp[0].node)->GetTag())); 
									yyval.node = MakeNode_TableContentDot(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 284:
#line 787 "syntaxcpy.y"
{	PE(S_DOTINDEX_(DPTR(yyvsp[0].node)->GetTag())); 
									yyval.node = MakeNode_BoundedTableContentDot(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 285:
#line 791 "syntaxcpy.y"
{ PE2(S_BRACKET_INDEX_(DPTR(yyvsp[0].node)->GetTag()), T_RB); ;
    break;}
case 286:
#line 793 "syntaxcpy.y"
{ yyval.node = MakeNode_TableContentBracket(yyvsp[-3].node, yyvsp[-2].node); ;
    break;}
case 287:
#line 796 "syntaxcpy.y"
{ PE2(S_BRACKET_INDEX_(DPTR(yyvsp[0].node)->GetTag()), T_DRB); ;
    break;}
case 288:
#line 798 "syntaxcpy.y"
{ yyval.node = MakeNode_BoundedTableContentBracket(yyvsp[-3].node, yyvsp[-2].node); ;
    break;}
case 289:
#line 805 "syntaxcpy.y"
{ SM(S_TABLE); PE2(T_LB, S_TABLIST); ;
    break;}
case 290:
#line 808 "syntaxcpy.y"
{ PE(T_RB); ;
    break;}
case 291:
#line 810 "syntaxcpy.y"
{ EM(S_TABLE); ;
    break;}
case 292:
#line 814 "syntaxcpy.y"
{ yyval.node = MakeNode_TableConstructor(yyvsp[-1].nodeList); ;
    break;}
case 293:
#line 817 "syntaxcpy.y"
{ yyval.node = MakeNode_TableConstructor(); ;
    break;}
case 294:
#line 821 "syntaxcpy.y"
{ PE(T_COMMA); ;
    break;}
case 295:
#line 823 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_TableElements(yyvsp[-3].nodeList, yyvsp[0].node); ;
    break;}
case 296:
#line 825 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_TableElements(NIL_NODELIST, yyvsp[0].node); ;
    break;}
case 297:
#line 829 "syntaxcpy.y"
{ yyval.node = MakeNode_UnindexedValue(yyvsp[0].node); ;
    break;}
case 298:
#line 831 "syntaxcpy.y"
{ yyval.node = MakeNode_UnindexedValue(yyvsp[0].node); ;
    break;}
case 299:
#line 835 "syntaxcpy.y"
{ MAKE_FUNCTION_EXPR(yyvsp[0].node, yyval.node); ;
    break;}
case 300:
#line 838 "syntaxcpy.y"
{ OE(T_TABLE_ELEM); ;
    break;}
case 301:
#line 842 "syntaxcpy.y"
{ yyval.node = yyvsp[-1].node; DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 302:
#line 844 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 303:
#line 846 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 304:
#line 848 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 305:
#line 852 "syntaxcpy.y"
{ PE2(T_DOT, T_IDENT); ;
    break;}
case 306:
#line 854 "syntaxcpy.y"
{ yyval.node = MakeNode_DottedIdent(yyvsp[0].constStr); ;
    break;}
case 307:
#line 858 "syntaxcpy.y"
{ PE(T_OPINDEX); yyval.node = MakeNode_OperatorIndex(yyvsp[0].constStr); ;
    break;}
case 308:
#line 861 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 309:
#line 862 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 310:
#line 863 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 311:
#line 866 "syntaxcpy.y"
{ PE(S_INDEXEXPR); ;
    break;}
case 312:
#line 868 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 313:
#line 872 "syntaxcpy.y"
{ PE(T_COMMA); ;
    break;}
case 314:
#line 874 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(yyvsp[-4].nodeList, yyvsp[-1].node); DPTR(yyvsp[-1].node)->SetLine(yyvsp[0].line); ;
    break;}
case 315:
#line 876 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(NIL_NODELIST, yyvsp[-1].node); DPTR(yyvsp[-1].node)->SetLine(yyvsp[0].line); ;
    break;}
case 316:
#line 880 "syntaxcpy.y"
{ PE(T_LBC); SG(N_EMPTY); ;
    break;}
case 317:
#line 882 "syntaxcpy.y"
{ EG(N_EMPTY); PE2(S_INDICES, T_COLON); ;
    break;}
case 318:
#line 884 "syntaxcpy.y"
{ SG(S_ELIST); ;
    break;}
case 319:
#line 886 "syntaxcpy.y"
{ EG(S_ELIST); PE2(S_ELIST, T_RBC); ;
    break;}
case 320:
#line 888 "syntaxcpy.y"
{ yyval.node = MakeNode_IndexedValues(yyvsp[-6].nodeList, yyvsp[-2].nodeList); ;
    break;}
case 321:
#line 892 "syntaxcpy.y"
{ yyval.dynamicStr = yyvsp[-1].dynamicStr; ;
    break;}
case 322:
#line 894 "syntaxcpy.y"
{ PE(T_DOT); OE(T_IDENT_OR_KWDIDENT); ;
    break;}
case 323:
#line 896 "syntaxcpy.y"
{ yyval.dynamicStr = DYNAMIC_STRING(yyvsp[-1].constStr); PE(T_COLON); ;
    break;}
case 324:
#line 900 "syntaxcpy.y"
{ SG(S_EXPR); ;
    break;}
case 325:
#line 902 "syntaxcpy.y"
{ EG(S_EXPR); PE(S_EXPR); yyval.node = MakeNode_IdentIndexElement(yyvsp[-3].dynamicStr, yyvsp[-1].node); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 326:
#line 906 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(yyvsp[-3].nodeList, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 327:
#line 908 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(NIL_NODELIST, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 328:
#line 911 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 329:
#line 912 "syntaxcpy.y"
{ MAKE_FUNCTION_EXPR(yyvsp[0].node, yyval.node); ;
    break;}
case 330:
#line 918 "syntaxcpy.y"
{ PE(T_IDENT);		yyval.constStr = yyvsp[0].constStr; ;
    break;}
case 331:
#line 919 "syntaxcpy.y"
{ PE(T_KWDIDENT);	yyval.constStr = yyvsp[0].constStr; ;
    break;}
case 332:
#line 923 "syntaxcpy.y"
{ PE(T_ATTRIBUTEID); OE(T_LBC_OR_COLON); yyval.dynamicStr = DYNAMIC_STRING(yyvsp[0].constStr + 1); ;
    break;}
case 333:
#line 925 "syntaxcpy.y"
{ PE(T_ATTRIBUTE); OE(T_IDENT_OR_KWDIDENT); ;
    break;}
case 334:
#line 927 "syntaxcpy.y"
{ yyval.dynamicStr = DYNAMIC_STRING(yyvsp[0].constStr); ;
    break;}
case 335:
#line 932 "syntaxcpy.y"
{ yyval.node = MakeNode_NewAttribute(yyvsp[-2].dynamicStr, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 336:
#line 936 "syntaxcpy.y"
{ PE(T_SET);  ;
    break;}
case 337:
#line 938 "syntaxcpy.y"
{ SG(S_EXPR); ;
    break;}
case 338:
#line 940 "syntaxcpy.y"
{ EG(S_EXPR); PE2(S_EXPR, T_GET); yyval.node = yyvsp[-1].node; DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 339:
#line 944 "syntaxcpy.y"
{ SG(S_EXPR); ;
    break;}
case 340:
#line 946 "syntaxcpy.y"
{ EG(S_EXPR); PE2(S_EXPR, T_RBC); ;
    break;}
case 341:
#line 948 "syntaxcpy.y"
{  yyval.node = yyvsp[-3].node; DPTR(yyval.node)->SetLine(yyvsp[-2].line); ;
    break;}
case 342:
#line 954 "syntaxcpy.y"
{ SM(S_STMT); PE(T_BREAK);	;
    break;}
case 343:
#line 956 "syntaxcpy.y"
{ yyval.node = MakeNode_BREAK(); ;
    break;}
case 344:
#line 959 "syntaxcpy.y"
{ SM(S_STMT); PE(T_CONT);	;
    break;}
case 345:
#line 961 "syntaxcpy.y"
{ yyval.node = MakeNode_CONTINUE(); ;
    break;}
case 346:
#line 964 "syntaxcpy.y"
{ SG(S_EXPR); ;
    break;}
case 347:
#line 965 "syntaxcpy.y"
{ EG(S_EXPR); PE2(S_EXPR, T_RPAR); ;
    break;}
case 348:
#line 966 "syntaxcpy.y"
{ yyval.node = yyvsp[-2].node; DPTR(yyval.node)->SetLine(yyvsp[-3].line); ;
    break;}
case 349:
#line 971 "syntaxcpy.y"
{ SM(S_IF); PE2(T_IF, T_LPAR);  ;
    break;}
case 350:
#line 972 "syntaxcpy.y"
{ EM(S_IF); SM(S_ELSE); PE(T_ELSE); ;
    break;}
case 351:
#line 975 "syntaxcpy.y"
{ EM(S_IF);   yyval.node = MakeNode_IfStmt(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 352:
#line 977 "syntaxcpy.y"
{ EM(S_ELSE); yyval.node = MakeNode_IfElseStmt(yyvsp[-3].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 353:
#line 983 "syntaxcpy.y"
{ SM(S_WHILE); PE2(T_WHILE, T_LPAR); ;
    break;}
case 354:
#line 987 "syntaxcpy.y"
{ EM(S_WHILE); yyval.node = MakeNode_WhileStmt(yyvsp[-2].node, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 355:
#line 993 "syntaxcpy.y"
{ EM(S_FOR); yyval.node = MakeNode_ForStmt(yyvsp[-3].node, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 356:
#line 997 "syntaxcpy.y"
{ SM(S_FOR); PE2(T_FOR, T_LPAR); ;
    break;}
case 357:
#line 999 "syntaxcpy.y"
{ PE(S_ELIST); ;
    break;}
case 358:
#line 1003 "syntaxcpy.y"
{ yyval.node = MakeNode_ForInit(yyvsp[-1].nodeList); DPTR(yyval.node)->SetLine(yyvsp[-2].line); ;
    break;}
case 359:
#line 1005 "syntaxcpy.y"
{ EI(S_ELIST); yyval.node = MakeNode_ForInit(NIL_NODELIST); DPTR(yyval.node)->SetLine(yyvsp[-1].line); ;
    break;}
case 360:
#line 1008 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 361:
#line 1010 "syntaxcpy.y"
{ yyval.node = yyvsp[-2].node; DPTR(yyval.node)->SetLine(yyvsp[-1].line); ;
    break;}
case 362:
#line 1013 "syntaxcpy.y"
{ PE(S_ELIST); ;
    break;}
case 363:
#line 1015 "syntaxcpy.y"
{ yyval.node = MakeNode_ForSuffix(yyvsp[-1].nodeList); DPTR(yyval.node)->SetLine(yyvsp[-2].line); ;
    break;}
case 364:
#line 1017 "syntaxcpy.y"
{ yyval.node = MakeNode_ForSuffix(NIL_NODELIST); DPTR(yyval.node)->SetLine(yyvsp[-1].line); ;
    break;}
case 365:
#line 1020 "syntaxcpy.y"
{ PE(T_RPAR); ;
    break;}
case 367:
#line 1026 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; DPTR(yyval.node)->SetLine(yyvsp[-1].line); ;
    break;}
case 368:
#line 1029 "syntaxcpy.y"
{	PE(S_LVAL);		;
    break;}
case 369:
#line 1030 "syntaxcpy.y"
{	PE(T_COMMA);	;
    break;}
case 370:
#line 1031 "syntaxcpy.y"
{	yyval.node = yyvsp[-2].node;		;
    break;}
case 371:
#line 1032 "syntaxcpy.y"
{	unullify(yyval.node);	;
    break;}
case 372:
#line 1035 "syntaxcpy.y"
{	SM(S_FOREACH); PE2(T_FOREACH, T_LPAR);	;
    break;}
case 373:
#line 1036 "syntaxcpy.y"
{	PE(S_LVAL);				;
    break;}
case 374:
#line 1037 "syntaxcpy.y"
{	PE(T_SEMI_OR_COMMA);	;
    break;}
case 375:
#line 1038 "syntaxcpy.y"
{	PE(S_EXPR);				;
    break;}
case 376:
#line 1039 "syntaxcpy.y"
{	PE(T_RPAR);				;
    break;}
case 377:
#line 1040 "syntaxcpy.y"
{	PE(S_STMT);				;
    break;}
case 378:
#line 1041 "syntaxcpy.y"
{	if (yyvsp[-7].node)
												yyval.node = MakeNode_ForeachStmt(yyvsp[-7].node, yyvsp[-9].node, yyvsp[-5].node, yyvsp[0].node); 
											else
												yyval.node = MakeNode_ForeachStmt(yyvsp[-9].node, NIL_NODE, yyvsp[-5].node, yyvsp[0].node); 
											DPTR(yyval.node)->SetLine(yyvsp[-1].line);
											EM(S_FOREACH);	;
    break;}
case 379:
#line 1053 "syntaxcpy.y"
{ SM(S_THROW); PE2(T_THROW, S_EXPR); ;
    break;}
case 380:
#line 1055 "syntaxcpy.y"
{ EM(S_THROW); yyval.node = MakeNode_THROW(yyvsp[-1].node); ;
    break;}
case 381:
#line 1058 "syntaxcpy.y"
{ PE(S_STMT); yyval.node = MakeNode_ExceptionVar(yyvsp[0].constStr); ;
    break;}
case 382:
#line 1061 "syntaxcpy.y"
{ SM(S_TRY); PE2(T_TRY, S_STMT); ;
    break;}
case 383:
#line 1062 "syntaxcpy.y"
{ PE(T_TRAP); ;
    break;}
case 384:
#line 1063 "syntaxcpy.y"
{ PE(T_IDENT); ;
    break;}
case 385:
#line 1065 "syntaxcpy.y"
{ EM(S_TRY); yyval.node = MakeNode_Exception(yyvsp[-5].node, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1070 "syntaxcpy.y"
