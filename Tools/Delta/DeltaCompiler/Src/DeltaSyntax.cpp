
/*  A Bison parser, made from syntaxcpy.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENT	258
#define	ATTRIBUTE_IDENT	259
#define	NUMBER_CONST	260
#define	STRING_CONST	261
#define	FUNCTION	262
#define	RETURN	263
#define	ONEVENT	264
#define	IF	265
#define	ELSE	266
#define	WHILE	267
#define	FOR	268
#define	FOREACH	269
#define	NIL	270
#define	LOCAL	271
#define	USING	272
#define	AND	273
#define	NOT	274
#define	OR	275
#define	PLUSPLUS	276
#define	MINUSMINUS	277
#define	LAMBDA	278
#define	TRY	279
#define	TRAP	280
#define	THROW	281
#define	ASSERT	282
#define	TRUE	283
#define	FALSE	284
#define	BREAK	285
#define	CONTINUE	286
#define	STATIC	287
#define	CONST	288
#define	METHOD	289
#define	SELF	290
#define	ARGUMENTS	291
#define	LAMBDA_REF	292
#define	OPERATOR	293
#define	NEWSELF	294
#define	SET	295
#define	GET	296
#define	LT	297
#define	GT	298
#define	LE	299
#define	GE	300
#define	EQ	301
#define	NE	302
#define	DOT	303
#define	DOUBLE_DOT	304
#define	TRIPLE_DOT	305
#define	DOT_ASSIGN	306
#define	DOT_EQUAL	307
#define	DOT_CAST	308
#define	DOT_EQUAL_RHS	309
#define	UMINUS	310
#define	ADD	311
#define	SUB	312
#define	MUL	313
#define	DIV	314
#define	MOD	315
#define	ATTRIBUTE	316
#define	STRINGIFY	317
#define	GLOBAL_SCOPE	318
#define	ASSIGN	319
#define	ADD_A	320
#define	SUB_A	321
#define	MUL_A	322
#define	DIV_A	323
#define	MOD_A	324
#define	DOUBLE_LB	325
#define	DOUBLE_RB	326
#define	CALL	327
#define	CAST	328
#define	SEMI	329
#define	ADD_POSTFIX	330
#define	SUB_POSTFIX	331
#define	MUL_POSTFIX	332
#define	DIV_POSTFIX	333
#define	MOD_POSTFIX	334
#define	GT_POSTFIX	335
#define	LT_POSTFIX	336
#define	NE_POSTFIX	337
#define	EQ_POSTFIX	338
#define	GE_POSTFIX	339
#define	LE_POSTFIX	340
#define	PARENTHESIS	341
#define	SQUARE_BRACKETS	342

#line 1 "syntaxcpy.y"

// Delta syntax directed parsing for AST generation.
// Extended December 2009, added lambda functions.
// ScriptFigher Project.
// A. Savidis, September 2009.
//

#include <string.h>
#include <stdio.h>
#include <assert.h>

#include "DDebug.h"
#include "DeltaStdDefs.h"
#include "ASTNode.h"
#include "ASTTags.h"
#include "ASTCreationActions.h"
#include "CompilerAPI.h"
#include "DescriptiveParseErrorHandler.h"
#include "LibraryNamespace.h"

using namespace AST;

#ifndef	alloca
#define alloca malloc
#endif

#ifdef	YYPURE
#define	YYLEX_PARAM		&yylval
#else
#define	YYPURE
#endif

#define	yyparse		DeltaSyntax_yyparse
#define yylex		DeltaSyntax_yylex
#define	yydebug		DeltaSyntax_yydebug
#define	yyerror		DeltaSyntax_yyerror

extern int			DeltaSyntax_yylex (void* yylval);

static void DeltaSyntax_yyerror (const char* unused) 
	{ DescriptiveParseErrorHandler::HandleSyntaxError(); }

#define	DYNAMIC_STRING(s) \
	MakeNode_StringWithLateDestruction(ucopystr(s))


#line 48 "syntaxcpy.y"
typedef union {
	double				numberConst;
	util_ui32			line;
	char*				dynamicStr;
	const char*			constStr;
	AST::IdList*		idList;
	AST::NodeList*		nodeList;
	AST::Node*			node;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		540
#define	YYFLAG		-32768
#define	YYNTBASE	98

#define YYTRANSLATE(x) ((unsigned)(x) <= 342 ? yytranslate[x] : 306)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    72,
    73,     2,     2,    80,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    79,     2,     2,
     2,     2,    78,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    74,     2,    75,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    76,    97,    77,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     8,    10,    11,    14,    16,    19,
    21,    22,    23,    24,    32,    34,    35,    37,    39,    41,
    43,    46,    50,    53,    55,    57,    59,    61,    62,    67,
    69,    70,    72,    73,    77,    79,    80,    85,    86,    88,
    89,    94,    97,    98,   103,   105,   106,   111,   114,   115,
   118,   119,   123,   126,   129,   131,   133,   135,   137,   139,
   141,   143,   145,   147,   149,   151,   153,   155,   157,   158,
   162,   163,   167,   169,   170,   175,   178,   181,   183,   185,
   189,   192,   197,   199,   201,   203,   205,   207,   209,   211,
   213,   214,   215,   216,   224,   225,   230,   231,   236,   237,
   242,   243,   248,   249,   254,   255,   260,   261,   266,   267,
   272,   273,   278,   279,   284,   285,   290,   291,   296,   297,
   302,   303,   308,   309,   314,   315,   320,   321,   326,   327,
   332,   333,   338,   345,   348,   350,   351,   354,   357,   358,
   362,   365,   366,   370,   371,   375,   376,   380,   382,   384,
   386,   388,   390,   392,   394,   396,   398,   400,   402,   404,
   406,   408,   410,   412,   414,   416,   418,   420,   422,   424,
   426,   428,   430,   432,   434,   436,   438,   440,   442,   444,
   446,   448,   450,   452,   454,   456,   458,   460,   462,   464,
   466,   468,   470,   472,   474,   476,   478,   480,   482,   484,
   486,   488,   490,   492,   494,   496,   498,   500,   502,   505,
   507,   509,   511,   513,   516,   517,   522,   526,   528,   530,
   532,   534,   536,   538,   540,   542,   544,   546,   547,   552,
   554,   555,   560,   561,   563,   564,   569,   571,   572,   573,
   579,   581,   582,   585,   586,   587,   593,   595,   597,   600,
   605,   608,   610,   613,   617,   619,   622,   624,   625,   629,
   630,   634,   636,   638,   640,   643,   646,   649,   652,   654,
   656,   658,   660,   662,   664,   666,   668,   670,   672,   674,
   677,   680,   683,   684,   689,   690,   695,   697,   698,   701,
   705,   708,   709,   714,   716,   718,   720,   722,   723,   727,
   730,   733,   736,   737,   741,   743,   745,   747,   749,   750,
   753,   754,   760,   763,   764,   765,   766,   767,   777,   780,
   781,   786,   787,   792,   797,   800,   802,   804,   806,   808,
   810,   811,   815,   819,   820,   821,   828,   829,   830,   837,
   838,   842,   843,   847,   848,   849,   856,   858,   860,   864,
   870,   872,   877,   883,   884,   888,   892,   895,   896,   901,
   902,   907,   910,   911,   914,   917,   918,   919,   925,   927,
   928,   929,   930,   931,   932,   933,   948,   949,   954,   956,
   957,   958,   959
};

static const short yyrhs[] = {    99,
     0,     0,   102,     0,   101,   100,     0,   102,     0,     0,
   101,   141,     0,   141,     0,   102,   131,     0,   131,     0,
     0,     0,     0,   108,   105,   107,   110,   116,   106,   119,
     0,    16,     0,     0,     7,     0,     9,     0,    34,     0,
   103,     0,     3,   109,     0,    38,   111,   109,     0,    61,
   109,     0,   109,     0,   186,     0,    48,     0,    51,     0,
     0,   112,    80,   113,     3,     0,     3,     0,     0,    73,
     0,     0,    50,   115,    73,     0,    81,     0,     0,    72,
   112,   117,   114,     0,     0,    76,     0,     0,   118,   102,
   120,    77,     0,   118,    77,     0,     0,   123,   116,   122,
   124,     0,    23,     0,     0,    76,   125,   126,    77,     0,
   103,   145,     0,     0,   128,    83,     0,     0,   130,   209,
   127,     0,   103,   132,     0,   103,   133,     0,   119,     0,
   104,     0,    83,     0,   129,     0,   136,     0,   139,     0,
   277,     0,   278,     0,   292,     0,   275,     0,   266,     0,
   268,     0,   302,     0,   299,     0,     0,    27,   135,   145,
     0,     0,   137,   134,   127,     0,     8,     0,     0,   138,
   140,   145,   127,     0,   138,   127,     0,    17,   142,     0,
   143,     0,   144,     0,   210,     3,    83,     0,     3,    83,
     0,    62,     3,    83,   103,     0,   151,     0,   147,     0,
   158,     0,   165,     0,   168,     0,   174,     0,   179,     0,
     3,     0,     0,     0,     0,    33,   148,   146,   149,    64,
   150,   145,     0,     0,   211,    64,   152,   145,     0,     0,
   211,    65,   153,   145,     0,     0,   211,    67,   154,   145,
     0,     0,   211,    66,   155,   145,     0,     0,   211,    68,
   156,   145,     0,     0,   211,    69,   157,   145,     0,     0,
   145,    43,   159,   145,     0,     0,   145,    42,   160,   145,
     0,     0,   145,    45,   161,   145,     0,     0,   145,    44,
   162,   145,     0,     0,   145,    46,   163,   145,     0,     0,
   145,    47,   164,   145,     0,     0,   145,    18,   166,   145,
     0,     0,   145,    20,   167,   145,     0,     0,   145,    56,
   169,   145,     0,     0,   145,    57,   170,   145,     0,     0,
   145,    59,   171,   145,     0,     0,   145,    58,   172,   145,
     0,     0,   145,    60,   173,   145,     0,    72,   175,   176,
    79,   177,    73,     0,   145,    78,     0,   145,     0,     0,
   178,   145,     0,   211,    21,     0,     0,    21,   180,   211,
     0,   211,    22,     0,     0,    22,   181,   211,     0,     0,
    57,   182,   145,     0,     0,    19,   183,   145,     0,   184,
     0,   195,     0,   185,     0,   121,     0,     5,     0,    15,
     0,    28,     0,    29,     0,    56,     0,    57,     0,    58,
     0,    59,     0,    60,     0,    43,     0,    42,     0,    47,
     0,    46,     0,    45,     0,    44,     0,    64,     0,    84,
     0,    85,     0,    86,     0,    87,     0,    88,     0,    89,
     0,    90,     0,    91,     0,    92,     0,    93,     0,    94,
     0,    81,     0,    82,     0,    10,     0,    11,     0,     7,
     0,     8,     0,     9,     0,    12,     0,    13,     0,    14,
     0,    15,     0,    16,     0,    18,     0,    19,     0,    20,
     0,    23,     0,    24,     0,    25,     0,    26,     0,    17,
     0,    27,     0,    28,     0,    29,     0,    30,     0,    31,
     0,    32,     0,    33,     0,    34,     0,    35,     0,    36,
     0,   188,     6,     0,     6,     0,    62,     0,     3,     0,
   187,     0,   189,   190,     0,     0,   191,    48,   192,   190,
     0,   189,   210,     3,     0,   188,     0,   191,     0,   193,
     0,    35,     0,    37,     0,    39,     0,   194,     0,    36,
     0,   211,     0,   230,     0,     0,    72,   145,   196,    73,
     0,   208,     0,     0,    72,   104,   197,    73,     0,     0,
   199,     0,     0,   199,    80,   200,   204,     0,   204,     0,
     0,     0,    72,   202,   198,   203,    73,     0,    81,     0,
     0,   205,   145,     0,     0,     0,    97,   206,   145,   207,
    97,     0,    50,     0,   104,     0,   215,   201,     0,   209,
    80,   103,   145,     0,   103,   145,     0,    63,     0,     3,
    63,     0,   210,     3,    63,     0,     3,     0,   210,     3,
     0,   257,     0,     0,    32,   212,     3,     0,     0,    16,
   213,     3,     0,   224,     0,   195,     0,   195,     0,   214,
    48,     0,   214,    49,     0,   214,    74,     0,   214,    70,
     0,    51,     0,    52,     0,    53,     0,    54,     0,     3,
     0,   187,     0,   186,     0,   194,     0,   220,     0,   145,
     0,   111,     0,   216,   221,     0,   214,   222,     0,   217,
   221,     0,     0,   218,   223,   225,    75,     0,     0,   219,
   223,   226,    71,     0,    74,     0,     0,   229,    75,     0,
   227,   231,   228,     0,   227,   228,     0,     0,   231,    80,
   232,   236,     0,   236,     0,   145,     0,   234,     0,   104,
     0,     0,   235,   233,   103,     0,   235,   245,     0,   235,
   259,     0,   235,   252,     0,     0,    48,   238,   190,     0,
   186,     0,   145,     0,   237,     0,   239,     0,     0,   242,
   240,     0,     0,   243,   244,    80,   241,   103,     0,   241,
   103,     0,     0,     0,     0,     0,    76,   246,   243,   247,
    79,   248,   254,   249,    77,     0,   257,    79,     0,     0,
    48,   251,   256,    79,     0,     0,   250,   253,   255,   103,
     0,   209,    80,   103,   255,     0,   103,   255,     0,   145,
     0,   104,     0,     3,     0,   187,     0,     4,     0,     0,
    61,   258,   256,     0,   257,   260,   263,     0,     0,     0,
    76,   261,    40,   262,   255,   103,     0,     0,     0,    41,
   264,   255,   103,   265,    77,     0,     0,   267,    30,   127,
     0,     0,   269,    31,   127,     0,     0,     0,    72,   271,
   103,   145,   272,    73,     0,    10,     0,    11,     0,   273,
   270,   131,     0,   273,   270,   131,   274,   131,     0,    12,
     0,   276,   270,   103,   131,     0,   279,   281,   282,   284,
   131,     0,     0,    13,   280,    72,     0,   103,   209,   127,
     0,   103,   127,     0,     0,   283,   145,   103,   127,     0,
     0,   285,   103,   209,   286,     0,   103,   286,     0,     0,
   287,    73,     0,   103,   145,     0,     0,     0,    79,   290,
   211,   291,    80,     0,    80,     0,     0,     0,     0,     0,
     0,     0,    14,   293,    72,   294,   211,   295,   289,   296,
   288,   297,    73,   298,   103,   131,     0,     0,    26,   300,
   145,   127,     0,     3,     0,     0,     0,     0,    24,   303,
   131,   304,    25,   305,   301,   131,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   116,   119,   120,   121,   124,   125,   128,   129,   132,   133,
   136,   142,   144,   147,   150,   151,   154,   156,   158,   162,
   166,   168,   170,   172,   177,   178,   179,   182,   185,   186,
   188,   192,   194,   197,   200,   202,   205,   206,   210,   213,
   216,   218,   222,   225,   228,   234,   236,   240,   247,   249,
   251,   252,   256,   257,   258,   259,   260,   263,   264,   265,
   268,   269,   270,   271,   272,   273,   274,   275,   280,   283,
   285,   286,   292,   296,   298,   300,   306,   310,   311,   314,
   316,   320,   328,   329,   330,   331,   332,   333,   334,   337,
   341,   342,   343,   344,   347,   350,   352,   355,   357,   360,
   362,   365,   367,   370,   372,   375,   378,   381,   383,   386,
   388,   391,   393,   396,   398,   401,   403,   406,   409,   412,
   414,   417,   420,   423,   425,   428,   430,   433,   435,   438,
   440,   443,   446,   450,   454,   458,   460,   463,   466,   469,
   471,   474,   477,   479,   481,   484,   487,   489,   493,   494,
   495,   498,   499,   500,   501,   504,   505,   506,   507,   508,
   509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
   530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
   550,   551,   552,   553,   554,   555,   556,   557,   560,   562,
   566,   570,   571,   574,   576,   579,   582,   586,   588,   590,
   597,   599,   601,   603,   605,   607,   609,   611,   614,   615,
   617,   620,   625,   627,   631,   635,   636,   640,   643,   644,
   646,   650,   652,   653,   656,   658,   659,   661,   667,   671,
   673,   681,   684,   687,   691,   694,   697,   700,   703,   705,
   708,   710,   714,   718,   722,   727,   731,   735,   740,   741,
   742,   743,   746,   748,   750,   752,   756,   760,   762,   768,
   771,   776,   780,   782,   785,   787,   794,   798,   800,   803,
   806,   810,   813,   814,   818,   820,   824,   828,   831,   833,
   835,   837,   841,   844,   847,   851,   852,   853,   856,   858,
   861,   863,   865,   869,   872,   874,   876,   878,   881,   883,
   885,   889,   891,   895,   897,   901,   902,   908,   909,   912,
   914,   917,   921,   925,   928,   929,   933,   935,   938,   944,
   945,   949,   950,   954,   955,   956,   961,   962,   964,   966,
   972,   976,   982,   986,   989,   992,   994,   998,   999,  1003,
  1004,  1006,  1010,  1012,  1016,  1019,  1020,  1021,  1022,  1025,
  1026,  1027,  1028,  1029,  1030,  1031,  1042,  1044,  1048,  1051,
  1052,  1053,  1055
};

static const char * const yytname[] = {   "$","error","$undefined.","IDENT",
"ATTRIBUTE_IDENT","NUMBER_CONST","STRING_CONST","FUNCTION","RETURN","ONEVENT",
"IF","ELSE","WHILE","FOR","FOREACH","NIL","LOCAL","USING","AND","NOT","OR","PLUSPLUS",
"MINUSMINUS","LAMBDA","TRY","TRAP","THROW","ASSERT","TRUE","FALSE","BREAK","CONTINUE",
"STATIC","CONST","METHOD","SELF","ARGUMENTS","LAMBDA_REF","OPERATOR","NEWSELF",
"SET","GET","LT","GT","LE","GE","EQ","NE","DOT","DOUBLE_DOT","TRIPLE_DOT","DOT_ASSIGN",
"DOT_EQUAL","DOT_CAST","DOT_EQUAL_RHS","UMINUS","ADD","SUB","MUL","DIV","MOD",
"ATTRIBUTE","STRINGIFY","GLOBAL_SCOPE","ASSIGN","ADD_A","SUB_A","MUL_A","DIV_A",
"MOD_A","DOUBLE_LB","DOUBLE_RB","'('","')'","'['","']'","'{'","'}'","'?'","':'",
"','","CALL","CAST","SEMI","ADD_POSTFIX","SUB_POSTFIX","MUL_POSTFIX","DIV_POSTFIX",
"MOD_POSTFIX","GT_POSTFIX","LT_POSTFIX","NE_POSTFIX","EQ_POSTFIX","GE_POSTFIX",
"LE_POSTFIX","PARENTHESIS","SQUARE_BRACKETS","'|'","DeltaCode","CodeDefs","OptionalStmts",
"UsingDirectives","Stmts","LN","Function","@1","@2","FuncLinkage","FunctionClass",
"FunctionNameSuffix","FunctionName","OperatorMethod","IdentList","@3","FormalArgsSuffix",
"@4","FormalArgs","@5","CompoundOpening","Compound","@6","LambdaFunction","@7",
"LambdaPrefix","LambdaCode","@8","LambdaStmt","Semi","@9","ExpressionListStmt",
"@10","Stmt","BasicExprStmt","BasicNonExprStmt","Assertion","@11","AssertStmt",
"@12","ReturnPrefix","ReturnStmt","@13","UsingDirective","UsingSpecifications",
"UsingNamespace","UsingByteCodeLibrary","Expression","ConstId","ConstDefExpression",
"@14","@15","@16","AssignExpression","@17","@18","@19","@20","@21","@22","RelationalExpression",
"@23","@24","@25","@26","@27","@28","BooleanExpression","@29","@30","ArithmeticExpression",
"@31","@32","@33","@34","@35","TernaryExpression","TernaryCondition","TernarySelection1",
"TernarySelection2","@36","Term","@37","@38","@39","@40","Primary","ConstValue",
"OpString","KwdIdent","StringConst","Stringify","StringIdent","StringifyDottedIdents",
"@41","StringifyNamespaceIdent","StringConstUsed","FunctionAndTableObject","@42",
"@43","ActualArgumentsList","NonEmptyActualArgumentsList","@44","ActualArguments",
"@45","@46","ActualArgument","@47","@48","@49","FunctionCall","ExpressionList",
"NamespacePath","Lvalue","@50","@51","TableObject","FunctionCallObject","TableContentDot",
"TableContentBoundedDot","TableContentBracket","TableContentBoundedBracket",
"DottedOpString","DotIndex","SpecialDotIndex","BracketIndex","TableContent",
"@52","@53","TablePrefix","TableSuffix","@54","TableConstructor","TableElements",
"@55","UnindexedValue","FunctionElement","PE_elem","TableElement","DottedIdent",
"@56","OperatorIndex","IndexContent","IndexExpression","@57","IndexedList","@58",
"IndexedValues","@59","@60","@61","@62","IdentIndex","@63","IdentIndexElement",
"@64","ContentList","ContentExpression","AttributeIdent","AttributeId","@65",
"NewAttribute","AttributeSet","@66","@67","AttributeGet","@68","@69","BreakStmt",
"@70","ContinueStmt","@71","Condition","@72","@73","IfPrefix","ElsePrefix","IfStmt",
"WhilePrefix","WhileStmt","ForStmt","ForPrefix","@74","ForInitList","ForCondition",
"@75","ForSuffix","@76","ForEnd","@77","ForeachCont","ForeachValue","@78","@79",
"ForeachStmt","@80","@81","@82","@83","@84","@85","ThrowStmt","@86","ExceptionVar",
"ExceptionStmt","@87","@88","@89",""
};
#endif

static const short yyr1[] = {     0,
    98,    99,    99,    99,   100,   100,   101,   101,   102,   102,
   103,   105,   106,   104,   107,   107,   108,   108,   108,   109,
   110,   110,   110,   110,   111,   111,   111,   113,   112,   112,
   112,   114,   115,   114,   116,   117,   116,   116,   118,   120,
   119,   119,   122,   121,   123,   125,   124,   126,   128,   127,
   130,   129,   131,   131,   131,   131,   131,   132,   132,   132,
   133,   133,   133,   133,   133,   133,   133,   133,   135,   134,
   137,   136,   138,   140,   139,   139,   141,   142,   142,   143,
   143,   144,   145,   145,   145,   145,   145,   145,   145,   146,
   148,   149,   150,   147,   152,   151,   153,   151,   154,   151,
   155,   151,   156,   151,   157,   151,   159,   158,   160,   158,
   161,   158,   162,   158,   163,   158,   164,   158,   166,   165,
   167,   165,   169,   168,   170,   168,   171,   168,   172,   168,
   173,   168,   174,   175,   176,   178,   177,   179,   180,   179,
   179,   181,   179,   182,   179,   183,   179,   179,   184,   184,
   184,   185,   185,   185,   185,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   188,   188,
   189,   190,   190,   191,   192,   191,   193,   194,   194,   194,
   195,   195,   195,   195,   195,   195,   195,   196,   195,   195,
   197,   195,   198,   198,   200,   199,   199,   202,   203,   201,
   201,   205,   204,   206,   207,   204,   204,   204,   208,   209,
   209,   210,   210,   210,   211,   211,   211,   212,   211,   213,
   211,   211,   214,   215,   216,   217,   218,   219,   220,   220,
   220,   220,   221,   221,   221,   221,   222,   223,   223,   224,
   224,   224,   225,   224,   226,   224,   227,   229,   228,   230,
   230,   232,   231,   231,   233,   233,   234,   235,   236,   236,
   236,   236,   238,   237,   239,   240,   240,   240,   242,   241,
   244,   243,   243,   246,   247,   248,   249,   245,   250,   251,
   250,   253,   252,   254,   254,   255,   255,   256,   256,   257,
   258,   257,   259,   261,   262,   260,   264,   265,   263,   267,
   266,   269,   268,   271,   272,   270,   273,   274,   275,   275,
   276,   277,   278,   280,   279,   281,   281,   283,   282,   285,
   284,   284,   287,   286,   288,   290,   291,   289,   289,   293,
   294,   295,   296,   297,   298,   292,   300,   299,   301,   303,
   304,   305,   302
};

static const short yyr2[] = {     0,
     1,     0,     1,     2,     1,     0,     2,     1,     2,     1,
     0,     0,     0,     7,     1,     0,     1,     1,     1,     1,
     2,     3,     2,     1,     1,     1,     1,     0,     4,     1,
     0,     1,     0,     3,     1,     0,     4,     0,     1,     0,
     4,     2,     0,     4,     1,     0,     4,     2,     0,     2,
     0,     3,     2,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
     0,     3,     1,     0,     4,     2,     2,     1,     1,     3,
     2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
     0,     0,     0,     7,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     4,     6,     2,     1,     0,     2,     2,     0,     3,
     2,     0,     3,     0,     3,     0,     3,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
     1,     1,     1,     2,     0,     4,     3,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     0,     4,     1,
     0,     4,     0,     1,     0,     4,     1,     0,     0,     5,
     1,     0,     2,     0,     0,     5,     1,     1,     2,     4,
     2,     1,     2,     3,     1,     2,     1,     0,     3,     0,
     3,     1,     1,     1,     2,     2,     2,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     2,     2,     0,     4,     0,     4,     1,     0,     2,     3,
     2,     0,     4,     1,     1,     1,     1,     0,     3,     2,
     2,     2,     0,     3,     1,     1,     1,     1,     0,     2,
     0,     5,     2,     0,     0,     0,     0,     9,     2,     0,
     4,     0,     4,     4,     2,     1,     1,     1,     1,     1,
     0,     3,     3,     0,     0,     6,     0,     0,     6,     0,
     3,     0,     3,     0,     0,     6,     1,     1,     3,     5,
     1,     4,     5,     0,     3,     3,     2,     0,     4,     0,
     4,     2,     0,     2,     2,     0,     0,     5,     1,     0,
     0,     0,     0,     0,     0,    14,     0,     4,     1,     0,
     0,     0,     8
};

static const short yydefact[] = {    11,
    17,    18,     0,    19,    39,    57,     1,    11,    11,    51,
    56,    12,    11,    55,    10,     8,     0,     0,   252,    77,
    78,    79,     0,     4,    11,     7,     9,    73,   347,   351,
   354,   370,   380,   377,    58,    11,    53,    54,    59,     0,
    74,    60,    65,     0,    66,     0,     0,    64,     0,    61,
    62,    11,    63,    68,    67,    16,    42,    11,   253,    81,
     0,     0,     0,     0,    11,     0,     0,    49,    69,    49,
    76,     0,     0,    49,    49,   344,    11,    11,    11,   358,
    15,    11,     0,    11,   254,    80,   355,   371,   381,   255,
   330,   152,   210,   153,   260,   146,   139,   142,    45,   154,
   155,   258,    91,   221,   225,   222,   223,   144,   331,   211,
     0,   287,   151,    38,    49,    84,    83,    85,    86,    87,
    88,    89,   148,   150,   218,     0,   219,   220,   224,   149,
   230,     0,   226,     0,     0,     0,     0,     0,     0,   262,
   298,   227,   257,   251,    11,    52,     0,    72,    50,    49,
   341,   343,    11,   349,    11,   357,    49,   360,     0,    11,
     0,    11,    20,    24,    38,    41,    82,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   231,   228,     0,
    31,    35,    43,   119,   121,   109,   107,   113,   111,   115,
   117,   123,   125,   129,   127,   131,   378,   209,   212,   183,
   184,   185,   181,   182,   186,   187,   188,   189,   190,   198,
   191,   192,   193,   194,   195,   196,   197,   199,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   213,   214,     0,
   215,   256,   138,   141,    95,    97,   101,    99,   103,   105,
   265,   266,   269,   270,   271,   272,   268,   267,   277,   281,
   238,   241,   249,   273,   162,   161,   166,   165,   164,   163,
   156,   157,   158,   159,   160,   167,   179,   180,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   275,
   274,   276,   280,   282,    26,    27,   144,   279,   278,    25,
   283,   285,   291,     0,   288,     0,   294,     0,    70,    75,
     0,   348,    11,   352,   356,   363,    11,    11,    11,    21,
    11,    23,    13,     0,   263,   226,   382,   261,   147,   140,
   143,   259,    90,    92,   145,   328,   329,   332,     0,   134,
     0,   135,     0,    30,    36,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   217,
     0,     0,     0,     0,     0,     0,     0,   242,     0,     0,
   289,   292,   290,   320,   314,   297,   295,    11,   296,   300,
   322,   302,   257,   301,   250,   345,   350,   362,     0,   353,
    11,    49,    22,     0,   228,     0,     0,     0,   232,   229,
   136,    28,     0,    46,    44,   120,   122,   110,   108,   114,
   112,   116,   118,   124,   126,   130,   128,   132,   212,   216,
    96,    98,   102,   100,   104,   106,   247,   244,   248,   239,
   234,   237,     0,   284,   286,   298,     0,   309,   299,     0,
   334,   319,     0,     0,   364,   363,   359,    14,   366,   369,
   373,   379,    11,    93,     0,     0,     0,    33,    32,    37,
    11,     0,     0,   235,   243,   293,     0,    11,     0,   311,
   327,   326,    11,     0,   337,   333,   346,   361,     0,    11,
   383,     0,   133,   137,    29,     0,     0,     0,   245,   240,
   242,   321,   313,   303,   306,   305,   307,   308,   310,     0,
     0,   323,   335,     0,   226,     0,   374,    94,    34,    48,
    47,     0,   236,     0,   309,   316,     0,    11,     0,   365,
     0,   246,   304,    11,    11,    11,   338,   368,   375,   312,
     0,     0,   317,   336,     0,    11,   251,   325,    11,     0,
   339,    11,     0,   318,   376,   250,   324,     0,     0,     0
};

static const short yydefgoto[] = {   538,
     7,    24,     8,     9,    10,    11,    56,   384,    82,    12,
   164,   165,   288,   335,   447,   450,   476,   183,   393,    13,
    14,    83,   113,   336,   114,   395,   451,   478,    71,    72,
    35,    36,    15,    37,    38,    70,   147,    39,    40,    41,
    42,    73,    16,    20,    21,    22,   462,   324,   116,   175,
   388,   472,   117,   352,   353,   355,   354,   356,   357,   118,
   340,   339,   342,   341,   343,   344,   119,   337,   338,   120,
   345,   346,   348,   347,   349,   121,   180,   333,   445,   446,
   122,   172,   173,   176,   171,   123,   124,   290,   228,   125,
   126,   229,   127,   351,   128,   129,   130,   331,   329,   420,
   421,   481,   253,   358,   453,   422,   423,   452,   502,   131,
    68,   132,   133,   174,   170,   134,   135,   136,   137,   138,
   139,   249,   283,   250,   291,   140,   359,   360,   141,   293,
   294,   142,   295,   426,   368,   369,   296,   297,   487,   504,
   488,   489,   458,   459,   460,   490,   370,   428,   491,   515,
   530,   371,   427,   372,   430,   523,   463,   328,   143,   177,
   374,   433,   464,   507,   466,   494,   525,    43,    44,    45,
    46,    77,   153,   434,    47,   303,    48,    49,    50,    51,
    52,    63,    80,   158,   159,   307,   308,   378,   379,   497,
   441,   469,   509,    53,    64,   168,   386,   470,   511,   526,
    54,    66,   443,    55,    65,   169,   387
};

static const short yypact[] = {    55,
-32768,-32768,    28,-32768,-32768,-32768,-32768,    69,    66,   845,
-32768,-32768,     5,-32768,-32768,-32768,   -40,    22,-32768,-32768,
-32768,-32768,    60,-32768,   101,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     9,
    13,-32768,-32768,    62,-32768,    43,    32,-32768,    32,-32768,
-32768,-32768,-32768,-32768,-32768,   102,-32768,    78,-32768,-32768,
    53,   -26,    65,    68,   221,   746,   746,    61,-32768,-32768,
-32768,    64,   746,-32768,-32768,-32768,   221,-32768,    13,-32768,
-32768,    23,    73,-32768,-32768,-32768,-32768,-32768,-32768,    80,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   685,-32768,-32768,    -1,   917,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   145,   814,   105,-32768,-32768,   219,
-32768,   153,   193,   502,    44,   501,   501,   160,   160,-32768,
    82,-32768,-32768,   917,-32768,-32768,   746,-32768,-32768,   917,
-32768,-32768,-32768,   147,   221,-32768,    61,    89,   746,-32768,
   864,-32768,-32768,-32768,    -1,-32768,-32768,   422,   142,   165,
   746,   422,   422,   166,   167,   746,   975,-32768,   836,   746,
   168,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    80,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   169,
-32768,   110,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    34,-32768,   917,-32768,
-32768,-32768,-32768,    99,    98,   336,-32768,   746,   917,-32768,
   746,-32768,   221,-32768,-32768,-32768,   221,-32768,   917,-32768,
-32768,-32768,-32768,   685,    48,   -21,-32768,-32768,-32768,   395,
   395,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   107,-32768,
   112,   917,   108,-32768,   106,   114,   746,   746,   746,   746,
   746,   746,   746,   746,   746,   746,   746,   746,   746,   110,
  1009,   746,   746,   746,   746,   746,   746,    20,   116,   127,
-32768,-32768,-32768,-32768,-32768,-32768,   917,-32768,-32768,-32768,
-32768,-32768,    18,-32768,   917,   917,-32768,-32768,   128,-32768,
-32768,-32768,-32768,   124,   917,    19,   206,   146,-32768,-32768,
-32768,-32768,   -20,-32768,-32768,  1004,   754,   344,   344,   344,
   344,  1010,  1010,    63,    63,-32768,-32768,-32768,-32768,-32768,
   917,   917,   917,   917,   917,   917,-32768,-32768,-32768,-32768,
   133,-32768,   746,-32768,-32768,-32768,   975,-32768,-32768,   685,
-32768,-32768,   184,   154,-32768,    61,-32768,-32768,-32768,-32768,
-32768,-32768,   221,-32768,   156,   746,   223,-32768,-32768,-32768,
-32768,   746,   158,-32768,   917,-32768,   157,-32768,   593,   159,
-32768,   917,-32768,   195,-32768,-32768,-32768,-32768,   422,-32768,
-32768,   746,-32768,   917,-32768,   164,   746,   162,   917,-32768,
    33,-32768,-32768,-32768,   917,-32768,-32768,-32768,-32768,   163,
   161,-32768,-32768,   685,   183,   746,-32768,   917,-32768,   917,
-32768,   136,-32768,  1009,-32768,-32768,   685,-32768,   185,   917,
   203,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   685,   198,-32768,-32768,   202,-32768,   842,-32768,-32768,   204,
-32768,   221,   685,-32768,-32768,   842,-32768,   280,   283,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,    39,   -34,  -102,-32768,-32768,-32768,-32768,
  -152,-32768,   123,-32768,-32768,-32768,-32768,   120,-32768,-32768,
   -98,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -55,-32768,
-32768,-32768,    -9,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   279,-32768,-32768,-32768,   -32,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -133,  -131,-32768,
-32768,  -344,-32768,-32768,-32768,    -4,  -151,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -193,-32768,-32768,-32768,-32768,
   -78,     8,  -140,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   155,-32768,   151,-32768,-32768,-32768,-32768,     0,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -127,-32768,-32768,
-32768,-32768,  -204,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -456,  -125,    35,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   270,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -106,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		1070


static const short yytable[] = {    27,
   157,    67,   280,   280,   281,   281,   410,   310,   178,   312,
    23,     1,   146,     2,   148,    27,   315,    79,   151,   152,
   315,   315,    59,   156,    61,   160,     1,   316,     2,   448,
    17,   320,   321,   115,   144,    69,    85,   508,     4,     1,
   150,     2,    60,   155,    67,   327,    25,   163,    27,   167,
   516,    58,   449,     4,    -2,    89,    86,  -372,  -372,   197,
   161,     1,    62,     2,   528,    -3,     4,   154,    -6,   417,
   181,     3,     1,    75,     2,     1,   537,     2,   179,   182,
     5,    57,   417,   162,     1,     3,     2,     6,     4,    18,
    19,    74,  -233,   431,   300,   -49,   432,   439,   440,     4,
    -5,   305,     4,    76,  -157,   289,   289,     1,  -157,     2,
   298,     4,  -157,  -157,   299,   251,   418,    81,   301,  -264,
   194,   195,   196,   306,   252,   163,   309,   163,  -264,   418,
     5,   282,   282,   230,     4,    84,    87,     6,   319,    88,
   145,     5,    59,   325,     5,   304,   149,   332,     6,   166,
   198,     6,   231,     5,   -40,   232,  -288,   302,   383,   513,
     6,   -11,    90,    91,    92,    93,   317,   318,   322,   323,
   334,   350,    85,   361,    94,    95,     5,   362,    96,   389,
    97,    98,    99,     6,   390,   392,   391,   100,   101,   394,
   424,   102,   103,   366,   104,   105,   106,   425,   107,     5,
   435,   255,   256,   257,   258,   259,   260,   285,   442,   444,
   286,   178,   454,   233,   234,   261,   287,   263,   264,   265,
   109,   110,    19,   266,   465,   475,   467,     1,   473,     2,
   480,   111,   512,   112,   493,   482,   499,  -315,   501,   506,
   267,   268,   505,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,     4,   419,   235,   236,   237,   238,
   239,   240,  -367,   367,   518,   375,  -263,  -263,   376,  -263,
  -263,  -263,  -263,   381,   382,   519,   163,   529,   531,   539,
   534,   385,   540,   311,   313,   438,    26,   503,  -263,   292,
  -264,   284,  -263,   377,   363,   327,     5,   380,   456,  -264,
   514,   457,   436,     6,   396,   397,   398,   399,   400,   401,
   402,   403,   404,   405,   406,   407,   408,   315,    78,   411,
   412,   413,   414,   415,   416,   486,   437,   461,   495,   468,
   373,     0,     0,   429,     0,     0,     0,     0,    90,    91,
    92,    93,     1,     0,     2,     0,    67,     0,     0,     0,
    94,    95,     0,     0,    96,     0,    97,    98,    99,     0,
     0,     0,     0,   100,   101,     0,     0,   102,   103,     4,
   104,   105,   106,     0,   107,     0,     0,     0,   419,     0,
     0,     0,     0,   364,     0,-32768,-32768,-32768,-32768,     0,
   455,   461,   108,     0,     0,     0,   109,   110,    19,   192,
   193,   194,   195,   196,   461,     0,     0,   111,     0,   112,
     0,   365,     0,   474,     0,     0,   477,     0,   461,   479,
     0,     0,     0,   483,    90,    91,   485,    93,   492,     0,
   461,     0,     0,   471,     0,   496,   522,    95,     0,   498,
     0,     0,  -226,  -226,   500,  -226,  -226,  -226,  -226,     0,
     0,     0,     0,   102,     0,     0,   104,   105,   106,     0,
   107,     0,     0,   510,  -226,     0,  -226,     0,  -226,     0,
     0,     0,     0,   517,     0,  -226,     0,     0,     0,   520,
   521,   524,   109,   110,    19,     0,     0,     0,   527,     0,
     0,   532,     0,   314,   533,   112,     0,     0,     0,     0,
   536,     0,     0,   254,     0,     0,    93,   200,   201,   202,
   203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
   213,     0,   535,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,     0,     0,     0,
     0,     0,   255,   256,   257,   258,   259,   260,     0,   241,
   242,     0,   243,   244,   245,   246,   261,   262,   263,   264,
   265,     0,   110,     0,   266,     0,     0,     0,     0,     0,
     0,   247,     0,     0,     0,   248,     0,     0,     0,     0,
     0,   267,   268,     0,   269,   270,   271,   272,   273,   274,
   275,   276,   277,   278,   279,    90,    91,    92,    93,     0,
     0,     0,     0,     0,     0,     0,     0,    94,    95,     0,
     0,    96,     0,    97,    98,    99,     0,     0,     0,     0,
   100,   101,     0,     0,   102,   103,     0,   104,   105,   106,
     0,   107,     0,     0,   255,   256,   257,   258,   259,   260,
   484,     0,     0,     0,     0,     0,     0,     0,   261,   287,
   263,   264,   265,   109,   110,    19,   266,     0,     0,     0,
     0,     0,     0,     0,   111,     0,   112,     0,     0,     0,
     0,     0,     0,   267,   268,     0,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   279,    90,    91,    92,
    93,     1,     0,     2,     0,     0,     0,     0,     0,    94,
    95,     0,     0,    96,     0,    97,    98,    99,     0,     0,
     0,     0,   100,   101,     0,     0,   102,   103,     4,   104,
   105,   106,     0,   107,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,     0,     0,     0,   109,   110,    19,    90,    91,
    92,    93,     0,     0,     0,     0,   111,     0,   112,     0,
    94,    95,     0,     0,    96,     0,    97,    98,    99,     0,
     0,   184,     0,   100,   101,     0,     0,   102,   103,     0,
   104,   105,   106,     0,   107,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   186,   187,   188,   189,   190,
   191,     0,   108,     0,     0,     0,   109,   110,    19,   192,
   193,   194,   195,   196,     0,     0,   199,   111,     0,   112,
   200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,     0,     0,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     0,     0,    28,   184,    29,   185,    30,    31,    32,   184,
     0,   185,     0,     0,     0,     0,     0,     0,    33,     0,
    34,   -71,     0,     0,  -340,  -342,    19,   186,   187,   188,
   189,   190,   191,   186,   187,   188,   189,   190,   191,     0,
     0,   192,   193,   194,   195,   196,     0,   192,   193,   194,
   195,   196,     0,     0,     0,   255,   256,   257,   258,   259,
   260,   285,     0,   330,   286,     0,     0,     0,  -326,   261,
   262,   263,   264,   265,     0,     0,     0,   266,     0,     0,
     0,     0,     0,     0,   184,     0,   185,     0,     0,     0,
     0,     0,     0,     0,   267,   268,     0,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   186,   187,
   188,   189,   190,   191,     0,     0,     0,     0,     0,     0,
     0,     0,   192,   193,   194,   195,   196,   326,     0,     0,
     0,   200,   201,   202,   203,   204,   205,   206,   207,   208,
   209,   210,   211,   212,   213,     0,     0,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   409,     0,     0,     0,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   213,     0,
     0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   186,   187,   188,   189,   190,
   191,   186,   187,   188,   189,-32768,-32768,     0,     0,   192,
   193,   194,   195,   196,     0,   192,   193,   194,   195,   196
};

static const short yycheck[] = {     9,
    79,    36,   136,   137,   136,   137,   351,   160,   111,   162,
     3,     7,    68,     9,    70,    25,   168,    52,    74,    75,
   172,   173,    63,    79,     3,     3,     7,   168,     9,    50,
     3,   172,   173,    66,    67,    27,    63,   494,    34,     7,
    73,     9,    83,    78,    79,   177,     8,    82,    58,    84,
   507,    13,    73,    34,     0,    65,    83,    79,    80,   115,
    38,     7,     3,     9,   521,     0,    34,    77,     0,    50,
    72,    17,     7,    31,     9,     7,   533,     9,   111,    81,
    76,    77,    50,    61,     7,    17,     9,    83,    34,    62,
    63,    30,    73,    76,   150,    83,    79,    79,    80,    34,
     0,   157,    34,    72,    71,   138,   139,     7,    75,     9,
   145,    34,    79,    80,   147,    72,    97,    16,   153,    72,
    58,    59,    60,   158,    81,   160,   159,   162,    81,    97,
    76,   136,   137,   126,    34,    83,    72,    83,   171,    72,
    80,    76,    63,   176,    76,   155,    83,   180,    83,    77,
     6,    83,    48,    76,    77,     3,    75,    11,   311,   504,
    83,    73,     3,     4,     5,     6,    25,     3,     3,     3,
     3,     3,    63,    75,    15,    16,    76,    80,    19,    73,
    21,    22,    23,    83,    73,    80,    79,    28,    29,    76,
    75,    32,    33,   296,    35,    36,    37,    71,    39,    76,
    73,    42,    43,    44,    45,    46,    47,    48,     3,    64,
    51,   314,    80,    21,    22,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    41,     3,    73,     7,    73,     9,
    73,    72,    97,    74,    40,    79,    73,    79,    77,    79,
    81,    82,    80,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    34,   358,    64,    65,    66,    67,
    68,    69,    80,   296,    80,   298,    48,    49,   301,    51,
    52,    53,    54,   308,   309,    73,   311,    80,    77,     0,
    77,   314,     0,   161,   165,   384,     8,   481,    70,   139,
    72,   137,    74,   303,   295,   427,    76,   307,   426,    81,
   505,   427,   381,    83,   337,   338,   339,   340,   341,   342,
   343,   344,   345,   346,   347,   348,   349,   469,    49,   352,
   353,   354,   355,   356,   357,   459,   382,   430,   469,   436,
   296,    -1,    -1,   368,    -1,    -1,    -1,    -1,     3,     4,
     5,     6,     7,    -1,     9,    -1,   381,    -1,    -1,    -1,
    15,    16,    -1,    -1,    19,    -1,    21,    22,    23,    -1,
    -1,    -1,    -1,    28,    29,    -1,    -1,    32,    33,    34,
    35,    36,    37,    -1,    39,    -1,    -1,    -1,   481,    -1,
    -1,    -1,    -1,    48,    -1,    42,    43,    44,    45,    -1,
   423,   494,    57,    -1,    -1,    -1,    61,    62,    63,    56,
    57,    58,    59,    60,   507,    -1,    -1,    72,    -1,    74,
    -1,    76,    -1,   446,    -1,    -1,   451,    -1,   521,   452,
    -1,    -1,    -1,   458,     3,     4,   459,     6,   463,    -1,
   533,    -1,    -1,   443,    -1,   470,   515,    16,    -1,   472,
    -1,    -1,    48,    49,   477,    51,    52,    53,    54,    -1,
    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,    -1,
    39,    -1,    -1,   496,    70,    -1,    72,    -1,    74,    -1,
    -1,    -1,    -1,   508,    -1,    81,    -1,    -1,    -1,   514,
   515,   516,    61,    62,    63,    -1,    -1,    -1,   521,    -1,
    -1,   526,    -1,    72,   529,    74,    -1,    -1,    -1,    -1,
   533,    -1,    -1,     3,    -1,    -1,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,   532,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    -1,    -1,    -1,
    -1,    -1,    42,    43,    44,    45,    46,    47,    -1,    48,
    49,    -1,    51,    52,    53,    54,    56,    57,    58,    59,
    60,    -1,    62,    -1,    64,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
    -1,    81,    82,    -1,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,     3,     4,     5,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,
    -1,    19,    -1,    21,    22,    23,    -1,    -1,    -1,    -1,
    28,    29,    -1,    -1,    32,    33,    -1,    35,    36,    37,
    -1,    39,    -1,    -1,    42,    43,    44,    45,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    81,    82,    -1,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,     3,     4,     5,
     6,     7,    -1,     9,    -1,    -1,    -1,    -1,    -1,    15,
    16,    -1,    -1,    19,    -1,    21,    22,    23,    -1,    -1,
    -1,    -1,    28,    29,    -1,    -1,    32,    33,    34,    35,
    36,    37,    -1,    39,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    57,    -1,    -1,    -1,    61,    62,    63,     3,     4,
     5,     6,    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,
    15,    16,    -1,    -1,    19,    -1,    21,    22,    23,    -1,
    -1,    18,    -1,    28,    29,    -1,    -1,    32,    33,    -1,
    35,    36,    37,    -1,    39,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    45,    46,
    47,    -1,    57,    -1,    -1,    -1,    61,    62,    63,    56,
    57,    58,    59,    60,    -1,    -1,     3,    72,    -1,    74,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    -1,    -1,     8,    18,    10,    20,    12,    13,    14,    18,
    -1,    20,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
    26,    27,    -1,    -1,    30,    31,    63,    42,    43,    44,
    45,    46,    47,    42,    43,    44,    45,    46,    47,    -1,
    -1,    56,    57,    58,    59,    60,    -1,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    42,    43,    44,    45,    46,
    47,    48,    -1,    78,    51,    -1,    -1,    -1,    77,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    18,    -1,    20,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    81,    82,    -1,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    42,    43,
    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    56,    57,    58,    59,    60,     3,    -1,    -1,
    -1,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,     3,    -1,    -1,    -1,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    42,    43,    44,    45,    46,
    47,    42,    43,    44,    45,    46,    47,    -1,    -1,    56,
    57,    58,    59,    60,    -1,    56,    57,    58,    59,    60
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 116 "syntaxcpy.y"
{ SetSyntaxTree(MakeNode_Program(yyvsp[0].nodeList)); ;
    break;}
case 2:
#line 119 "syntaxcpy.y"
{ yyval.nodeList = NIL_NODELIST; ;
    break;}
case 3:
#line 120 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_CodeDefs(NIL_NODELIST, yyvsp[0].node); ;
    break;}
case 4:
#line 121 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_CodeDefs(yyvsp[-1].nodeList, yyvsp[0].node); ;
    break;}
case 5:
#line 124 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 6:
#line 125 "syntaxcpy.y"
{ yyval.node = NIL_NODE; ;
    break;}
case 7:
#line 128 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_CodeDefs(yyvsp[-1].nodeList, yyvsp[0].node); ;
    break;}
case 8:
#line 129 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_CodeDefs(NIL_NODELIST, yyvsp[0].node); ;
    break;}
case 9:
#line 132 "syntaxcpy.y"
{ yyval.node = MakeNode_Stmts(yyvsp[-1].node, yyvsp[0].node);	;
    break;}
case 10:
#line 133 "syntaxcpy.y"
{ yyval.node = MakeNode_Stmts(NIL_NODE, yyvsp[0].node); ;
    break;}
case 11:
#line 136 "syntaxcpy.y"
{ yyval.line = DeltaCompiler::GetLine(); ;
    break;}
case 12:
#line 143 "syntaxcpy.y"
{ SM(S_FUNC_(yyvsp[0].constStr)); PE2(T_FUNC_(yyvsp[0].constStr), T_LOCAL_OR_FUNCNAME); ;
    break;}
case 13:
#line 145 "syntaxcpy.y"
{ SG(S_BLOCK); ;
    break;}
case 14:
#line 147 "syntaxcpy.y"
{ EG(S_BLOCK); EM(S_FUNC_(yyvsp[-6].constStr)); yyval.node = MakeNode_Function(yyvsp[-6].constStr, yyvsp[-3].node, yyvsp[-4].constStr, yyvsp[-2].idList, yyvsp[0].node); ;
    break;}
case 15:
#line 150 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCLINKAGE_NO_EXPORT;			;
    break;}
case 16:
#line 151 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCLINKAGE_DEFAULT_EXPORT;	;
    break;}
case 17:
#line 155 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCCLASS_PROGRAMFUNCTION;	;
    break;}
case 18:
#line 157 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCCLASS_ONEVENT;			;
    break;}
case 19:
#line 159 "syntaxcpy.y"
{ yyval.constStr = AST_VALUE_FUNCCLASS_METHOD;			;
    break;}
case 20:
#line 163 "syntaxcpy.y"
{ PE(T_LPAR); SG(S_FARGS); yyval.line = yyvsp[0].line; ;
    break;}
case 21:
#line 167 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionName(yyvsp[-1].constStr); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 22:
#line 169 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionName(yyvsp[-1].constStr); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 23:
#line 171 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionName(AST_VALUE_TOSTRING_SYMBOLIC_NAME); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 24:
#line 174 "syntaxcpy.y"
{ unullify(yyval.node); ;
    break;}
case 25:
#line 177 "syntaxcpy.y"
{ yyval.constStr = yyvsp[0].constStr;							;
    break;}
case 26:
#line 178 "syntaxcpy.y"
{ yyval.constStr = DELTA_OPERATOR_OBJECT_GET;	;
    break;}
case 27:
#line 179 "syntaxcpy.y"
{ yyval.constStr = DELTA_OPERATOR_OBJECT_SET;	;
    break;}
case 28:
#line 183 "syntaxcpy.y"
{ PE2(T_COMMA, T_IDENT); ;
    break;}
case 29:
#line 185 "syntaxcpy.y"
{ yyval.idList = MakeNode_IdentList(yyvsp[-3].idList, yyvsp[0].constStr); ;
    break;}
case 30:
#line 187 "syntaxcpy.y"
{ PE(T_IDENT); yyval.idList = MakeNode_IdentList(NIL_IDLIST, yyvsp[0].constStr); ;
    break;}
case 31:
#line 189 "syntaxcpy.y"
{ unullify(yyval.idList); ;
    break;}
case 32:
#line 193 "syntaxcpy.y"
{ EG(S_FARGS); PE(T_RPAR); unullify(yyval.constStr); ;
    break;}
case 33:
#line 195 "syntaxcpy.y"
{ EG(S_FARGS); PE2(T_TDOT, T_RPAR); ;
    break;}
case 34:
#line 197 "syntaxcpy.y"
{  yyval.constStr = AST_VALUE_VARARGS_FORMAL_NAME; ;
    break;}
case 35:
#line 201 "syntaxcpy.y"
{ EG(S_FARGS); PE(T_RPAR); unullify(yyval.idList); ;
    break;}
case 36:
#line 203 "syntaxcpy.y"
{ OE(T_LPAR_OR_TDOT); ;
    break;}
case 37:
#line 205 "syntaxcpy.y"
{ yyval.idList = MakeNode_IdentList(yyvsp[-2].idList, yyvsp[0].constStr); ;
    break;}
case 38:
#line 207 "syntaxcpy.y"
{ EG(S_FARGS); PE(T_RPAR); unullify(yyval.idList); ;
    break;}
case 39:
#line 210 "syntaxcpy.y"
{ PE(T_LBC); ;
    break;}
case 40:
#line 214 "syntaxcpy.y"
{ PE(T_RBC); ;
    break;}
case 41:
#line 216 "syntaxcpy.y"
{  yyval.node = MakeNode_Compound(yyvsp[-2].node); ;
    break;}
case 42:
#line 219 "syntaxcpy.y"
{ PE(T_RBC); yyval.node = MakeNode_Compound(); ;
    break;}
case 43:
#line 223 "syntaxcpy.y"
{ PE(T_LBC); ;
    break;}
case 44:
#line 225 "syntaxcpy.y"
{ EM(S_FUNC_(AST_VALUE_FUNCCLASS_PROGRAMFUNCTION)); yyval.node = MakeNode_LambdaFunction(yyvsp[-2].idList, yyvsp[0].node); ;
    break;}
case 45:
#line 229 "syntaxcpy.y"
{	SM(S_FUNC_(AST_VALUE_FUNCCLASS_PROGRAMFUNCTION)); 
								PE2(T_LAMBDA, T_LPAR); 
								SG(S_FARGS); ;
    break;}
case 46:
#line 235 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 47:
#line 237 "syntaxcpy.y"
{ yyval.node = yyvsp[-1].node; ;
    break;}
case 48:
#line 241 "syntaxcpy.y"
{ PE(T_RBC); yyval.node = yyvsp[0].node; yyval.node->SetLine(yyvsp[-1].line); ;
    break;}
case 49:
#line 247 "syntaxcpy.y"
{ PE(T_SEMI); ;
    break;}
case 51:
#line 251 "syntaxcpy.y"
{ SM(S_STMT); ;
    break;}
case 52:
#line 253 "syntaxcpy.y"
{ yyval.node =	MakeNode_ExpressionListStmt(yyvsp[-1].nodeList); ;
    break;}
case 53:
#line 256 "syntaxcpy.y"
{ yyval.node = MakeNode_BasicExprStmt(yyvsp[0].node);		yyval.node->SetLine(yyvsp[-1].line); ;
    break;}
case 54:
#line 257 "syntaxcpy.y"
{ yyval.node = MakeNode_BasicNonExprStmt(yyvsp[0].node);	yyval.node->SetLine(yyvsp[-1].line); ;
    break;}
case 55:
#line 258 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 56:
#line 259 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionStmt(yyvsp[0].node); ;
    break;}
case 57:
#line 260 "syntaxcpy.y"
{ yyval.node = MakeNode_EmptyStmt();  ;
    break;}
case 58:
#line 263 "syntaxcpy.y"
{ EM(S_STMT); yyval.node = yyvsp[0].node; ;
    break;}
case 59:
#line 264 "syntaxcpy.y"
{ EM(S_STMT); yyval.node = yyvsp[0].node; ;
    break;}
case 60:
#line 265 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node;;
    break;}
case 61:
#line 268 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node;;
    break;}
case 62:
#line 269 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node;;
    break;}
case 63:
#line 270 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 64:
#line 271 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node;;
    break;}
case 65:
#line 272 "syntaxcpy.y"
{ EM(S_STMT); yyval.node = yyvsp[0].node; ;
    break;}
case 66:
#line 273 "syntaxcpy.y"
{ EM(S_STMT); yyval.node = yyvsp[0].node;;
    break;}
case 67:
#line 274 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 68:
#line 275 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 69:
#line 281 "syntaxcpy.y"
{ SM(S_ASSRT); SG(S_EXPR); ;
    break;}
case 70:
#line 283 "syntaxcpy.y"
{ EG(S_EXPR); PE(S_EXPR); EM(S_ASSRT); yyval.node = MakeNode_AssertStmt(yyvsp[0].node); ;
    break;}
case 71:
#line 285 "syntaxcpy.y"
{ SM(S_STMT); PE(S_ASSRT);	;
    break;}
case 72:
#line 287 "syntaxcpy.y"
{ yyval.node = yyvsp[-1].node; ;
    break;}
case 73:
#line 293 "syntaxcpy.y"
{ SM(S_RET); ;
    break;}
case 74:
#line 297 "syntaxcpy.y"
{ PE2(T_RET, S_EXPR); ;
    break;}
case 75:
#line 299 "syntaxcpy.y"
{ EM(S_RET); yyval.node = MakeNode_Return(yyvsp[-1].node); ;
    break;}
case 76:
#line 301 "syntaxcpy.y"
{ EM(S_RET); yyval.node = MakeNode_Return(); ;
    break;}
case 77:
#line 307 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 78:
#line 310 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 79:
#line 311 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 80:
#line 315 "syntaxcpy.y"
{ yyval.node = MakeNode_UsingNamespace(yyvsp[-2].idList, yyvsp[-1].constStr); ;
    break;}
case 81:
#line 317 "syntaxcpy.y"
{ yyval.node = MakeNode_UsingNamespace(yyvsp[-1].constStr); ;
    break;}
case 82:
#line 322 "syntaxcpy.y"
{ yyval.node = MakeNode_UsingByteCodeLibrary(yyvsp[-2].constStr); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 83:
#line 328 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 84:
#line 329 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 85:
#line 330 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 86:
#line 331 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 87:
#line 332 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 88:
#line 333 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 89:
#line 334 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 90:
#line 338 "syntaxcpy.y"
{ yyval.dynamicStr = DYNAMIC_STRING(yyvsp[0].constStr); ;
    break;}
case 91:
#line 341 "syntaxcpy.y"
{ SM(S_CONST); PE(T_IDENT); ;
    break;}
case 92:
#line 342 "syntaxcpy.y"
{ PE(T_ASSIGN); ;
    break;}
case 93:
#line 343 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 94:
#line 344 "syntaxcpy.y"
{ EM(S_CONST); yyval.node = MakeNode_ConstDefExpression(yyvsp[-4].dynamicStr, yyvsp[0].node); ;
    break;}
case 95:
#line 348 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_ASSIGN, S_EXPR); ;
    break;}
case 96:
#line 350 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR);  yyval.node = MakeNode_AssignExpr(yyvsp[-3].node, yyvsp[0].node); ;
    break;}
case 97:
#line 353 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_ADDA, S_EXPR); ;
    break;}
case 98:
#line 355 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_ADD_ASSIGN); ;
    break;}
case 99:
#line 358 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_MULA, S_EXPR); ;
    break;}
case 100:
#line 360 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_MUL_ASSIGN); ;
    break;}
case 101:
#line 363 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_SUBA, S_EXPR); ;
    break;}
case 102:
#line 365 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_SUB_ASSIGN); ;
    break;}
case 103:
#line 368 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_DIVA, S_EXPR); ;
    break;}
case 104:
#line 370 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_DIV_ASSIGN); ;
    break;}
case 105:
#line 373 "syntaxcpy.y"
{ SM(S_ASSIGNEXPR); PE3(S_LVAL, T_MODA, S_EXPR); ;
    break;}
case 106:
#line 375 "syntaxcpy.y"
{ EM(S_ASSIGNEXPR); yyval.node = MakeNode_AssignArithExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_MOD_ASSIGN); ;
    break;}
case 107:
#line 379 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_GT, S_EXPR); ;
    break;}
case 108:
#line 381 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_GT); ;
    break;}
case 109:
#line 384 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_LT, S_EXPR); ;
    break;}
case 110:
#line 386 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_LT); ;
    break;}
case 111:
#line 389 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_GE, S_EXPR); ;
    break;}
case 112:
#line 391 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node,AST_TAG_OP_GE); ;
    break;}
case 113:
#line 394 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_LE, S_EXPR); ;
    break;}
case 114:
#line 396 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_LE); ;
    break;}
case 115:
#line 399 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_EQ, S_EXPR); ;
    break;}
case 116:
#line 401 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_EQ); ;
    break;}
case 117:
#line 404 "syntaxcpy.y"
{ SM(S_RELAT); PE3(S_EXPR, T_NE, S_EXPR); ;
    break;}
case 118:
#line 406 "syntaxcpy.y"
{ EM(S_RELAT); yyval.node = MakeNode_RelationalExpr(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_NE); ;
    break;}
case 119:
#line 410 "syntaxcpy.y"
{ SM(S_LOGICAL); PE3(S_EXPR, T_AND, S_EXPR); ;
    break;}
case 120:
#line 412 "syntaxcpy.y"
{ EM(S_LOGICAL); yyval.node = MakeNode_ExprANDExpr(yyvsp[-3].node, yyvsp[0].node); ;
    break;}
case 121:
#line 415 "syntaxcpy.y"
{ SM(S_LOGICAL); PE3(S_EXPR, T_OR, S_EXPR); ;
    break;}
case 122:
#line 417 "syntaxcpy.y"
{ EM(S_LOGICAL); yyval.node = MakeNode_ExprORExpr(yyvsp[-3].node, yyvsp[0].node); ;
    break;}
case 123:
#line 421 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_ADD, S_EXPR); ;
    break;}
case 124:
#line 423 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_ADD); ;
    break;}
case 125:
#line 426 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_SUB, S_EXPR); ;
    break;}
case 126:
#line 428 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_SUB); ;
    break;}
case 127:
#line 431 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_DIV, S_EXPR); ;
    break;}
case 128:
#line 433 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node, yyvsp[0].node,AST_TAG_OP_DIV); ;
    break;}
case 129:
#line 436 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_MUL, S_EXPR); ;
    break;}
case 130:
#line 438 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node,  yyvsp[0].node, AST_TAG_OP_MUL); ;
    break;}
case 131:
#line 441 "syntaxcpy.y"
{ SM(S_ARITH); PE3(S_EXPR, T_MOD, S_EXPR); ;
    break;}
case 132:
#line 443 "syntaxcpy.y"
{ EM(S_ARITH); yyval.node = MakeNode_ArithmeticExpression(yyvsp[-3].node, yyvsp[0].node, AST_TAG_OP_MOD); ;
    break;}
case 133:
#line 447 "syntaxcpy.y"
{	EM(S_TERNARY); yyval.node = MakeNode_Ternary(yyvsp[-4].node, yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 134:
#line 451 "syntaxcpy.y"
{ SM(S_TERNARY); PE3(S_EXPR, T_QMARK, S_EXPR); yyval.node = yyvsp[-1].node; ;
    break;}
case 135:
#line 455 "syntaxcpy.y"
{ PE(T_COLON); yyval.node = yyvsp[0].node; ;
    break;}
case 136:
#line 458 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 137:
#line 460 "syntaxcpy.y"
{ PE(T_RPAR); yyval.node = yyvsp[0].node; ;
    break;}
case 138:
#line 464 "syntaxcpy.y"
{ yyval.node = MakeNode_TermLvalueArith(yyvsp[-1].node, AST_LVALUE_PLUSPLUS); ;
    break;}
case 139:
#line 467 "syntaxcpy.y"
{ SM(S_EXPR); PE2(T_PLUSPLUS, S_LVAL); ;
    break;}
case 140:
#line 469 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_TermLvalueArith(yyvsp[0].node, AST_PLUSPLUS_LVALUE); ;
    break;}
case 141:
#line 472 "syntaxcpy.y"
{ yyval.node = MakeNode_TermLvalueArith(yyvsp[-1].node, AST_LVALUE_MINUSMINUS); ;
    break;}
case 142:
#line 475 "syntaxcpy.y"
{ SM(S_EXPR); PE2(T_MINUSMINUS, S_LVAL); ;
    break;}
case 143:
#line 477 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_TermLvalueArith(yyvsp[0].node, AST_MINUSMINUS_LVALUE); ;
    break;}
case 144:
#line 480 "syntaxcpy.y"
{ SM(S_EXPR); PE2(T_SUB, S_EXPR); ;
    break;}
case 145:
#line 482 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_UMINUSExpression(yyvsp[0].node); ;
    break;}
case 146:
#line 485 "syntaxcpy.y"
{ SM(S_EXPR); PE2(T_NOT, S_EXPR); ;
    break;}
case 147:
#line 487 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_NOTExpression(yyvsp[0].node); ;
    break;}
case 148:
#line 490 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 149:
#line 493 "syntaxcpy.y"
{ yyval.node = MakeNode_PrimaryFunctionAndTableObject(yyvsp[0].node);	;
    break;}
case 150:
#line 494 "syntaxcpy.y"
{ yyval.node = MakeNode_PrimaryConstValue(yyvsp[0].node);				;
    break;}
case 151:
#line 495 "syntaxcpy.y"
{ yyval.node = MakeNode_PrimaryLambdaFunction(yyvsp[0].node);			;
    break;}
case 152:
#line 498 "syntaxcpy.y"
{ yyval.node = MakeNode_ConstValue(yyvsp[0].numberConst);		;
    break;}
case 153:
#line 499 "syntaxcpy.y"
{ yyval.node = MakeNode_ConstValue();		;
    break;}
case 154:
#line 500 "syntaxcpy.y"
{ yyval.node = MakeNode_ConstValue(true);	;
    break;}
case 155:
#line 501 "syntaxcpy.y"
{ yyval.node = MakeNode_ConstValue(false);	;
    break;}
case 156:
#line 504 "syntaxcpy.y"
{ yyval.constStr = "+";			;
    break;}
case 157:
#line 505 "syntaxcpy.y"
{ yyval.constStr = "-";			;
    break;}
case 158:
#line 506 "syntaxcpy.y"
{ yyval.constStr = "*";			;
    break;}
case 159:
#line 507 "syntaxcpy.y"
{ yyval.constStr = "/";			;
    break;}
case 160:
#line 508 "syntaxcpy.y"
{ yyval.constStr = "%";			;
    break;}
case 161:
#line 509 "syntaxcpy.y"
{ yyval.constStr = ">";			;
    break;}
case 162:
#line 510 "syntaxcpy.y"
{ yyval.constStr = "<";			;
    break;}
case 163:
#line 511 "syntaxcpy.y"
{ yyval.constStr = "!=";		;
    break;}
case 164:
#line 512 "syntaxcpy.y"
{ yyval.constStr = "==";		;
    break;}
case 165:
#line 513 "syntaxcpy.y"
{ yyval.constStr = ">=";		;
    break;}
case 166:
#line 514 "syntaxcpy.y"
{ yyval.constStr = "<=";		;
    break;}
case 167:
#line 515 "syntaxcpy.y"
{ yyval.constStr = "=";			;
    break;}
case 168:
#line 516 "syntaxcpy.y"
{ yyval.constStr = "+_";		;
    break;}
case 169:
#line 517 "syntaxcpy.y"
{ yyval.constStr = "-_";		;
    break;}
case 170:
#line 518 "syntaxcpy.y"
{ yyval.constStr = "*_";		;
    break;}
case 171:
#line 519 "syntaxcpy.y"
{ yyval.constStr = "/_";		;
    break;}
case 172:
#line 520 "syntaxcpy.y"
{ yyval.constStr = "%_";		;
    break;}
case 173:
#line 521 "syntaxcpy.y"
{ yyval.constStr = ">_";		;
    break;}
case 174:
#line 522 "syntaxcpy.y"
{ yyval.constStr = "<_";		;
    break;}
case 175:
#line 523 "syntaxcpy.y"
{ yyval.constStr = "!=_";		;
    break;}
case 176:
#line 524 "syntaxcpy.y"
{ yyval.constStr = "==_";		;
    break;}
case 177:
#line 525 "syntaxcpy.y"
{ yyval.constStr = ">=_";		;
    break;}
case 178:
#line 526 "syntaxcpy.y"
{ yyval.constStr = "<=_";		;
    break;}
case 179:
#line 527 "syntaxcpy.y"
{ yyval.constStr = "()";		;
    break;}
case 180:
#line 528 "syntaxcpy.y"
{ yyval.constStr = "=()";		;
    break;}
case 181:
#line 530 "syntaxcpy.y"
{ yyval.constStr = "if";		;
    break;}
case 182:
#line 531 "syntaxcpy.y"
{ yyval.constStr = "else";		;
    break;}
case 183:
#line 532 "syntaxcpy.y"
{ yyval.constStr = "function";	;
    break;}
case 184:
#line 533 "syntaxcpy.y"
{ yyval.constStr = "return";	;
    break;}
case 185:
#line 534 "syntaxcpy.y"
{ yyval.constStr = "onevent";	;
    break;}
case 186:
#line 535 "syntaxcpy.y"
{ yyval.constStr = "while";		;
    break;}
case 187:
#line 536 "syntaxcpy.y"
{ yyval.constStr = "for";		;
    break;}
case 188:
#line 537 "syntaxcpy.y"
{ yyval.constStr = "foreach";	;
    break;}
case 189:
#line 538 "syntaxcpy.y"
{ yyval.constStr = "nil";		;
    break;}
case 190:
#line 539 "syntaxcpy.y"
{ yyval.constStr = "local";		;
    break;}
case 191:
#line 540 "syntaxcpy.y"
{ yyval.constStr = "and";		;
    break;}
case 192:
#line 541 "syntaxcpy.y"
{ yyval.constStr = "not";		;
    break;}
case 193:
#line 542 "syntaxcpy.y"
{ yyval.constStr = "or";		;
    break;}
case 194:
#line 543 "syntaxcpy.y"
{ yyval.constStr = "lambda";	;
    break;}
case 195:
#line 544 "syntaxcpy.y"
{ yyval.constStr = "try";		;
    break;}
case 196:
#line 545 "syntaxcpy.y"
{ yyval.constStr = "trap";		;
    break;}
case 197:
#line 546 "syntaxcpy.y"
{ yyval.constStr = "throw";		;
    break;}
case 198:
#line 547 "syntaxcpy.y"
{ yyval.constStr = "using";		;
    break;}
case 199:
#line 548 "syntaxcpy.y"
{ yyval.constStr = "assert";	;
    break;}
case 200:
#line 549 "syntaxcpy.y"
{ yyval.constStr = "true";		;
    break;}
case 201:
#line 550 "syntaxcpy.y"
{ yyval.constStr = "false";		;
    break;}
case 202:
#line 551 "syntaxcpy.y"
{ yyval.constStr = "break";		;
    break;}
case 203:
#line 552 "syntaxcpy.y"
{ yyval.constStr = "continue";	;
    break;}
case 204:
#line 553 "syntaxcpy.y"
{ yyval.constStr = "static";	;
    break;}
case 205:
#line 554 "syntaxcpy.y"
{ yyval.constStr = "const";		;
    break;}
case 206:
#line 555 "syntaxcpy.y"
{ yyval.constStr = "method";	;
    break;}
case 207:
#line 556 "syntaxcpy.y"
{ yyval.constStr = "self";		;
    break;}
case 208:
#line 557 "syntaxcpy.y"
{ yyval.constStr = "arguments"; ;
    break;}
case 209:
#line 561 "syntaxcpy.y"
{ yyval.node = MakeNode_StringConst(yyvsp[-1].node, yyvsp[0].dynamicStr); ;
    break;}
case 210:
#line 563 "syntaxcpy.y"
{ yyval.node = MakeNode_StringConst(yyvsp[0].dynamicStr); ;
    break;}
case 211:
#line 567 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_STRINGIFY); ;
    break;}
case 212:
#line 570 "syntaxcpy.y"
{ yyval.constStr = yyvsp[0].constStr; ;
    break;}
case 213:
#line 571 "syntaxcpy.y"
{ yyval.constStr = yyvsp[0].constStr; ;
    break;}
case 214:
#line 575 "syntaxcpy.y"
{ PE(T_IDENT); yyval.node = MakeNode_StringifyDottedIdents(yyvsp[0].constStr); ;
    break;}
case 215:
#line 577 "syntaxcpy.y"
{ PE2(T_DOT, T_IDENT); ;
    break;}
case 216:
#line 579 "syntaxcpy.y"
{ yyval.node = MakeNode_StringifyDottedIdents(yyvsp[-3].node, yyvsp[0].constStr); ;
    break;}
case 217:
#line 583 "syntaxcpy.y"
{ EG(S_NAMESPACE); PE(T_IDENT); yyval.node = MakeNode_StringifyNamespaceIdent(yyvsp[-1].idList, yyvsp[0].constStr); ;
    break;}
case 218:
#line 587 "syntaxcpy.y"
{ PE(T_STRINGCONST); yyval.node = yyvsp[0].node; ;
    break;}
case 219:
#line 589 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 220:
#line 591 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 221:
#line 598 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_SELF); yyval.node = MakeNode_SELF(); ;
    break;}
case 222:
#line 600 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_LAMBDA_REF); yyval.node = MakeNode_LAMBDA_REF(); ;
    break;}
case 223:
#line 602 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_NEWSELF); yyval.node = MakeNode_NEWSELF(); ;
    break;}
case 224:
#line 604 "syntaxcpy.y"
{ EI(S_EXPR); yyval.node = yyvsp[0].node; ;
    break;}
case 225:
#line 606 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_ARGUMENTS); yyval.node = MakeNode_ARGUMENTS(); ;
    break;}
case 226:
#line 608 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 227:
#line 610 "syntaxcpy.y"
{ PE(S_TABLE); yyval.node = yyvsp[0].node; ;
    break;}
case 228:
#line 612 "syntaxcpy.y"
{ PE3(T_LPAR, S_EXPR, T_RPAR); ;
    break;}
case 229:
#line 614 "syntaxcpy.y"
{ yyval.node = MakeNode_ParenthesisedExpr(yyvsp[-2].node); ;
    break;}
case 230:
#line 616 "syntaxcpy.y"
{ PE(S_CALL); yyval.node = yyvsp[0].node; ;
    break;}
case 231:
#line 618 "syntaxcpy.y"
{ SM(S_EXPR); PE3(T_LPAR, S_FUNC, T_RPAR); ;
    break;}
case 232:
#line 620 "syntaxcpy.y"
{ EM(S_EXPR); yyval.node = MakeNode_FunctionParenthesisForm(yyvsp[-2].node); ;
    break;}
case 233:
#line 626 "syntaxcpy.y"
{ unullify(yyval.nodeList); ;
    break;}
case 234:
#line 628 "syntaxcpy.y"
{ yyval.nodeList = yyvsp[0].nodeList; ;
    break;}
case 235:
#line 633 "syntaxcpy.y"
{ PE(T_COMMA); ;
    break;}
case 236:
#line 635 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(yyvsp[-3].nodeList, yyvsp[0].node); ;
    break;}
case 237:
#line 637 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(NIL_NODELIST, yyvsp[0].node); ;
    break;}
case 238:
#line 641 "syntaxcpy.y"
{ SM(S_CALL); PE2(S_EXPR, T_LPAR); SG(S_AARGS); ;
    break;}
case 239:
#line 643 "syntaxcpy.y"
{ PE(T_RPAR); ;
    break;}
case 240:
#line 645 "syntaxcpy.y"
{ EG(S_AARGS); EM(S_CALL); yyval.nodeList = yyvsp[-2].nodeList; ;
    break;}
case 241:
#line 647 "syntaxcpy.y"
{ PE2(T_LPAR, T_RPAR); unullify(yyval.nodeList); ;
    break;}
case 242:
#line 650 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 243:
#line 652 "syntaxcpy.y"
{ yyval.node = MakeNode_Argument(yyvsp[0].node); ;
    break;}
case 244:
#line 654 "syntaxcpy.y"
{ PE2(T_BAR, S_EXPR); ;
    break;}
case 245:
#line 656 "syntaxcpy.y"
{ PE(T_BAR); ;
    break;}
case 246:
#line 658 "syntaxcpy.y"
{ yyval.node = MakeNode_LateBoundArgument(yyvsp[-2].node); ;
    break;}
case 247:
#line 660 "syntaxcpy.y"
{ PE(T_TDOT); yyval.node = MakeNode_TRIPLE_DOT(); ;
    break;}
case 248:
#line 662 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionExpression(yyvsp[0].node); ;
    break;}
case 249:
#line 668 "syntaxcpy.y"
{ yyval.node = MakeNode_FunctionCall(yyvsp[-1].node, yyvsp[0].nodeList); ;
    break;}
case 250:
#line 672 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(yyvsp[-3].nodeList, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 251:
#line 674 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(NIL_NODELIST, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 252:
#line 682 "syntaxcpy.y"
{ EI(S_EXPR); SG(S_NAMESPACE); PE2(T_GLOBAL, T_IDENT); 
								  yyval.idList = MakeNode_NamespacePath(NIL_IDLIST, DELTA_LIBRARYNAMESPACE_SEPARATOR); ;
    break;}
case 253:
#line 685 "syntaxcpy.y"
{ EI(S_EXPR); SG(S_NAMESPACE); PE3(T_IDENT, T_GLOBAL, T_IDENT); 
								  yyval.idList = MakeNode_NamespacePath(NIL_IDLIST, yyvsp[-1].constStr); ;
    break;}
case 254:
#line 688 "syntaxcpy.y"
{ PE2(T_GLOBAL, T_IDENT); yyval.idList = MakeNode_NamespacePath(yyvsp[-2].idList, yyvsp[-1].constStr); ;
    break;}
case 255:
#line 692 "syntaxcpy.y"
{ EI(S_EXPR); PE(T_IDENT); yyval.node = MakeNode_Lvalue(yyvsp[0].constStr); ;
    break;}
case 256:
#line 695 "syntaxcpy.y"
{ EG(S_NAMESPACE); yyval.node = MakeNode_NamespaceLvalue(yyvsp[-1].idList, yyvsp[0].constStr); ;
    break;}
case 257:
#line 698 "syntaxcpy.y"
{ yyval.node = MakeNode_AttrLvalue(yyvsp[0].dynamicStr); ;
    break;}
case 258:
#line 701 "syntaxcpy.y"
{ EI(S_EXPR); PE2(T_STATIC, T_IDENT); ;
    break;}
case 259:
#line 703 "syntaxcpy.y"
{ yyval.node = MakeNode_StaticLvalue(yyvsp[0].constStr); ;
    break;}
case 260:
#line 706 "syntaxcpy.y"
{ EI(S_EXPR); PE2(T_LOCAL, T_IDENT); ;
    break;}
case 261:
#line 708 "syntaxcpy.y"
{ yyval.node = MakeNode_LocalLvalue(yyvsp[0].constStr); ;
    break;}
case 262:
#line 711 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 263:
#line 715 "syntaxcpy.y"
{ yyval.node = MakeNode_TableObject(yyvsp[0].node); ;
    break;}
case 264:
#line 719 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 265:
#line 723 "syntaxcpy.y"
{ PE(T_DOT); OE(S_DOTINDEX); yyval.node = yyvsp[-1].node; ;
    break;}
case 266:
#line 728 "syntaxcpy.y"
{ PE(T_DDOT); OE(S_DOTINDEX); yyval.node = yyvsp[-1].node; ;
    break;}
case 267:
#line 732 "syntaxcpy.y"
{ PE(T_LB); OE(S_BRACKET_INDEX); yyval.node = yyvsp[-1].node; ;
    break;}
case 268:
#line 737 "syntaxcpy.y"
{ PE(T_DLB); OE(S_BRACKET_INDEX); yyval.node = yyvsp[-1].node; ;
    break;}
case 269:
#line 740 "syntaxcpy.y"
{ yyval.constStr = ".=";	;
    break;}
case 270:
#line 741 "syntaxcpy.y"
{ yyval.constStr = ".==";	;
    break;}
case 271:
#line 742 "syntaxcpy.y"
{ yyval.constStr = ".=()";	;
    break;}
case 272:
#line 743 "syntaxcpy.y"
{ yyval.constStr = ".==_";	;
    break;}
case 273:
#line 747 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexIdent(yyvsp[0].constStr); ;
    break;}
case 274:
#line 749 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexIdent(yyvsp[0].constStr); ;
    break;}
case 275:
#line 751 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexOpString(yyvsp[0].constStr); ;
    break;}
case 276:
#line 753 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexStringConst(yyvsp[0].node); ;
    break;}
case 277:
#line 757 "syntaxcpy.y"
{ yyval.node = MakeNode_DotIndexOpString(yyvsp[0].constStr+1); ;
    break;}
case 278:
#line 761 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 279:
#line 763 "syntaxcpy.y"
{ yyval.node = MakeNode_BracketIndexOperatorMethod(yyvsp[0].constStr); ;
    break;}
case 280:
#line 769 "syntaxcpy.y"
{	PE(S_DOTINDEX_(DPTR(yyvsp[0].node)->GetTag())); 
									yyval.node = MakeNode_TableContentDot(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 281:
#line 773 "syntaxcpy.y"
{	PE(S_DOTINDEX_(DPTR(yyvsp[0].node)->GetTag())); 
									yyval.node = MakeNode_TableContentDot(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 282:
#line 777 "syntaxcpy.y"
{	PE(S_DOTINDEX_(DPTR(yyvsp[0].node)->GetTag())); 
									yyval.node = MakeNode_BoundedTableContentDot(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 283:
#line 781 "syntaxcpy.y"
{ PE2(S_BRACKET_INDEX_(DPTR(yyvsp[0].node)->GetTag()), T_RB); ;
    break;}
case 284:
#line 783 "syntaxcpy.y"
{ yyval.node = MakeNode_TableContentBracket(yyvsp[-3].node, yyvsp[-2].node); ;
    break;}
case 285:
#line 786 "syntaxcpy.y"
{ PE2(S_BRACKET_INDEX_(DPTR(yyvsp[0].node)->GetTag()), T_DRB); ;
    break;}
case 286:
#line 788 "syntaxcpy.y"
{ yyval.node = MakeNode_BoundedTableContentBracket(yyvsp[-3].node, yyvsp[-2].node); ;
    break;}
case 287:
#line 795 "syntaxcpy.y"
{ SM(S_TABLE); PE2(T_LB, S_TABLIST); ;
    break;}
case 288:
#line 798 "syntaxcpy.y"
{ PE(T_RB); ;
    break;}
case 289:
#line 800 "syntaxcpy.y"
{ EM(S_TABLE); ;
    break;}
case 290:
#line 804 "syntaxcpy.y"
{ yyval.node = MakeNode_TableConstructor(yyvsp[-1].nodeList); ;
    break;}
case 291:
#line 807 "syntaxcpy.y"
{ yyval.node = MakeNode_TableConstructor(); ;
    break;}
case 292:
#line 811 "syntaxcpy.y"
{ PE(T_COMMA); ;
    break;}
case 293:
#line 813 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_TableElements(yyvsp[-3].nodeList, yyvsp[0].node); ;
    break;}
case 294:
#line 815 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_TableElements(NIL_NODELIST, yyvsp[0].node); ;
    break;}
case 295:
#line 819 "syntaxcpy.y"
{ yyval.node = MakeNode_UnindexedValue(yyvsp[0].node); ;
    break;}
case 296:
#line 821 "syntaxcpy.y"
{ yyval.node = MakeNode_UnindexedValue(yyvsp[0].node); ;
    break;}
case 297:
#line 825 "syntaxcpy.y"
{ PE(S_FUNC_(GetFuncClass(yyvsp[0].node))); yyval.node = MakeNode_FunctionExpression(yyvsp[0].node); ;
    break;}
case 298:
#line 828 "syntaxcpy.y"
{ OE(T_TABLE_ELEM); ;
    break;}
case 299:
#line 832 "syntaxcpy.y"
{ yyval.node = yyvsp[-1].node; DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 300:
#line 834 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 301:
#line 836 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 302:
#line 838 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 303:
#line 842 "syntaxcpy.y"
{ PE2(T_DOT, T_IDENT); ;
    break;}
case 304:
#line 844 "syntaxcpy.y"
{ yyval.node = MakeNode_DottedIdent(yyvsp[0].constStr); ;
    break;}
case 305:
#line 848 "syntaxcpy.y"
{ PE(T_OPINDEX); yyval.node = MakeNode_OperatorIndex(yyvsp[0].constStr); ;
    break;}
case 306:
#line 851 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 307:
#line 852 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 308:
#line 853 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 309:
#line 856 "syntaxcpy.y"
{ PE(S_INDEXEXPR); ;
    break;}
case 310:
#line 858 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 311:
#line 862 "syntaxcpy.y"
{ PE(T_COMMA); ;
    break;}
case 312:
#line 864 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(yyvsp[-4].nodeList, yyvsp[-1].node); DPTR(yyvsp[-1].node)->SetLine(yyvsp[0].line); ;
    break;}
case 313:
#line 866 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(NIL_NODELIST, yyvsp[-1].node); DPTR(yyvsp[-1].node)->SetLine(yyvsp[0].line); ;
    break;}
case 314:
#line 870 "syntaxcpy.y"
{ PE(T_LBC); SG(N_EMPTY); ;
    break;}
case 315:
#line 872 "syntaxcpy.y"
{ EG(N_EMPTY); PE2(S_INDICES, T_COLON); ;
    break;}
case 316:
#line 874 "syntaxcpy.y"
{ SG(S_ELIST); ;
    break;}
case 317:
#line 876 "syntaxcpy.y"
{ EG(S_ELIST); PE2(S_ELIST, T_RBC); ;
    break;}
case 318:
#line 878 "syntaxcpy.y"
{ yyval.node = MakeNode_IndexedValues(yyvsp[-6].nodeList, yyvsp[-2].nodeList); ;
    break;}
case 319:
#line 882 "syntaxcpy.y"
{ yyval.dynamicStr = yyvsp[-1].dynamicStr; ;
    break;}
case 320:
#line 884 "syntaxcpy.y"
{ PE(T_DOT); OE(T_IDENT_OR_KWDIDENT); ;
    break;}
case 321:
#line 886 "syntaxcpy.y"
{ yyval.dynamicStr = DYNAMIC_STRING(yyvsp[-1].constStr); PE(T_COLON); ;
    break;}
case 322:
#line 890 "syntaxcpy.y"
{ SG(S_EXPR); ;
    break;}
case 323:
#line 892 "syntaxcpy.y"
{ EG(S_EXPR); PE(S_EXPR); yyval.node = MakeNode_IdentIndexElement(yyvsp[-3].dynamicStr, yyvsp[-1].node); DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 324:
#line 896 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(yyvsp[-3].nodeList, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 325:
#line 898 "syntaxcpy.y"
{ yyval.nodeList = MakeNode_ExpressionList(NIL_NODELIST, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 326:
#line 901 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; ;
    break;}
case 327:
#line 902 "syntaxcpy.y"
{ PE(S_FUNC_(GetFuncClass(yyvsp[0].node))); yyval.node = MakeNode_FunctionExpression(yyvsp[0].node); ;
    break;}
case 328:
#line 908 "syntaxcpy.y"
{ PE(T_IDENT);		yyval.constStr = yyvsp[0].constStr; ;
    break;}
case 329:
#line 909 "syntaxcpy.y"
{ PE(T_KWDIDENT);	yyval.constStr = yyvsp[0].constStr; ;
    break;}
case 330:
#line 913 "syntaxcpy.y"
{ PE(T_ATTRIBUTEID); OE(T_LBC_OR_COLON); yyval.dynamicStr = DYNAMIC_STRING(yyvsp[0].constStr + 1); ;
    break;}
case 331:
#line 915 "syntaxcpy.y"
{ PE(T_ATTRIBUTE); OE(T_IDENT_OR_KWDIDENT); ;
    break;}
case 332:
#line 917 "syntaxcpy.y"
{ yyval.dynamicStr = DYNAMIC_STRING(yyvsp[0].constStr); ;
    break;}
case 333:
#line 922 "syntaxcpy.y"
{ yyval.node = MakeNode_NewAttribute(yyvsp[-2].dynamicStr, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 334:
#line 926 "syntaxcpy.y"
{ PE(T_SET);  ;
    break;}
case 335:
#line 928 "syntaxcpy.y"
{ SG(S_EXPR); ;
    break;}
case 336:
#line 930 "syntaxcpy.y"
{ EG(S_EXPR); PE2(S_EXPR, T_GET); yyval.node = yyvsp[-1].node; DPTR(yyval.node)->SetLine(yyvsp[0].line); ;
    break;}
case 337:
#line 934 "syntaxcpy.y"
{ SG(S_EXPR); ;
    break;}
case 338:
#line 936 "syntaxcpy.y"
{ EG(S_EXPR); PE2(S_EXPR, T_RBC); ;
    break;}
case 339:
#line 938 "syntaxcpy.y"
{  yyval.node = yyvsp[-3].node; DPTR(yyval.node)->SetLine(yyvsp[-2].line); ;
    break;}
case 340:
#line 944 "syntaxcpy.y"
{ SM(S_STMT); PE(T_BREAK);	;
    break;}
case 341:
#line 946 "syntaxcpy.y"
{ yyval.node = MakeNode_BREAK(); ;
    break;}
case 342:
#line 949 "syntaxcpy.y"
{ SM(S_STMT); PE(T_CONT);	;
    break;}
case 343:
#line 951 "syntaxcpy.y"
{ yyval.node = MakeNode_CONTINUE(); ;
    break;}
case 344:
#line 954 "syntaxcpy.y"
{ SG(S_EXPR); ;
    break;}
case 345:
#line 955 "syntaxcpy.y"
{ EG(S_EXPR); PE2(S_EXPR, T_RPAR); ;
    break;}
case 346:
#line 956 "syntaxcpy.y"
{ yyval.node = yyvsp[-2].node; DPTR(yyval.node)->SetLine(yyvsp[-3].line); ;
    break;}
case 347:
#line 961 "syntaxcpy.y"
{ SM(S_IF); PE2(T_IF, T_LPAR);  ;
    break;}
case 348:
#line 962 "syntaxcpy.y"
{ EM(S_IF); SM(S_ELSE); PE(T_ELSE); ;
    break;}
case 349:
#line 965 "syntaxcpy.y"
{ EM(S_IF);   yyval.node = MakeNode_IfStmt(yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 350:
#line 967 "syntaxcpy.y"
{ EM(S_ELSE); yyval.node = MakeNode_IfElseStmt(yyvsp[-3].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 351:
#line 973 "syntaxcpy.y"
{ SM(S_WHILE); PE2(T_WHILE, T_LPAR); ;
    break;}
case 352:
#line 977 "syntaxcpy.y"
{ EM(S_WHILE); yyval.node = MakeNode_WhileStmt(yyvsp[-2].node, yyvsp[0].node); DPTR(yyvsp[0].node)->SetLine(yyvsp[-1].line); ;
    break;}
case 353:
#line 983 "syntaxcpy.y"
{ EM(S_FOR); yyval.node = MakeNode_ForStmt(yyvsp[-3].node, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 354:
#line 987 "syntaxcpy.y"
{ SM(S_FOR); PE2(T_FOR, T_LPAR); ;
    break;}
case 355:
#line 989 "syntaxcpy.y"
{ PE(S_ELIST); ;
    break;}
case 356:
#line 993 "syntaxcpy.y"
{ yyval.node = MakeNode_ForInit(yyvsp[-1].nodeList); DPTR(yyval.node)->SetLine(yyvsp[-2].line); ;
    break;}
case 357:
#line 995 "syntaxcpy.y"
{ EI(S_ELIST); yyval.node = MakeNode_ForInit(NIL_NODELIST); DPTR(yyval.node)->SetLine(yyvsp[-1].line); ;
    break;}
case 358:
#line 998 "syntaxcpy.y"
{ PE(S_EXPR); ;
    break;}
case 359:
#line 1000 "syntaxcpy.y"
{ yyval.node = yyvsp[-2].node; DPTR(yyval.node)->SetLine(yyvsp[-1].line); ;
    break;}
case 360:
#line 1003 "syntaxcpy.y"
{ PE(S_ELIST); ;
    break;}
case 361:
#line 1005 "syntaxcpy.y"
{ yyval.node = MakeNode_ForSuffix(yyvsp[-1].nodeList); DPTR(yyval.node)->SetLine(yyvsp[-2].line); ;
    break;}
case 362:
#line 1007 "syntaxcpy.y"
{ yyval.node = MakeNode_ForSuffix(NIL_NODELIST); DPTR(yyval.node)->SetLine(yyvsp[-1].line); ;
    break;}
case 363:
#line 1010 "syntaxcpy.y"
{ PE(T_RPAR); ;
    break;}
case 365:
#line 1016 "syntaxcpy.y"
{ yyval.node = yyvsp[0].node; DPTR(yyval.node)->SetLine(yyvsp[-1].line); ;
    break;}
case 366:
#line 1019 "syntaxcpy.y"
{	PE(S_LVAL);		;
    break;}
case 367:
#line 1020 "syntaxcpy.y"
{	PE(T_COMMA);	;
    break;}
case 368:
#line 1021 "syntaxcpy.y"
{	yyval.node = yyvsp[-2].node;		;
    break;}
case 369:
#line 1022 "syntaxcpy.y"
{	unullify(yyval.node);	;
    break;}
case 370:
#line 1025 "syntaxcpy.y"
{	SM(S_FOREACH); PE2(T_FOREACH, T_LPAR);	;
    break;}
case 371:
#line 1026 "syntaxcpy.y"
{	PE(S_LVAL);				;
    break;}
case 372:
#line 1027 "syntaxcpy.y"
{	PE(T_SEMI_OR_COMMA);	;
    break;}
case 373:
#line 1028 "syntaxcpy.y"
{	PE(S_EXPR);				;
    break;}
case 374:
#line 1029 "syntaxcpy.y"
{	PE(T_RPAR);				;
    break;}
case 375:
#line 1030 "syntaxcpy.y"
{	PE(S_STMT);				;
    break;}
case 376:
#line 1031 "syntaxcpy.y"
{	if (yyvsp[-7].node)
												yyval.node = MakeNode_ForeachStmt(yyvsp[-7].node, yyvsp[-9].node, yyvsp[-5].node, yyvsp[0].node); 
											else
												yyval.node = MakeNode_ForeachStmt(yyvsp[-9].node, NIL_NODE, yyvsp[-5].node, yyvsp[0].node); 
											DPTR(yyval.node)->SetLine(yyvsp[-1].line);
											EM(S_FOREACH);	;
    break;}
case 377:
#line 1043 "syntaxcpy.y"
{ SM(S_THROW); PE2(T_THROW, S_EXPR); ;
    break;}
case 378:
#line 1045 "syntaxcpy.y"
{ EM(S_THROW); yyval.node = MakeNode_THROW(yyvsp[-1].node); ;
    break;}
case 379:
#line 1048 "syntaxcpy.y"
{ PE(S_STMT); yyval.node = MakeNode_ExceptionVar(yyvsp[0].constStr); ;
    break;}
case 380:
#line 1051 "syntaxcpy.y"
{ SM(S_TRY); PE2(T_TRY, S_STMT); ;
    break;}
case 381:
#line 1052 "syntaxcpy.y"
{ PE(T_TRAP); ;
    break;}
case 382:
#line 1053 "syntaxcpy.y"
{ PE(T_IDENT); ;
    break;}
case 383:
#line 1055 "syntaxcpy.y"
{ EM(S_TRY); yyval.node = MakeNode_Exception(yyvsp[-5].node, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1060 "syntaxcpy.y"
