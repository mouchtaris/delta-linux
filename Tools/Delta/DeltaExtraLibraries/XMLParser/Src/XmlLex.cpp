#define yy_create_buffer XmlLex_yy_create_buffer
#define yy_delete_buffer XmlLex_yy_delete_buffer
#define yy_scan_buffer XmlLex_yy_scan_buffer
#define yy_scan_string XmlLex_yy_scan_string
#define yy_scan_bytes XmlLex_yy_scan_bytes
#define yy_flex_debug XmlLex_yy_flex_debug
#define yy_init_buffer XmlLex_yy_init_buffer
#define yy_flush_buffer XmlLex_yy_flush_buffer
#define yy_load_buffer_state XmlLex_yy_load_buffer_state
#define yy_switch_to_buffer XmlLex_yy_switch_to_buffer
#define yyin XmlLex_yyin
#define yyleng XmlLex_yyleng
#define yylex XmlLex_yylex
#define yyout XmlLex_yyout
#define yyrestart XmlLex_yyrestart
#define yytext XmlLex_yytext
#define yylineno XmlLex_yylineno

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
static yyconst short int yy_acclist[171] =
    {   0,
       42,   40,   41,   18,   40,   41,   18,   41,   40,   41,
       40,   41,   40,   41,   40,   41,   40,   41,   40,   41,
       40,   41,   21,   40,   41,    1,   40,   41,    5,   40,
       41,    2,   40,   41,   40,   41,   21,   40,   41,   21,
       40,   41,   21,   40,   41,   21,   40,   41,   21,   40,
       41,   21,   40,   41,   21,   40,   41,   39,   41,   18,
       39,   41,   41,    1,   41,   41,   18,   41,   41,    8,
       41,   41,   21,   41,    1,   41,    2,   41,    6,   41,
        7,   41,   18,   23,   36,    4,   21,   17,   21,   21,
       21,   21,   20,   21,   21,   21,   21,   21,   39,   18,

       39,    3,   18,   37,   24,   32,   31,   15,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   26,   16,   19,   21,   14,
       21,   21,   20,   21,   21,   21,   21,   21,   21,   20,
       21,   21,   21,   21,   21,   22,   21,   20,   21,   21,
       34,   36,   21,   12,   34,   36,   29,    9,   38,   33,
       11,   10,   29,   13,   30,   33,   25,   35,   27,   28
    } ;

static yyconst short int yy_accept[390] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    7,
        9,   11,   13,   15,   17,   19,   21,   23,   26,   29,
       32,   35,   37,   40,   43,   46,   49,   52,   55,   58,
       60,   63,   64,   66,   67,   69,   70,   72,   73,   75,
       77,   79,   81,   83,   84,   84,   84,   84,   84,   84,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   87,   88,   88,   88,   89,   90,   91,
       92,   93,   95,   96,   97,   98,   99,  100,  102,  102,
      103,  103,  104,  104,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  106,  106,  106,  106,  107,  107,  107,  107,  107,
      108,  108,  108,  108,  108,  108,  108,  110,  111,  112,
      113,  114,  115,  116,  117,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  119,  120,  121,  122,  123,  124,  125,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  127,  127,

      127,  127,  128,  130,  132,  133,  135,  136,  137,  138,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  140,  142,  143,  144,  145,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  147,  147,  148,  150,  151,  151,  151,  151,
      151,  151,  151,  151,  152,  152,  152,  152,  152,  152,
      153,  153,  153,  153,  154,  154,  154,  154,  154,  154,
      154,  154,  155,  155,  156,  156,  156,  156,  156,  156,
      157,  157,  157,  157,  157,  158,  158,  159,  159,  159,

      160,  160,  160,  161,  161,  161,  162,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  164,
      164,  164,  164,  164,  164,  164,  164,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  166,
      166,  166,  166,  167,  167,  167,  168,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  170,  170,  170,  170,  170,  170,  171,  171
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,    9,    9,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   19,   19,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   34,   35,   34,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   34,   34,   47,   48,   34,
       49,   50,   51,   52,   53,   52,   54,   55,   56,   57,

       58,   55,   59,   60,   61,   60,   60,   62,   63,   64,
       65,   60,   60,   66,   67,   68,   60,   69,   60,   70,
       71,   60,   52,   72,   52,   52,   52,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74
    } ;

static yyconst int yy_meta[75] =
    {   0,
        1,    2,    3,    3,    3,    4,    5,    6,    4,    4,
        7,    8,    4,    9,    4,   10,   10,    4,   11,   11,
       12,   13,   14,    4,   15,   16,    4,   17,   17,   17,
       17,   17,   17,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   15,   15,
       15,   15,   19,   17,   17,   17,   17,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   20,    1,   21
    } ;

static yyconst short int yy_base[460] =
    {   0,
        0,    0,   73,   77,  100,    0, 1118, 1714,  173,  177,
       76,   56,    0, 1109,   74,   90, 1084,    0,  177, 1714,
     1714, 1083, 1068, 1068,  146, 1067,  148, 1051, 1041,    0,
      187, 1080,  181, 1714,  191,  190, 1714,  194,    0,  192,
     1714, 1714, 1714,  206, 1056, 1014, 1009, 1018,  206, 1714,
     1064, 1036, 1032, 1037, 1046,  195, 1045,  208, 1052,  219,
     1018,  245, 1714,    0,  210,  155, 1714, 1010, 1026, 1012,
     1007, 1008, 1005, 1004, 1014,  998,    0,  234,  212, 1714,
      182,  252,  223, 1714,    0, 1033,  256,    0, 1032,  242,
     1008,  979,  980,  967,  243, 1010,  984,  984,  982, 1001,

     1714,  257,    0,  993, 1714,  252,  992,  983,  280, 1714,
      284,  989,  964,  288,  293,  297,    0,  958,  957,  965,
      967,  958,  969,  959,  946,  960,  967,  284,  966,  961,
      287,  960,  936,  241,  940,  933,  912,  912,  908,  289,
        0,  952,  937,  931,  921,  944,  296,    0,  939,  929,
      322,  334,  943,  928,  338,  342,  928,  367,  268,  291,
      924,  903,  905,  915,  911,  901,  910,  912,  908,  916,
      339,    0,  915,  907,  343,    0,  906,  882,  887,  873,
      872,  888,  857,  856,  851,  889,  879,  824,  817,  820,
      813,  824,  823,  787,  371,  805,  805, 1714,  375,  379,

        0,    0,    0,    0,  285,  785,  793,  789,  793,  783,
      792,  378,  788,  339,  771,  755,  753,  755,  760,  405,
      726,  732,  720,  409,  752,  736,  733,  752,  728,  741,
      413,  417,  699,    0,  691,  689,  421,  425,  682,  691,
      693,  679,  678,  429,  658,  659,  656,  433,  688,  686,
      689, 1714,  675,  671,  670,  674,  444,  450,  684,  667,
      671,  661,  673,    0,  648,  641,  456,  379,  355, 1714,
      674,  461,  672,  465,  696,  690,  694,  688,  650,  653,
      652, 1714,  656,    0,  469,  631,  474,  479,  380, 1714,
      686,  383,  684,  485,  676,  492, 1714,  498,  683,  502,

      677,  681, 1714,  674,  218, 1714, 1714,  646,  510,  514,
      626,  520,  661,  660,  380,  657,  422,  656, 1714,  526,
      533,  537,  541,  516,  517,  518, 1714,  558,    0,    0,
      569,  651,  635,  536,    0,  593,  556,    0,  582,  577,
      551,  581,  585,  594,  557,  542,  526,  559,  527,  513,
      498,  598,  609,  383,  489,  463,  422,  615, 1714,  621,
      628,  397, 1714,  384,  576, 1714, 1714,  348,  322,  634,
       26,  576,  587,  631,  652,  656,  267,  271,  256,  254,
     1714,  660,  303,  193,  231,  165, 1714, 1714,  732,  753,
      763,  777,  796,  816,  826,  845,  866,  887,  903,  913,

      923,  937,  945,  953,  967,  975,  989,  999,  381, 1009,
     1027, 1045, 1063, 1073, 1083, 1093, 1103,  617,  631, 1122,
     1142, 1161, 1171,  656,  658, 1189, 1208, 1218, 1237, 1258,
     1278, 1288, 1307, 1328, 1347, 1364, 1383, 1404, 1420, 1434,
     1452, 1471, 1482, 1492, 1510, 1529, 1548,  627,  654,  665,
      666, 1567, 1587, 1608, 1629, 1645, 1657, 1675, 1693
    } ;

static yyconst short int yy_def[460] =
    {   0,
      388,    1,  389,  389,  388,    5,  388,  388,  388,  388,
      390,  388,  391,  392,  393,  394,  388,  395,  388,  388,
      388,  388,  395,  395,  395,  395,  395,  395,  395,  396,
      396,  392,  388,  388,  388,  397,  388,  398,  395,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  390,  388,
      399,  388,  388,  388,  400,  388,  401,  393,  402,  394,
      388,  394,  388,  395,  388,  403,  388,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  396,  396,  388,  388,
      403,  388,  397,  388,  404,  405,  398,  406,  407,  388,
      388,  388,  388,  388,  388,  408,  388,  388,  388,  400,

      388,  388,  409,  401,  388,  388,  410,  388,  388,  388,
      411,  388,  388,  412,  413,  413,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  388,  414,  388,  415,  416,
      388,  417,  388,  388,  388,  388,  388,  388,  388,  388,
      418,  408,  388,  388,  388,  409,  388,  419,  410,  388,
      411,  411,  420,  388,  421,  412,  388,  422,  423,  423,
      395,  395,  395,  395,  395,  395,  395,  395,  388,  414,
      388,  424,  415,  416,  388,  425,  417,  388,  388,  388,
      388,  388,  388,  388,  388,  418,  388,  388,  388,  419,
      388,  420,  420,  388,  421,  421,  426,  388,  422,  427,

      428,  428,  395,  395,  395,  395,  395,  395,  395,  395,
      388,  429,  424,  430,  425,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  421,
      427,  428,  395,  395,  395,  395,  395,  395,  388,  388,
      388,  388,  388,  431,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  395,  395,  395,  388,  388,  388,  388,
      388,  388,  388,  432,  388,  388,  388,  433,  434,  388,
      388,  388,  388,  395,  435,  436,  437,  438,  388,  388,
      388,  388,  388,  432,  388,  388,  388,  388,  433,  388,
      439,  434,  440,  388,  388,  441,  388,  388,  435,  388,

      436,  437,  388,  438,  442,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  443,  388,  444,  388,  441,
      445,  446,  388,  442,  442,  447,  388,  388,  448,  449,
      388,  388,  388,  388,  450,  443,  388,  451,  444,  388,
      388,  445,  446,  452,  453,  454,  442,  442,  455,  456,
      457,  388,  388,  388,  388,  450,  451,  388,  388,  452,
      458,  453,  388,  454,  442,  388,  388,  456,  457,  388,
      388,  388,  388,  388,  458,  459,  388,  388,  388,  388,
      388,  459,  388,  388,  388,  388,  388,    0,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388
    } ;

static yyconst short int yy_nxt[1789] =
    {   0,
        8,    9,   10,    9,    9,    8,   11,   12,    8,   13,
       14,   15,   16,    8,    8,    8,    8,   17,    8,    8,
       18,    8,   19,   20,   21,   22,    8,   23,   18,   24,
       18,   25,   18,   18,   26,   18,   18,   18,   27,   18,
       28,   18,   18,   29,   18,   18,   18,   18,    8,    8,
        8,    8,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,    8,    8,    8,   31,   31,   31,   31,   31,   31,
       31,   31,   50,   32,   59,   50,   51,   32,   52,  377,
       53,   60,   60,   60,   60,   33,  378,   61,   54,   33,

       34,   35,   35,   35,   35,   34,   36,   34,   34,   37,
       32,   38,   34,   34,   34,   34,   34,   34,   34,   34,
       39,   34,   40,   34,   41,   34,   34,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   42,   34,
       43,   34,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   34,   34,   34,   44,   44,   44,   44,   44,   44,
       44,   44,   65,   70,   71,   73,   79,   74,   78,   78,
       78,   78,   82,   82,   82,   82,   84,   90,   80,   85,

       86,  115,   66,   88,   89,   84,   81,   44,   44,   44,
       44,   45,   50,  102,  102,   45,   51,   81,   59,   50,
       60,   60,   60,   60,  116,  112,   61,  112,  115,   84,
       46,  385,   85,   86,   46,   78,   78,   78,   78,   47,
      113,   48,  387,   47,   45,   48,  109,  109,  109,  109,
      325,  115,  388,   82,   82,   82,   82,  112,  110,  383,
      126,  140,  140,   46,  103,   88,   89,   84,  326,  133,
      147,  147,   47,  134,   48,  102,  102,  179,  105,  180,
      135,  109,  109,  109,  109,  151,  151,  151,  151,  155,
      155,  155,  155,  110,  155,  155,  155,  155,  155,  155,

      155,  155,  171,  171,  201,  175,  175,  140,  140,  387,
       49,  386,  141,  157,  147,  147,  111,   58,  157,  233,
      385,  148,  157,  151,  151,  151,  151,  201,  384,  201,
      159,  383,  234,  367,  159,  109,  109,  109,  109,  195,
      195,  195,  195,  155,  155,  155,  155,  110,   88,   89,
       84,  111,  202,  172,  367,  159,  176,  171,  171,  160,
      212,  175,  175,  197,  214,  293,  290,  157,  155,  155,
      155,  155,  195,  195,  195,  195,  155,  155,  155,  155,
      155,  155,  155,  155,   84,  290,  290,   85,   86,  291,
      291,  146,  157,  293,  290,  363,  197,  146,  334,  334,

      157,  373,  373,  363,  157,  111,  244,  244,  244,  244,
      248,  248,  248,  248,  155,  155,  155,  155,  155,  155,
      155,  155,  257,  257,  257,  257,  258,  258,  258,  258,
      244,  244,  244,  244,  248,  248,  248,  248,  157,  268,
      337,  337,  157,  292,  269,  257,  257,  257,  257,  335,
      275,  258,  258,  258,  258,  276,  277,  287,  287,  287,
      287,  278,  294,  294,  294,  294,  298,  298,  298,  298,
      309,  309,  309,  309,  295,  287,  287,  287,  287,  288,
      312,  312,  312,  312,  289,  313,  294,  294,  294,  294,
      314,  338,  310,  320,  320,  320,  320,  288,  295,  298,

      298,  298,  298,  323,  323,  323,  323,  374,  374,  367,
      322,  309,  309,  309,  309,  328,  328,  328,  328,  367,
      329,  312,  312,  312,  312,  330,  313,  320,  320,  320,
      320,  314,  296,  310,  340,  340,  340,  340,  343,  343,
      343,  343,  323,  323,  323,  323,  341,  345,  325,  325,
      348,  366,  346,  363,  334,  334,  296,  289,  325,  328,
      328,  328,  328,  363,  329,  319,  326,  326,  349,  330,
      352,  352,  352,  352,  337,  337,  326,  292,  340,  340,
      340,  340,  340,  340,  340,  340,  343,  343,  343,  343,
      341,  325,  353,  381,  341,  358,  358,  358,  358,  352,

      352,  352,  352,  292,  296,  373,  373,  359,  325,  326,
      370,  370,  370,  370,  289,  371,  358,  358,  358,  358,
      372,  353,  358,  358,  358,  358,  326,  186,  359,  375,
      375,  375,  375,  186,  359,  370,  370,  370,  370,  379,
      371,  190,  381,  350,  350,  372,  380,  190,  296,  374,
      374,  355,  296,  375,  375,  375,  375,  358,  358,  358,
      358,  358,  358,  358,  358,  361,  213,  354,  215,  359,
      351,  351,  213,  359,  215,  356,  357,  292,  289,  333,
      332,  356,  357,  331,  327,  303,  361,  303,  300,  300,
      319,  317,  361,  315,  311,  308,  307,  306,  305,  303,

      303,  300,  300,  297,  270,  286,  285,  283,  282,  281,
      280,  279,  274,  234,  234,  273,  272,  271,  270,  267,
      266,  265,  263,  262,  261,  260,  259,  361,  256,  255,
      254,  361,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,  197,   49,   49,   49,
       49,   49,   49,   49,   55,  253,  252,  251,  250,   55,
       55,   55,   57,  249,  247,  246,  245,  243,   57,  242,
      241,  240,  214,   57,   57,   57,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,  212,
       58,   58,   58,   58,   58,   58,   58,   62,   62,  239,
      238,   62,  237,  236,  235,   62,   62,   62,  234,  198,
      197,  229,   62,   62,   62,   64,   64,   64,  228,  193,
      227,   58,   64,   64,   64,   77,   77,   77,   77,   77,
       77,  226,   77,   77,   77,   77,   77,   77,  225,   77,
       77,   77,   77,   77,   77,   77,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   96,  224,
       49,  223,  222,  221,   96,  220,  219,  218,  217,   96,
       96,   96,  100,  100,  100,  100,  216,   87,   87,  100,
      100,  100,  104,  104,  104,  104,   83,   83,  211,  104,
      104,  104,  107,  210,  209,  208,  207,  206,  107,  205,
      204,  203,  198,  107,  107,  107,  114,  194,  193,  191,
       58,  114,  114,  114,  127,  105,  189,  188,  187,  127,
      127,  127,  129,   49,  185,  184,  183,  182,  129,  181,
      178,   87,   87,  129,  129,  129,  130,   83,   83,  169,
      168,  130,  130,  130,  132,  167,  166,  165,  164,  163,

      132,  162,  161,  154,  153,  132,  132,  132,  142,  142,
      142,  142,  150,   58,  105,  142,  142,  142,  149,  149,
      149,  149,  101,  145,  144,  149,  149,  149,  152,  152,
      143,   49,  139,  138,  137,  136,  152,  152,  152,  131,
      128,  125,  124,  152,  152,  152,  156,  156,  123,  122,
      121,  120,  119,  118,  156,  156,  156,  117,  108,  106,
      156,  156,  156,  156,  158,  158,  105,  101,   99,   98,
       97,   95,  158,  158,  158,   94,   93,   92,  158,  158,
      158,  158,  170,  170,  170,  170,   91,   56,   76,  170,
      170,  170,  173,  173,  173,  173,   75,   72,   69,  173,

      173,  173,  174,  174,  174,  174,   68,   67,   63,  174,
      174,  174,  177,  177,  177,  177,   56,  388,  388,  177,
      177,  177,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  199,  199,  388,  388,  388,  388,  388,  388,
      199,  199,  199,  388,  388,  388,  199,  199,  199,  199,
      200,  200,  200,  388,  388,  388,  388,  200,  200,  200,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  231,
      231,  388,  388,  388,  388,  388,  388,  231,  231,  231,
      388,  388,  388,  231,  231,  231,  231,  232,  232,  232,
      388,  388,  388,  388,  232,  232,  232,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,  264,
      264,  388,  388,  388,  388,  388,  388,  388,  388,  264,
      388,  388,  388,  388,  264,  264,  264,  284,  284,  284,

      388,  388,  388,  388,  284,  284,  284,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      388,  289,  289,  289,  289,  289,  289,  289,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  388,  292,  292,  292,  292,  292,  292,  292,  299,
      299,  299,  299,  388,  299,  299,  299,  299,  299,  299,
      388,  388,  299,  299,  299,  299,  301,  301,  388,  301,
      388,  301,  301,  301,  301,  301,  301,  388,  388,  301,
      301,  301,  301,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  316,  388,  388,  388,  388,
      388,  316,  388,  388,  388,  388,  316,  316,  316,  318,
      388,  388,  388,  388,  388,  318,  388,  388,  388,  388,
      318,  318,  318,  321,  321,  388,  388,  388,  388,  388,
      388,  388,  388,  321,  388,  388,  388,  388,  321,  321,
      321,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  336,  336,  336,  336,  388,  388,  388,  336,  336,

      336,  339,  339,  339,  339,  388,  388,  388,  339,  339,
      339,  342,  342,  388,  388,  388,  388,  388,  342,  342,
      342,  342,  388,  388,  388,  388,  342,  342,  342,  342,
      344,  344,  388,  388,  388,  388,  388,  388,  388,  388,
      344,  388,  388,  388,  388,  344,  344,  344,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  360,  360,
      388,  388,  388,  388,  388,  360,  360,  360,  360,  388,
      388,  388,  388,  360,  360,  360,  360,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  368,
      388,  388,  388,  388,  368,  368,  388,  388,  388,  388,
      388,  368,  368,  368,  369,  388,  369,  369,  388,  388,
      388,  388,  388,  369,  369,  369,  376,  376,  388,  388,
      388,  388,  388,  388,  388,  388,  376,  388,  388,  388,
      388,  376,  376,  376,  382,  382,  388,  388,  388,  388,

      388,  382,  382,  382,  382,  388,  388,  388,  388,  382,
      382,  382,  382,    7,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388
    } ;

static yyconst short int yy_chk[1789] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    4,    4,
        4,    4,   11,    3,   15,   15,   11,    4,   12,  371,
       12,   16,   16,   16,   16,    3,  371,   16,   12,    4,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,    9,    9,   10,   10,
       10,   10,   19,   25,   25,   27,   33,   27,   31,   31,
       31,   31,   35,   35,   35,   35,   36,   40,   33,   36,

       36,   66,   19,   38,   38,   38,   33,   44,   44,   44,
       44,    9,   49,   56,   56,   10,   49,   40,   58,   58,
       60,   60,   60,   60,   66,   65,   60,   79,   81,   83,
        9,  386,   83,   83,   10,   78,   78,   78,   78,    9,
       65,    9,  385,   10,   44,   10,   62,   62,   62,   62,
      305,   81,   62,   82,   82,   82,   82,   90,   62,  384,
       79,   95,   95,   44,   56,   87,   87,   87,  305,   90,
      106,  106,   44,   90,   44,  102,  102,  134,  102,  134,
       90,  109,  109,  109,  109,  111,  111,  111,  111,  114,
      114,  114,  114,  109,  115,  115,  115,  115,  116,  116,

      116,  116,  128,  128,  159,  131,  131,  140,  140,  383,
      140,  380,   95,  114,  147,  147,   62,  147,  115,  205,
      379,  106,  116,  151,  151,  151,  151,  160,  378,  159,
      115,  377,  205,  369,  116,  152,  152,  152,  152,  155,
      155,  155,  155,  156,  156,  156,  156,  152,  214,  214,
      214,  109,  160,  128,  368,  115,  131,  171,  171,  116,
      171,  175,  175,  155,  175,  269,  269,  156,  158,  158,
      158,  158,  195,  195,  195,  195,  199,  199,  199,  199,
      200,  200,  200,  200,  212,  268,  289,  212,  212,  268,
      289,  409,  158,  292,  292,  364,  195,  409,  315,  315,

      199,  354,  354,  362,  200,  152,  220,  220,  220,  220,
      224,  224,  224,  224,  231,  231,  231,  231,  232,  232,
      232,  232,  237,  237,  237,  237,  238,  238,  238,  238,
      244,  244,  244,  244,  248,  248,  248,  248,  231,  248,
      317,  317,  232,  357,  248,  257,  257,  257,  257,  315,
      257,  258,  258,  258,  258,  257,  258,  267,  267,  267,
      267,  258,  272,  272,  272,  272,  274,  274,  274,  274,
      285,  285,  285,  285,  272,  287,  287,  287,  287,  267,
      288,  288,  288,  288,  356,  288,  294,  294,  294,  294,
      288,  317,  285,  296,  296,  296,  296,  287,  294,  298,

      298,  298,  298,  300,  300,  300,  300,  355,  355,  351,
      298,  309,  309,  309,  309,  310,  310,  310,  310,  350,
      310,  312,  312,  312,  312,  310,  312,  320,  320,  320,
      320,  312,  272,  309,  321,  321,  321,  321,  322,  322,
      322,  322,  323,  323,  323,  323,  321,  323,  324,  325,
      326,  349,  323,  346,  334,  334,  294,  334,  347,  328,
      328,  328,  328,  345,  328,  341,  324,  325,  326,  328,
      331,  331,  331,  331,  337,  337,  347,  337,  340,  340,
      340,  340,  342,  342,  342,  342,  343,  343,  343,  343,
      340,  348,  331,  373,  342,  344,  344,  344,  344,  352,

      352,  352,  352,  339,  321,  373,  373,  344,  365,  348,
      353,  353,  353,  353,  336,  353,  358,  358,  358,  358,
      353,  352,  360,  360,  360,  360,  365,  418,  358,  361,
      361,  361,  361,  418,  360,  370,  370,  370,  370,  372,
      370,  419,  374,  448,  448,  370,  372,  419,  340,  374,
      374,  333,  342,  375,  375,  375,  375,  376,  376,  376,
      376,  382,  382,  382,  382,  344,  424,  332,  425,  376,
      449,  449,  424,  382,  425,  450,  451,  318,  316,  314,
      313,  450,  451,  311,  308,  304,  358,  302,  301,  299,
      295,  293,  360,  291,  286,  283,  281,  280,  279,  278,

      277,  276,  275,  273,  271,  266,  265,  263,  262,  261,
      260,  259,  256,  255,  254,  253,  251,  250,  249,  247,
      246,  245,  243,  242,  241,  240,  239,  376,  236,  235,
      233,  382,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  230,  390,  390,  390,
      390,  390,  390,  390,  391,  229,  228,  227,  226,  391,
      391,  391,  392,  225,  223,  222,  221,  219,  392,  218,
      217,  216,  215,  392,  392,  392,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  213,
      393,  393,  393,  393,  393,  393,  393,  394,  394,  211,
      210,  394,  209,  208,  207,  394,  394,  394,  206,  197,
      196,  194,  394,  394,  394,  395,  395,  395,  193,  192,
      191,  190,  395,  395,  395,  396,  396,  396,  396,  396,
      396,  189,  396,  396,  396,  396,  396,  396,  188,  396,
      396,  396,  396,  396,  396,  396,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  399,  187,
      186,  185,  184,  183,  399,  182,  181,  180,  179,  399,
      399,  399,  400,  400,  400,  400,  178,  177,  174,  400,
      400,  400,  401,  401,  401,  401,  173,  170,  169,  401,
      401,  401,  402,  168,  167,  166,  165,  164,  402,  163,
      162,  161,  157,  402,  402,  402,  403,  154,  153,  150,
      149,  403,  403,  403,  404,  146,  145,  144,  143,  404,
      404,  404,  405,  142,  139,  138,  137,  136,  405,  135,
      133,  132,  130,  405,  405,  405,  406,  129,  127,  126,
      125,  406,  406,  406,  407,  124,  123,  122,  121,  120,

      407,  119,  118,  113,  112,  407,  407,  407,  408,  408,
      408,  408,  108,  107,  104,  408,  408,  408,  410,  410,
      410,  410,  100,   99,   98,  410,  410,  410,  411,  411,
       97,   96,   94,   93,   92,   91,  411,  411,  411,   89,
       86,   76,   75,  411,  411,  411,  412,  412,   74,   73,
       72,   71,   70,   69,  412,  412,  412,   68,   61,   59,
      412,  412,  412,  412,  413,  413,   57,   55,   54,   53,
       52,   51,  413,  413,  413,   48,   47,   46,  413,  413,
      413,  413,  414,  414,  414,  414,   45,   32,   29,  414,
      414,  414,  415,  415,  415,  415,   28,   26,   24,  415,

      415,  415,  416,  416,  416,  416,   23,   22,   17,  416,
      416,  416,  417,  417,  417,  417,   14,    7,    0,  417,
      417,  417,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  422,  422,    0,    0,    0,    0,    0,    0,
      422,  422,  422,    0,    0,    0,  422,  422,  422,  422,
      423,  423,  423,    0,    0,    0,    0,  423,  423,  423,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  426,  426,  426,  426,  426,  426,  426,  426,  427,
      427,    0,    0,    0,    0,    0,    0,  427,  427,  427,
        0,    0,    0,  427,  427,  427,  427,  428,  428,  428,
        0,    0,    0,    0,  428,  428,  428,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  431,
      431,    0,    0,    0,    0,    0,    0,    0,    0,  431,
        0,    0,    0,    0,  431,  431,  431,  432,  432,  432,

        0,    0,    0,    0,  432,  432,  432,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
        0,  433,  433,  433,  433,  433,  433,  433,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,    0,  434,  434,  434,  434,  434,  434,  434,  435,
      435,  435,  435,    0,  435,  435,  435,  435,  435,  435,
        0,    0,  435,  435,  435,  435,  436,  436,    0,  436,
        0,  436,  436,  436,  436,  436,  436,    0,    0,  436,
      436,  436,  436,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  439,    0,    0,    0,    0,
        0,  439,    0,    0,    0,    0,  439,  439,  439,  440,
        0,    0,    0,    0,    0,  440,    0,    0,    0,    0,
      440,  440,  440,  441,  441,    0,    0,    0,    0,    0,
        0,    0,    0,  441,    0,    0,    0,    0,  441,  441,
      441,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  443,  443,  443,  443,    0,    0,    0,  443,  443,

      443,  444,  444,  444,  444,    0,    0,    0,  444,  444,
      444,  445,  445,    0,    0,    0,    0,    0,  445,  445,
      445,  445,    0,    0,    0,    0,  445,  445,  445,  445,
      446,  446,    0,    0,    0,    0,    0,    0,    0,    0,
      446,    0,    0,    0,    0,  446,  446,  446,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  452,  452,
        0,    0,    0,    0,    0,  452,  452,  452,  452,    0,
        0,    0,    0,  452,  452,  452,  452,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  453,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  456,
        0,    0,    0,    0,  456,  456,    0,    0,    0,    0,
        0,  456,  456,  456,  457,    0,  457,  457,    0,    0,
        0,    0,    0,  457,  457,  457,  458,  458,    0,    0,
        0,    0,    0,    0,    0,    0,  458,    0,    0,    0,
        0,  458,  458,  458,  459,  459,    0,    0,    0,    0,

        0,  459,  459,  459,  459,    0,    0,    0,    0,  459,
      459,  459,  459,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "..\\XmlLex.l"
#define INITIAL 0
/*
 * XML_Lex.l -- The lex file used to create the main lexical analyzer
 */
#line 6 "..\\XmlLex.l"
	#include <iostream>
	#include <string>
	#include "DeltaObject.h"
	#include "DeltaValue.h"
	#include "TagValue.h"
	#include "XmlElement.h"
	#include "XmlParser.h"
	#include "XmlLoaderAPI.h"
	#include "XmlLoaderErrorMsg.h"

	#define	YY_NEVER_INTERACTIVE 1

	static void* bufferState = (void*) 0;

	void XmlLoaderInitialiseScannerFromString (const char* str) {
		bufferState = yy_scan_string(str);
	}

	void XmlLoaderCleanUpScannerFromString (void) {
		DASSERT(bufferState);
		yy_flush_buffer((YY_BUFFER_STATE) bufferState);
		yy_delete_buffer((YY_BUFFER_STATE) bufferState);
		bufferState = (void*) 0;
	}

	static int finished_prolog = 0;
	static unsigned depth = 0;
	static int check_chardata(char *);
	static char *substring(char *, int, int);
/* Flex options */
/*Start Conditions*/
#define ELEMENT 1

#define DECL 2

/* Flex macros */
/*Must not contain sub-string ']]>'. Check and if it does throw an error.*/
/*Two consecutive dashes (--) may not appear anywhere in the text of the comment. */
#line 991 "lex.XmlLex_yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 95 "..\\XmlLex.l"


#line 1145 "lex.XmlLex_yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 389 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1714 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 97 "..\\XmlLex.l"
{
								finished_prolog = 1;
								++depth;
								BEGIN(INITIAL);
								return LT;
							}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 103 "..\\XmlLex.l"
{
								if(finished_prolog && depth != 0) {
									BEGIN(ELEMENT);
								} else if (!finished_prolog) {
									--depth;
									if (depth == 0) {
										BEGIN(INITIAL);
									}
								}
								return GT;
							}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 114 "..\\XmlLex.l"
{
								--depth;
								BEGIN(INITIAL);
								return LTSLASH;
							}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 119 "..\\XmlLex.l"
{
								--depth;
								if(depth != 0) {
									BEGIN(ELEMENT);
								}
								return SLASHGT;
							}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "..\\XmlLex.l"
{ return EQ; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 127 "..\\XmlLex.l"
{ return LBRACKET; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 128 "..\\XmlLex.l"
{ return RBRACKET; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 129 "..\\XmlLex.l"
{ return PERCENT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 130 "..\\XmlLex.l"
{ BEGIN(DECL); ++depth; return DOCTYPE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 131 "..\\XmlLex.l"
{ ++depth; return ELEMENTDECL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 132 "..\\XmlLex.l"
{ ++depth; return ATTLIST; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 133 "..\\XmlLex.l"
{ ++depth; return ENTITY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 134 "..\\XmlLex.l"
{ ++depth; return NOTATION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 135 "..\\XmlLex.l"
{ return EMPTY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 136 "..\\XmlLex.l"
{ return ANY; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 137 "..\\XmlLex.l"
{ return LTQMXML; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "..\\XmlLex.l"
{ return QMGT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "..\\XmlLex.l"
{ XmlLoaderAPI::SetLine(yylineno); return S; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "..\\XmlLex.l"
{ return STRINGTYPE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 141 "..\\XmlLex.l"
{ return TOKENIZEDTYPE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 142 "..\\XmlLex.l"
{
								yylval.strValue = DNEWCLASS(std::string, (yytext));
								return NAME;
							}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "..\\XmlLex.l"
{ return COMMENT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 147 "..\\XmlLex.l"
{
								yytext = substring(yytext, 1, 1);
								yylval.strValue = DNEWCLASS(std::string, (yytext));
								return ATTVALUE;
							}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "..\\XmlLex.l"
{ return PEREFERENCE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 153 "..\\XmlLex.l"
{
								yytext = substring(yytext, 9, 3);
								yylval.strValue = DNEWCLASS(std::string, (yytext));
								return CDSECT;
							}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 158 "..\\XmlLex.l"
{ return PI; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 159 "..\\XmlLex.l"
{ return VERSIONINFO; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 160 "..\\XmlLex.l"
{ return SDDECL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 161 "..\\XmlLex.l"
{ return MIXED; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 162 "..\\XmlLex.l"
{ return NOTATIONTYPE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 163 "..\\XmlLex.l"
{ return ENUMERATION; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 164 "..\\XmlLex.l"
{
								yytext = substring(yytext, 1, 1);
								yylval.strValue = DNEWCLASS(std::string, (yytext));//new std::string(yytext);
								return REFERENCE;
							}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "..\\XmlLex.l"
{ return EXTERNALID; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "..\\XmlLex.l"
{ return NDATADECL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "..\\XmlLex.l"
{ return ENCODINGDECL; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "..\\XmlLex.l"
{ return DEFAULTDECL; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "..\\XmlLex.l"
{
								yytext = substring(yytext, 1, 1);
								yylval.strValue = DNEWCLASS(std::string, (yytext));
								return ENTITYVALUE;
							}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 178 "..\\XmlLex.l"
{ return PUBLICID; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 179 "..\\XmlLex.l"
{
								if (check_chardata(yytext) != 0) {
									yylval.strValue = DNEWCLASS(std::string, (yytext));
									return CHARDATA;
								}
							}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 186 "..\\XmlLex.l"
{
								XmlLoaderError("Did not recognize token %s", yytext);
								return yytext[0];
							}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 190 "..\\XmlLex.l"
ECHO;
	YY_BREAK
#line 1493 "lex.XmlLex_yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(ELEMENT):
			case YY_STATE_EOF(DECL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 74);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 389 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 74;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 389 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 388);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 190 "..\\XmlLex.l"


int check_chardata(char *value)
{
	std::string str = std::string(value);
	if (str.length() < 3)
		return 1;
	for(unsigned int i = 0; i < str.length() - 2; ++i) {
		if (str.substr(i,3).compare("]]>") == 0) {
			XmlLoaderError("Error! %s has the substring ]]> in position %d\n", str.c_str(), i);
			return 0;
		}
	}
	return 1;
}

char *substring(char *value, int begin, int end)
{
	int length = strlen(value);
	value[length-end] = 0;
	return (value += begin);
}

