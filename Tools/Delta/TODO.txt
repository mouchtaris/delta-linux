1)
-tabs in some large codegen macros.

2) using multiple: should make it semantic error in editor / ast

//	Add in DeltaStdDefs.h
#define	DELTA_GENERAL_RUNTIME_ERROR					"DeltaGeneralRuntimeError"
#define	DELTA_ARITH_OPERATOR_ERROR					"DeltaArithmeticOperatorError"
#define	DELTA_RELAT_OPERATOR_ERROR					"DeltaRelationalOperatorError"
#define	DELTA_NOT_CALLABLE_ERROR					"DeltaNotCallableError"
#define	DELTA_FORMAL_ARG_WITHOUT_ACTUAL_VALUE_ERROR	"DeltaFormalArgWithoutActualValueError"
#define	DELTA_UNRESOLVED_LIBFUNC_ERROR				"DeltaUnresolvedLibraryFuncError"
#define	DELTA_LIBFUNC_NATIVE_EXCEPTION_ERROR		"DeltaLibraryFuncNativeExceptionError"
#define	DELTA_UNRESOLVED_GLOBALFUNC_ERROR			"DeltaUnresolvedGlobalFuncError"
#define	DELTA_SUICIDAL_VM_ERROR						"DeltaVirtualMachineSelfDestructionError"
#define	DELTA_ZOMBI_VM_ERROR						"DeltaVirtualMachineCallerDestructionError"


// Add in DeltaStdLibFuncNames.h
"#group(errors)",
DELTA_STDLIB_NAMESPACE_CONST(DELTA_GENERAL_RUNTIME_ERROR, DELTA_GENERAL_RUNTIME_ERROR)					
DELTA_STDLIB_NAMESPACE_CONST(DELTA_ARITH_OPERATOR_ERROR, DELTA_ARITH_OPERATOR_ERROR)					
DELTA_STDLIB_NAMESPACE_CONST(DELTA_RELAT_OPERATOR_ERROR, DELTA_RELAT_OPERATOR_ERROR)					
DELTA_STDLIB_NAMESPACE_CONST(DELTA_NOT_CALLABLE_ERROR, DELTA_NOT_CALLABLE_ERROR)					
DELTA_STDLIB_NAMESPACE_CONST(DELTA_FORMAL_ARG_WITHOUT_ACTUAL_VALUE_ERROR, DELTA_FORMAL_ARG_WITHOUT_ACTUAL_VALUE_ERROR)	
DELTA_STDLIB_NAMESPACE_CONST(DELTA_UNRESOLVED_LIBFUNC_ERROR, DELTA_UNRESOLVED_LIBFUNC_ERROR)				
DELTA_STDLIB_NAMESPACE_CONST(DELTA_LIBFUNC_NATIVE_EXCEPTION_ERROR, DELTA_LIBFUNC_NATIVE_EXCEPTION_ERROR)		
DELTA_STDLIB_NAMESPACE_CONST(DELTA_UNRESOLVED_GLOBALFUNC_ERROR, DELTA_UNRESOLVED_GLOBALFUNC_ERROR)			
DELTA_STDLIB_NAMESPACE_CONST(DELTA_SUICIDAL_VM_ERROR, DELTA_SUICIDAL_VM_ERROR)						
DELTA_STDLIB_NAMESPACE_CONST(DELTA_ZOMBI_VM_ERROR, DELTA_ZOMBI_VM_ERROR)						
"#group(-)"

bool std::iserrorid(string tag);	// true if any runtime error

// Exception handling pattern-1

try <stmt>
trap e {
	local h = [
		{	std::DELTA_ARITH_OPERATOR_ERROR				,
			std::DELTA_LIBFUNC_NATIVE_EXCEPTION_ERROR	,
			std::DELTA_SUICIDAL_VM_ERROR				,
			std::DELTA_ZOMBI_VM_ERROR
			: function { <handler logic-1> }
		},
		{	std::DELTA_RELAT_OPERATOR_ERROR				,
			std::DELTA_NOT_CALLABLE_ERROR
			: function { <handler logic-2> }
		}
	][std::getvaluetag(e)];

	if (not h)
		throw(e);	// rethrow or could be default logic
	else
		h();
}

// Exception handling pattern-1

try <stmt>
trap e {
	if (std::iserrorid(local tag = std::getvaluetag(e))) {
		<handle as a runtime error exception>
	}
	else {
		<handle as client exception>
	}
}